import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import requests
import zipfile
import shutil
import traceback
import logging
import time
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtPrintSupport import *
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Qt5Agg')
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
import qtawesome as qta
import openpyxl
from openpyxl.styles import Font


# QTableView modelini Excel'e aktaran fonksiyon

from PyQt5.QtWidgets import QProgressDialog

def export_table_to_excel(model, proxy_model, parent):
    try:
        file_path, _ = QFileDialog.getSaveFileName(parent, "Excel Olarak Kaydet", "", "Excel Dosyasƒ± (*.xlsx)")
        if not file_path:
            return
        rows = proxy_model.rowCount()
        cols = proxy_model.columnCount()
        data = []
        headers = []
        for col in range(cols):
            headers.append(str(model.headerData(col, Qt.Orientation.Horizontal)))
        # Y√ºkleniyor penceresi
        progress = QProgressDialog("Veriler Excel'e aktarƒ±lƒ±yor...", None, 0, rows, parent)
        progress.setWindowTitle("L√ºtfen Bekleyin")
        progress.setWindowModality(Qt.WindowModal)
        progress.setMinimumDuration(0)
        for row in range(rows):
            row_data = []
            for col in range(cols):
                index = proxy_model.index(row, col)
                row_data.append(proxy_model.data(index))
            data.append(row_data)
            progress.setValue(row)
            if progress.wasCanceled():
                QMessageBox.warning(parent, "ƒ∞ptal Edildi", "Excel aktarƒ±mƒ± kullanƒ±cƒ± tarafƒ±ndan iptal edildi.")
                return
        progress.setValue(rows)
        df = pd.DataFrame(data, columns=headers)
        df.to_excel(file_path, index=False)
        QMessageBox.information(parent, "Ba≈üarƒ±lƒ±", "Excel dosyasƒ± ba≈üarƒ±yla kaydedildi.")
    except Exception as e:
        logger.error(f"Excel'e aktarma hatasƒ±: {str(e)}", exc=e)
        QMessageBox.critical(parent, "Hata", "Excel'e aktarƒ±rken bir hata olu≈ütu. L√ºtfen dosyanƒ±n a√ßƒ±k olmadƒ±ƒüƒ±ndan ve yeterli disk alanƒ± olduƒüundan emin olun. Teknik detaylar log dosyasƒ±na kaydedildi.")

from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QHBoxLayout, QVBoxLayout, QPushButton,
    QLabel, QListWidget, QListWidgetItem, QStackedWidget, QTableWidget, QTableWidgetItem,
    QDialog, QTextEdit, QLineEdit, QMessageBox, QFormLayout, QFileDialog, QComboBox, QDateEdit,
    QMenuBar, QMenu, QAction, QGridLayout, QFrame, QGroupBox, QScrollArea, QTabWidget,
    QHeaderView, QAbstractItemView, QSplitter, QToolBar, QStatusBar, QProgressBar,
    QTableView, QCheckBox
)
from PyQt5.QtGui import QIcon, QFont, QPixmap, QPalette, QColor, QStandardItemModel, QStandardItem, QKeySequence
from PyQt5.QtCore import QSize, QDate, Qt, QTimer, pyqtSignal, QThread, pyqtSignal, QSortFilterProxyModel
from PyQt5.QtWidgets import QShortcut
import pandas as pd
import json
import shutil

def save_vehicle_photo(selected_photo_path, plaka):
    target_dir = os.path.join("veri", "arac_fotograflari")
    os.makedirs(target_dir, exist_ok=True)
    ext = os.path.splitext(selected_photo_path)[1].lower()
    target_path = os.path.join(target_dir, f"{plaka}{ext}")
    # Eƒüer kaynak ve hedef aynƒ±ysa tekrar kopyalama!
    if os.path.abspath(selected_photo_path) == os.path.abspath(target_path):
        return target_path
    shutil.copyfile(selected_photo_path, target_path)
    return target_path  # Bunu veri tabanƒ±nda/foto_path olarak saklayƒ±n
# =============================================================================
# KONFƒ∞G√úRASYON VE AYARLAR
# =============================================================================

class Config:
    """Uygulama konfig√ºrasyonu"""
    
    # Uygulama bilgileri
    APP_NAME = "Ara√ß Filo Y√∂netim Sistemi"
    VERSION = "22.07.24.01"
    DEVELOPER = "Ertuƒürul Kamil ≈ûAHƒ∞N"
    EMAIL = "ertugrul.yazilim@gmail.com"
    
    # G√ºncelleme ayarlarƒ±
    UPDATE_CHECK_URL = "https://api.github.com/repos/ertugrul-yazilim/arac.filo/contents/version.txt"
    GITHUB_REPO_URL = "https://github.com/ertugrul-yazilim/arac.filo"
    UPDATE_CHECK_INTERVAL = 24 * 60 * 60  # 24 saat (saniye cinsinden)
    AUTO_UPDATE_CHECK = True  # Otomatik g√ºncelleme kontrol√º
    SHOW_BETA_UPDATES = False  # Beta s√ºr√ºmleri g√∂ster
    
    # Mail ayarlarƒ± (Geri bildirim i√ßin)
    MAIL_SMTP_SERVER = "smtp.gmail.com"
    MAIL_SMTP_PORT = 587
    MAIL_USERNAME = "ertugrul.yazilim@gmail.com"
    MAIL_PASSWORD = "kmrp noyx hxlc ntcy"  # Gmail uygulama ≈üifresi
    MAIL_FROM_NAME = "Ara√ß Filo Y√∂netim Sistemi"
    

    
    # Dosya yollarƒ±
    DATA_DIR = "veri"
    BACKUP_DIR = "veri/yedekler"
    LOG_DIR = "veri/loglar"
    
    # Excel dosya isimleri
    EXCEL_FILES = {
        'araclar': 'araclar.xlsx',
        'giderler': 'giderler.xlsx',
        'suruculer': 'suruculer.xlsx', 
        'bakimlar': 'bakimlar.xlsx',
        'yakitlar': 'yakitlar.xlsx',
        'cezalar': 'cezalar.xlsx',
        'kazalar': 'kazalar.xlsx',
        'belgeler': 'belgeler.xlsx',
        'hatirlatmalar': 'hatirlatmalar.xlsx',
        'silinen_araclar': 'silinen_araclar.xlsx',
        'silinen_suruculer': 'silinen_suruculer.xlsx',
        'silinen_bakimlar': 'silinen_bakimlar.xlsx',
        'silinen_giderler': 'silinen_giderler.xlsx',
        'silinen_cezalar': 'silinen_cezalar.xlsx',
        'silinen_kazalar': 'silinen_kazalar.xlsx'
    }
    
    # Men√º yapƒ±sƒ± - Modern ikonlarla
    MENU_ITEMS = [
        # Ana Y√∂netim
        {"id": "dashboard", "title": "Ana Sayfa", "icon": "fa.home", "emoji_icon": "üè†", "group": "main", "shortcut": "Ctrl+1"},
        
        # Ara√ß Y√∂netimi
        {"id": "araclar", "title": "Ara√ßlar", "icon": "fa.car", "emoji_icon": "üöó", "group": "vehicles", "shortcut": "Ctrl+2"},
        {"id": "suruculer", "title": "S√ºr√ºc√ºler", "icon": "fa.user-tie", "emoji_icon": "üë®‚Äç‚úàÔ∏è", "group": "vehicles", "shortcut": "Ctrl+3"},
        
        # Operasyonel ƒ∞≈ülemler
        {"id": "bakimlar", "title": "Bakƒ±m & Onarƒ±mlar", "icon": "fa.wrench", "emoji_icon": "üîß", "group": "operations", "shortcut": "Ctrl+4"},
        {"id": "yakitlar", "title": "Yakƒ±tlar", "icon": "fa.gas-pump", "emoji_icon": "‚õΩ", "group": "operations", "shortcut": "Ctrl+5"},
        {"id": "trafik", "title": "Trafik Cezalarƒ± & Kazalar", "icon": "fa.exclamation-triangle", "emoji_icon": "üö®", "group": "operations", "shortcut": "Ctrl+6"},
        
        # Raporlama & Planlama
        {"id": "raporlar", "title": "Raporlar", "icon": "fa.chart-bar", "emoji_icon": "üìä", "group": "reports", "shortcut": "Ctrl+7"},
        
        # Sistem
        {"id": "belgeler", "title": "Belgeler", "icon": "fa.folder", "emoji_icon": "üìÅ", "group": "system", "shortcut": "Ctrl+8"},
        {"id": "ayarlar", "title": "Ayarlar", "icon": "fa.cog", "emoji_icon": "‚öôÔ∏è", "group": "system", "shortcut": "Ctrl+9"}
    ]
    
    # Men√º gruplarƒ±
    MENU_GROUPS = {
        "main": {"title": "Ana Y√∂netim", "color": "#3498db"},
        "vehicles": {"title": "Ara√ß Y√∂netimi", "color": "#e74c3c"},
        "operations": {"title": "Operasyonel ƒ∞≈ülemler", "color": "#f39c12"},
        "reports": {"title": "Raporlama & Planlama", "color": "#27ae60"},
        "system": {"title": "Sistem", "color": "#9b59b6"}
    }

class SimpleLogger:
    def __init__(self):
        self.log_file = os.path.join(Config.LOG_DIR, "app.log")
        self._ensure_log_dir()
    def _ensure_log_dir(self):
        os.makedirs(Config.LOG_DIR, exist_ok=True)
    def _write_log(self, level, msg):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] [{level}] {msg}\n"
        print(log_entry.strip())
        try:
            with open(self.log_file, 'a', encoding='utf-8') as f:
                f.write(log_entry)
        except Exception as e:
            print(f"Log dosyasƒ± yazma hatasƒ±: {e}")
    def info(self, msg): 
        self._write_log("INFO", msg)
    def error(self, msg, exc=None): 
        if exc:
            msg += f" - Exception: {str(exc)}"
        self._write_log("ERROR", msg)
    def warning(self, msg): 
        self._write_log("WARNING", msg)
    def debug(self, msg): 
        self._write_log("DEBUG", msg)
    def critical(self, msg, exc=None): 
        if exc:
            msg += f" - Exception: {str(exc)}"
        self._write_log("CRITICAL", msg)
    def log_system_event(self, event, details=""): 
        self._write_log("SYSTEM", f"{event}: {details}")
    def log_user_action(self, action, details=""): 
        self._write_log("USER", f"{action}: {details}")

logger = SimpleLogger()

# =============================================================================
# GELƒ∞≈ûMƒ∞≈û G√úNCELLEME Sƒ∞STEMƒ∞
# =============================================================================

class UpdateChecker(QThread):
    """Geli≈ümi≈ü g√ºncelleme kontrol sistemi"""
    
    update_available = pyqtSignal(dict)  # update_info dict
    no_update = pyqtSignal()
    error_occurred = pyqtSignal(str)
    check_progress = pyqtSignal(str)  # ƒ∞lerleme durumu
    
    def __init__(self):
        super().__init__()
        self.last_check_time = None
        self.check_interval = 24 * 60 * 60  # 24 saat (saniye cinsinden)
    
    def run(self):
        """G√ºncelleme kontrol√º yap"""
        try:
            self.check_progress.emit("GitHub sunucusuna baƒülanƒ±lƒ±yor...")
            
            # GitHub API'den en son release bilgilerini al
            response = requests.get(Config.UPDATE_CHECK_URL, timeout=15)
            
            if response.status_code == 200:
                self.check_progress.emit("S√ºr√ºm bilgileri alƒ±nƒ±yor...")
                data = response.json()
                
                # Detaylƒ± s√ºr√ºm bilgileri
                latest_version = data.get('tag_name', '').lstrip('v')
                release_name = data.get('name', '')
                release_body = data.get('body', '')
                download_url = data.get('html_url', '')
                published_at = data.get('published_at', '')
                prerelease = data.get('prerelease', False)
                
                # Asset'leri kontrol et (exe dosyasƒ± var mƒ±?)
                assets_url = data.get('assets_url', '')
                if assets_url:
                    assets_response = requests.get(assets_url, timeout=10)
                    if assets_response.status_code == 200:
                        assets = assets_response.json()
                        exe_assets = [asset for asset in assets if asset.get('name', '').endswith('.exe')]
                        if exe_assets:
                            download_url = exe_assets[0].get('browser_download_url', download_url)
                
                self.check_progress.emit("S√ºr√ºm kar≈üƒ±la≈ütƒ±rmasƒ± yapƒ±lƒ±yor...")
                
                if self.compare_versions(latest_version, Config.VERSION):
                    # G√ºncelleme mevcut
                    update_info = {
                        'version': latest_version,
                        'name': release_name,
                        'body': release_body,
                        'download_url': download_url,
                        'published_at': published_at,
                        'prerelease': prerelease,
                        'current_version': Config.VERSION
                    }
                    self.update_available.emit(update_info)
                else:
                    self.no_update.emit()
                    
            elif response.status_code == 404:
                self.error_occurred.emit("GitHub repository bulunamadƒ±. L√ºtfen repository URL'sini kontrol edin.")
            elif response.status_code == 403:
                self.error_occurred.emit("GitHub API limiti a≈üƒ±ldƒ±. L√ºtfen daha sonra tekrar deneyin.")
            else:
                self.error_occurred.emit(f"GitHub sunucusuna ula≈üƒ±lamadƒ± (HTTP {response.status_code})")
                
        except requests.exceptions.Timeout:
            self.error_occurred.emit("Baƒülantƒ± zaman a≈üƒ±mƒ±na uƒüradƒ±. ƒ∞nternet baƒülantƒ±nƒ±zƒ± kontrol edin.")
        except requests.exceptions.ConnectionError:
            self.error_occurred.emit("ƒ∞nternet baƒülantƒ±sƒ± yok. L√ºtfen baƒülantƒ±nƒ±zƒ± kontrol edin.")
        except requests.exceptions.RequestException as e:
            self.error_occurred.emit(f"G√ºncelleme sunucusuna ula≈üƒ±lamadƒ±: {str(e)}")
        except Exception as e:
            self.error_occurred.emit(f"G√ºncelleme kontrol√º hatasƒ±: {str(e)}")
    
    def compare_versions(self, latest, current):
        """Geli≈ümi≈ü versiyon kar≈üƒ±la≈ütƒ±rmasƒ±"""
        try:
            # Versiyon formatƒ±nƒ± temizle
            latest = latest.strip().lower()
            current = current.strip().lower()
            
            # Alpha, beta, rc gibi √∂zel s√ºr√ºmleri i≈üle
            latest_parts = self._parse_version(latest)
            current_parts = self._parse_version(current)
            
            # Ana versiyon numaralarƒ±nƒ± kar≈üƒ±la≈ütƒ±r
            for i in range(max(len(latest_parts['numbers']), len(current_parts['numbers']))):
                latest_num = latest_parts['numbers'][i] if i < len(latest_parts['numbers']) else 0
                current_num = current_parts['numbers'][i] if i < len(current_parts['numbers']) else 0
                
                if latest_num > current_num:
                    return True
                elif latest_num < current_num:
                    return False
            
            # Ana versiyonlar e≈üitse, √∂zel s√ºr√ºm bilgilerini kontrol et
            if latest_parts['suffix'] and not current_parts['suffix']:
                return True  # Mevcut s√ºr√ºm stable, yeni s√ºr√ºm pre-release
            elif not latest_parts['suffix'] and current_parts['suffix']:
                return True  # Yeni s√ºr√ºm stable, mevcut s√ºr√ºm pre-release
            
            return False
            
        except Exception as e:
            logger.error(f"Versiyon kar≈üƒ±la≈ütƒ±rma hatasƒ±: {str(e)}")
            return False
    
    def _parse_version(self, version_str):
        """Versiyon string'ini parse et"""
        import re
        
        # Versiyon numaralarƒ±nƒ± ayƒ±r
        numbers = []
        suffix = ""
        
        # Sayƒ±sal kƒ±sƒ±mlarƒ± bul
        number_matches = re.findall(r'\d+', version_str)
        numbers = [int(x) for x in number_matches]
        
        # √ñzel s√ºr√ºm bilgilerini bul (alpha, beta, rc, vb.)
        suffix_match = re.search(r'[a-zA-Z]+', version_str)
        if suffix_match:
            suffix = suffix_match.group().lower()
        
        return {
            'numbers': numbers,
            'suffix': suffix
        }
    
    def should_check_for_updates(self):
        """G√ºncelleme kontrol√º yapƒ±lmalƒ± mƒ±?"""
        if not self.last_check_time:
            return True
        
        time_diff = time.time() - self.last_check_time
        return time_diff >= self.check_interval
    
    def mark_check_completed(self):
        """Kontrol tamamlandƒ± olarak i≈üaretle"""
        self.last_check_time = time.time()

class VersionInfo:
    """Versiyon bilgileri sƒ±nƒ±fƒ±"""
    
    def __init__(self, version, name="", body="", download_url="", published_at="", prerelease=False):
        self.version = version
        self.name = name
        self.body = body
        self.download_url = download_url
        self.published_at = published_at
        self.prerelease = prerelease
    
    def get_formatted_date(self):
        """Tarihi formatla"""
        try:
            if self.published_at:
                dt = datetime.fromisoformat(self.published_at.replace('Z', '+00:00'))
                return dt.strftime("%d.%m.%Y %H:%M")
            return ""
        except:
            return ""
    
    def get_changelog_preview(self, max_lines=5):
        """Deƒüi≈üiklik notlarƒ±nƒ±n √∂nizlemesini al"""
        if not self.body:
            return "Deƒüi≈üiklik notu bulunamadƒ±."
        
        lines = self.body.split('\n')
        preview_lines = []
        
        for line in lines[:max_lines]:
            line = line.strip()
            if line:
                # Markdown formatƒ±nƒ± temizle
                line = line.lstrip('#').lstrip('*').lstrip('-').lstrip()
                preview_lines.append(line)
        
        if len(lines) > max_lines:
            preview_lines.append("...")
        
        return '\n'.join(preview_lines)

class UpdateDialog(QDialog):
    """Geli≈ümi≈ü g√ºncelleme dialog"""
    
    def __init__(self, parent=None, update_info=None):
        super().__init__(parent)
        self.update_info = update_info or {}
        self.init_ui()
    
    def init_ui(self):
        self.setWindowTitle("üîÑ G√ºncelleme Bulundu")
        self.setMinimumSize(600, 500)
        self.setModal(True)
        
        layout = QVBoxLayout(self)
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)
        
        # Ba≈ülƒ±k
        title_label = QLabel("üéâ Yeni S√ºr√ºm Mevcut!")
        title_label.setStyleSheet("""
            font-size: 18px;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 10px;
        """)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title_label)
        
        # S√ºr√ºm bilgileri
        self.create_version_info_section(layout)
        
        # Deƒüi≈üiklik notlarƒ±
        self.create_changelog_section(layout)
        
        # Butonlar
        self.create_buttons_section(layout)
    
    def create_version_info_section(self, parent_layout):
        """S√ºr√ºm bilgileri b√∂l√ºm√º"""
        info_frame = QFrame()
        info_frame.setStyleSheet("""
            QFrame {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 8px;
                padding: 15px;
            }
        """)
        
        info_layout = QVBoxLayout(info_frame)
        info_layout.setSpacing(10)
        
        # S√ºr√ºm kar≈üƒ±la≈ütƒ±rmasƒ±
        version_layout = QHBoxLayout()
        
        # Mevcut s√ºr√ºm
        current_version_frame = QFrame()
        current_version_frame.setStyleSheet("""
            QFrame {
                background-color: #e9ecef;
                border-radius: 6px;
                padding: 10px;
            }
        """)
        current_layout = QVBoxLayout(current_version_frame)
        
        current_label = QLabel("Mevcut S√ºr√ºm")
        current_label.setStyleSheet("font-size: 11px; color: #6c757d; font-weight: bold;")
        current_version = QLabel(f"v{self.update_info.get('current_version', Config.VERSION)}")
        current_version.setStyleSheet("font-size: 16px; font-weight: bold; color: #495057;")
        
        current_layout.addWidget(current_label)
        current_layout.addWidget(current_version)
        
        # Ok i≈üareti
        arrow_label = QLabel("‚Üí")
        arrow_label.setStyleSheet("font-size: 20px; color: #6c757d; margin: 0 15px;")
        arrow_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        # Yeni s√ºr√ºm
        new_version_frame = QFrame()
        new_version_frame.setStyleSheet("""
            QFrame {
                background-color: #d4edda;
                border-radius: 6px;
                padding: 10px;
            }
        """)
        new_layout = QVBoxLayout(new_version_frame)
        
        new_label = QLabel("Yeni S√ºr√ºm")
        new_label.setStyleSheet("font-size: 11px; color: #155724; font-weight: bold;")
        new_version = QLabel(f"v{self.update_info.get('version', '')}")
        new_version.setStyleSheet("font-size: 16px; font-weight: bold; color: #155724;")
        
        new_layout.addWidget(new_label)
        new_layout.addWidget(new_version)
        
        version_layout.addWidget(current_version_frame)
        version_layout.addWidget(arrow_label)
        version_layout.addWidget(new_version_frame)
        version_layout.addStretch()
        
        info_layout.addLayout(version_layout)
        
        # Ek bilgiler
        details_layout = QHBoxLayout()
        
        # Yayƒ±n tarihi
        if self.update_info.get('published_at'):
            date_label = QLabel(f"üìÖ Yayƒ±n Tarihi: {self.get_formatted_date()}")
            date_label.setStyleSheet("font-size: 12px; color: #6c757d;")
            details_layout.addWidget(date_label)
        
        # Pre-release uyarƒ±sƒ±
        if self.update_info.get('prerelease', False):
            prerelease_label = QLabel("‚ö†Ô∏è Pre-release S√ºr√ºm")
            prerelease_label.setStyleSheet("font-size: 12px; color: #856404; background-color: #fff3cd; padding: 2px 6px; border-radius: 3px;")
            details_layout.addWidget(prerelease_label)
        
        details_layout.addStretch()
        info_layout.addLayout(details_layout)
        
        parent_layout.addWidget(info_frame)
    
    def create_changelog_section(self, parent_layout):
        """Deƒüi≈üiklik notlarƒ± b√∂l√ºm√º"""
        changelog_frame = QFrame()
        changelog_frame.setStyleSheet("""
            QFrame {
                background-color: white;
                border: 1px solid #dee2e6;
                border-radius: 8px;
                padding: 15px;
            }
        """)
        
        changelog_layout = QVBoxLayout(changelog_frame)
        
        # Ba≈ülƒ±k
        changelog_title = QLabel("üìù Deƒüi≈üiklik Notlarƒ±")
        changelog_title.setStyleSheet("font-size: 14px; font-weight: bold; color: #2c3e50; margin-bottom: 10px;")
        changelog_layout.addWidget(changelog_title)
        
        # Deƒüi≈üiklik notlarƒ±
        changelog_text = QTextEdit()
        changelog_text.setReadOnly(True)
        changelog_text.setMaximumHeight(200)
        changelog_text.setStyleSheet("""
            QTextEdit {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 4px;
                padding: 10px;
                font-size: 12px;
                line-height: 1.4;
            }
        """)
        
        changelog_content = self.update_info.get('body', 'Deƒüi≈üiklik notu bulunamadƒ±.')
        if changelog_content:
            # Markdown formatƒ±nƒ± temizle
            lines = changelog_content.split('\n')
            cleaned_lines = []
            for line in lines:
                line = line.strip()
                if line:
                    # Markdown ba≈ülƒ±klarƒ±nƒ± temizle
                    line = line.lstrip('#').lstrip('*').lstrip('-').lstrip()
                    cleaned_lines.append(line)
            
            changelog_text.setPlainText('\n'.join(cleaned_lines))
        else:
            changelog_text.setPlainText("Bu s√ºr√ºm i√ßin deƒüi≈üiklik notu bulunamadƒ±.")
        
        changelog_layout.addWidget(changelog_text)
        parent_layout.addWidget(changelog_frame)
    
    def create_buttons_section(self, parent_layout):
        """Butonlar b√∂l√ºm√º"""
        btn_layout = QHBoxLayout()
        btn_layout.setSpacing(10)
        
        # ƒ∞ndir butonu
        btn_download = QPushButton("‚¨áÔ∏è G√ºncellemeyi ƒ∞ndir")
        btn_download.setStyleSheet("""
            QPushButton {
                background-color: #28a745;
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 6px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #218838;
            }
            QPushButton:pressed {
                background-color: #1e7e34;
            }
        """)
        btn_download.clicked.connect(self.download_update)
        
        # Daha sonra butonu
        btn_later = QPushButton("‚è∞ Daha Sonra")
        btn_later.setStyleSheet("""
            QPushButton {
                background-color: #6c757d;
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 6px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #5a6268;
            }
        """)
        btn_later.clicked.connect(self.remind_later)
        
        # ƒ∞ptal butonu
        btn_cancel = QPushButton("‚ùå ƒ∞ptal")
        btn_cancel.setStyleSheet("""
            QPushButton {
                background-color: #dc3545;
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 6px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c82333;
            }
        """)
        btn_cancel.clicked.connect(self.reject)
        
        btn_layout.addWidget(btn_download)
        btn_layout.addWidget(btn_later)
        btn_layout.addWidget(btn_cancel)
        
        parent_layout.addLayout(btn_layout)
    
    def get_formatted_date(self):
        """Tarihi formatla"""
        try:
            published_at = self.update_info.get('published_at', '')
            if published_at:
                dt = datetime.fromisoformat(published_at.replace('Z', '+00:00'))
                return dt.strftime("%d.%m.%Y %H:%M")
            return ""
        except:
            return ""
    
    def download_update(self):
        """G√ºncellemeyi indir"""
        try:
            download_url = self.update_info.get('download_url', '')
            if not download_url:
                QMessageBox.warning(self, "Uyarƒ±", "ƒ∞ndirme linki bulunamadƒ±.")
                return
            
            import webbrowser
            webbrowser.open(download_url)
            
            QMessageBox.information(self, "‚úÖ ƒ∞ndirme Ba≈ülatƒ±ldƒ±", 
                "Tarayƒ±cƒ±da indirme sayfasƒ± a√ßƒ±ldƒ±.\n\n"
                "üìã Kurulum Adƒ±mlarƒ±:\n"
                "1. Dosyayƒ± indirin\n"
                "2. Mevcut uygulamayƒ± kapatƒ±n\n"
                "3. ƒ∞ndirilen dosyayƒ± √ßalƒ±≈ütƒ±rƒ±n\n"
                "4. Kurulumu tamamlayƒ±n\n\n"
                "‚ö†Ô∏è √ñnemli: Kurulum √∂ncesi verilerinizi yedekleyin!")
            
            self.accept()
            
        except Exception as e:
            QMessageBox.critical(self, "‚ùå ƒ∞ndirme Hatasƒ±", f"ƒ∞ndirme ba≈ülatƒ±lamadƒ±:\n{str(e)}")
    
    def remind_later(self):
        """Daha sonra hatƒ±rlat"""
        QMessageBox.information(self, "‚è∞ Hatƒ±rlatma", 
            "G√ºncelleme hatƒ±rlatmasƒ± 24 saat sonra tekrar g√∂sterilecek.")
        self.reject()

# =============================================================================
# GERƒ∞ Bƒ∞LDƒ∞Rƒ∞M Sƒ∞STEMƒ∞
# =============================================================================



class FeedbackDialog(QDialog):
    """Geri bildirim dialog"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.init_ui()
    
    def init_ui(self):
        self.setWindowTitle("Geri Bildirim G√∂nder")
        self.setMinimumSize(500, 400)
        self.setModal(True)
        
        layout = QVBoxLayout(self)
        
        # Ba≈ülƒ±k
        title = QLabel("Geri Bildirim")
        title.setStyleSheet("font-size: 18px; font-weight: bold; color: #2c3e50; margin-bottom: 10px;")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # Form
        form_layout = QFormLayout()
        
        self.name = QLineEdit()
        self.name.setPlaceholderText("Adƒ±nƒ±z (opsiyonel)")
        
        self.email = QLineEdit()
        self.email.setPlaceholderText("E-posta adresiniz (opsiyonel)")
        
        self.category = QComboBox()
        self.category.addItems([
            "√ñneri", "Hata Bildirimi", "Yeni √ñzellik", "Genel", "Diƒüer"
        ])
        
        self.subject = QLineEdit()
        self.subject.setPlaceholderText("Konu ba≈ülƒ±ƒüƒ±")
        
        self.message = QTextEdit()
        self.message.setPlaceholderText("Mesajƒ±nƒ±zƒ± buraya yazƒ±n...")
        self.message.setMinimumHeight(150)
        
        form_layout.addRow("Ad:", self.name)
        form_layout.addRow("E-posta:", self.email)
        form_layout.addRow("Kategori:", self.category)
        form_layout.addRow("Konu:", self.subject)
        form_layout.addRow("Mesaj:", self.message)
        
        layout.addLayout(form_layout)
        
        # Butonlar
        btn_layout = QHBoxLayout()
        
        btn_send = QPushButton("üìß G√∂nder")
        btn_send.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        btn_send.clicked.connect(self.send_feedback)
        
        btn_cancel = QPushButton("ƒ∞ptal")
        btn_cancel.setStyleSheet("""
            QPushButton {
                background-color: #95a5a6;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #7f8c8d;
            }
        """)
        btn_cancel.clicked.connect(self.reject)
        
        btn_layout.addWidget(btn_send)
        btn_layout.addWidget(btn_cancel)
        layout.addLayout(btn_layout)
    
    def send_feedback(self):
        """Geri bildirim g√∂nder"""
        if not self.subject.text().strip():
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen konu ba≈ülƒ±ƒüƒ± girin.")
            return
        
        if not self.message.toPlainText().strip():
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen mesajƒ±nƒ±zƒ± yazƒ±n.")
            return
        
        try:
            # Mail i√ßeriƒüi olu≈ütur
            msg = MIMEMultipart()
            msg['From'] = f"{Config.MAIL_FROM_NAME} <{Config.MAIL_USERNAME}>"
            msg['To'] = Config.MAIL_USERNAME
            msg['Subject'] = f"[Geri Bildirim] {self.subject.text().strip()}"
            
            # Mail g√∂vdesi
            body = f"""
Geri Bildirim Detaylarƒ±:
========================

Kategori: {self.category.currentText()}
Ad: {self.name.text().strip() or 'Belirtilmemi≈ü'}
E-posta: {self.email.text().strip() or 'Belirtilmemi≈ü'}
Konu: {self.subject.text().strip()}

Mesaj:
{self.message.toPlainText().strip()}

---
Bu mesaj Ara√ß Filo Y√∂netim Sistemi v{Config.VERSION} tarafƒ±ndan g√∂nderilmi≈ütir.
            """
            
            msg.attach(MIMEText(body, 'plain', 'utf-8'))
            
            # Mail g√∂nder
            server = smtplib.SMTP(Config.MAIL_SMTP_SERVER, Config.MAIL_SMTP_PORT)
            server.starttls()
            server.login(Config.MAIL_USERNAME, Config.MAIL_PASSWORD)
            server.send_message(msg)
            server.quit()
            
            QMessageBox.information(self, "Ba≈üarƒ±lƒ±", 
                "Geri bildiriminiz ba≈üarƒ±yla g√∂nderildi.\nTe≈üekk√ºr ederiz!")
            self.accept()
            
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Mail g√∂nderme hatasƒ±: {str(e)}")

# =============================================================================
# OTOMASYON Sƒ∞STEMƒ∞
# =============================================================================

class AutomationSystem:
    """Otomasyon sistemi - hatƒ±rlatmalar ve kontroller"""
    
    def __init__(self, data_manager):
        self.data_manager = data_manager
    
    def check_expiring_documents(self):
        """S√ºresi Yakla≈üan ƒ∞≈ülemleri kontrol et"""
        try:
            vehicles = self.data_manager.load_data('araclar')
            current_date = datetime.now().date()
            expiring_items = []
            
            for _, vehicle in vehicles.iterrows():
                plaka = vehicle.get('Plaka', '')
                
                # Sigorta kontrol√º
                sigorta_date = self._parse_date(vehicle.get('Sigorta Biti≈ü', ''))
                if sigorta_date:
                    days_left = (sigorta_date - current_date).days
                    if 0 <= days_left <= 30:
                        expiring_items.append({
                            'type': 'Sigorta',
                            'plaka': plaka,
                            'date': sigorta_date,
                                'days_left': days_left,
                                'color': '#e74c3c' if days_left <= 7 else '#f39c12'
                            })
                
                # Muayene kontrol√º
                muayene_date = self._parse_date(vehicle.get('Muayene Tarihi', ''))
                if muayene_date:
                    days_left = (muayene_date - current_date).days
                    if 0 <= days_left <= 30:
                        expiring_items.append({
                            'type': 'Muayene',
                            'plaka': plaka,
                            'date': muayene_date,
                            'days_left': days_left,
                            'color': '#e74c3c' if days_left <= 7 else '#f39c12'
                        })
            
            return expiring_items
            
        except Exception as e:
            print(f"Belge kontrol√º hatasƒ±: {e}")
            return []
    
    def _parse_date(self, date_str):
        """Tarih string'ini parse et"""
        try:
            if pd.isna(date_str) or not date_str:
                return None
            return pd.to_datetime(date_str).date()
        except:
            return None
    
    def _parse_date(self, date_str):
        """Tarih string'ini parse et - T√ºrk√ße format (dd.mm.yyyy) i√ßin dayfirst=True"""
        try:
            if pd.isna(date_str) or not date_str:
                return None
            return pd.to_datetime(date_str, dayfirst=True).date()
        except:
            return None
    
    def create_reminder(self, vehicle_plaka, reminder_type, expiry_date):
        """Hatƒ±rlatma olu≈ütur"""
        try:
            reminders = self.data_manager.load_data('hatirlatmalar')
            
            # Mevcut hatƒ±rlatma kontrol√º
            existing = reminders[
                (reminders['Ba≈ülƒ±k'].str.contains(vehicle_plaka, na=False)) &
                (reminders['A√ßƒ±klama'].str.contains(reminder_type, na=False))
            ]
            
            if not existing.empty:
                return  # Zaten hatƒ±rlatma var
            
            # Yeni hatƒ±rlatma
            new_reminder = {
                'ID': len(reminders) + 1 if not reminders.empty else 1,
                'Ba≈ülƒ±k': f"{vehicle_plaka} - {reminder_type} Hatƒ±rlatmasƒ±",
                'A√ßƒ±klama': f"{vehicle_plaka} plakalƒ± aracƒ±n {reminder_type} s√ºresi {expiry_date} tarihinde dolacak.",
                'Tarih': expiry_date.strftime("%Y-%m-%d"),
                'T√ºr': reminder_type,
                'Durum': 'Bekliyor',
                'Olu≈üturma Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            new_df = pd.DataFrame([new_reminder])
            reminders = pd.concat([reminders, new_df], ignore_index=True)
            
            return self.data_manager.save_data('hatirlatmalar', reminders)
            
        except Exception as e:
            print(f"Hatƒ±rlatma olu≈üturma hatasƒ±: {e}")
            return False



# =============================================================================
# EXCEL VERƒ∞ Y√úKLEME Sƒ∞STEMƒ∞
# =============================================================================

class ExcelTemplateManager:
    """Excel ≈üablon y√∂netim sistemi"""
    
    def __init__(self, data_manager):
        self.data_manager = data_manager
        self.template_descriptions = {
            'araclar': {
                'title': 'Ara√ßlar ≈ûablonu',
                'description': 'Ara√ß bilgilerini i√ßeren Excel ≈üablonu. Plaka, marka, model, yƒ±l, ≈üasi no, ruhsat seri no, yakƒ±t tipi, ara√ß tipi, son km, durum, sigorta biti≈ü, muayene tarihi bilgilerini i√ßerir.',
                                     'columns': ['ID', 'Plaka', 'Marka', 'Model', 'Yƒ±l', '≈ûasi No', 'Ruhsat Seri No', 'Yakƒ±t Tipi', 'Ara√ß Tipi', 'Son KM', 'Durum', 'Sigorta Biti≈ü', 'Muayene Tarihi', 'KM Ge√ßmi≈üi', 'Olu≈üturma Tarihi', 'G√ºncelleme Tarihi', 'Son Hatƒ±rlatma']
            },
            'suruculer': {
                'title': 'S√ºr√ºc√ºler ≈ûablonu',
                'description': 'S√ºr√ºc√º bilgilerini i√ßeren Excel ≈üablonu. Ad soyad, TC kimlik, telefon, ehliyet sƒ±nƒ±fƒ±, ehliyet tarihi, atanan ara√ß, atama tarihi, durum bilgilerini i√ßerir.',
                'columns': ['ID', 'Ad Soyad', 'TC Kimlik', 'Telefon', 'Ehliyet Sƒ±nƒ±fƒ±', 'Ehliyet Tarihi', 'Atanan Ara√ß', 'Atama Tarihi', 'Durum', 'Olu≈üturma Tarihi', 'G√ºncelleme Tarihi']
            },
            'bakimlar': {
                'title': 'Bakƒ±m & Onarƒ±mlar ≈ûablonu',
                'description': 'Bakƒ±m ve onarƒ±m kayƒ±tlarƒ±nƒ± i√ßeren Excel ≈üablonu. Ara√ß plakasƒ±, bakƒ±m tarihi, km, i≈ülem t√ºr√º, servis adƒ±, tutar, a√ßƒ±klama, fatura dosyasƒ± bilgilerini i√ßerir.',
                                     'columns': ['ID', 'Ara√ß Plakasƒ±', 'Bakƒ±m Tarihi', 'KM', 'ƒ∞≈ülem T√ºr√º', 'Servis Adƒ±', 'Tutar', 'A√ßƒ±klama', 'Olu≈üturma Tarihi']
            },
            'yakitlar': {
                'title': 'Yakƒ±tlar ≈ûablonu',
                'description': 'Yakƒ±t alƒ±m kayƒ±tlarƒ±nƒ± i√ßeren Excel ≈üablonu. Ara√ß plakasƒ±, yakƒ±t tipi, tarih, litre, tutar, bayi, a√ßƒ±klama bilgilerini i√ßerir.',
                'columns': ['ID', 'Ara√ß Plakasƒ±', 'Yakƒ±t Tipi', 'Tarih', 'Litre', 'Tutar', 'Bayi', 'A√ßƒ±klama', 'Olu≈üturma Tarihi']
            },
            'giderler': {
                'title': 'Giderler ≈ûablonu',
                'description': 'Ara√ß giderlerini i√ßeren Excel ≈üablonu. Ara√ß plakasƒ±, tarih, gider t√ºr√º, tutar, a√ßƒ±klama, fatura dosyasƒ± bilgilerini i√ßerir.',
                                     'columns': ['ID', 'Ara√ß Plakasƒ±', 'Tarih', 'Gider T√ºr√º', 'Tutar', 'A√ßƒ±klama', 'Olu≈üturma Tarihi']
            },
            'cezalar': {
                'title': 'Trafik Cezalarƒ± ≈ûablonu',
                'description': 'Trafik cezalarƒ±nƒ± i√ßeren Excel ≈üablonu. Ara√ß plakasƒ±, s√ºr√ºc√º, ceza tarihi, ceza t√ºr√º, ceza tutarƒ±, ceza yeri, ceza nedeni, √∂deme durumu, √∂deme tarihi, ceza dosyasƒ± bilgilerini i√ßerir.',
                                     'columns': ['ID', 'Ara√ß Plakasƒ±', 'S√ºr√ºc√º', 'Ceza Tarihi', 'Ceza T√ºr√º', 'Ceza Tutarƒ±', 'Ceza Yeri', 'Ceza Nedeni', '√ñdeme Durumu', '√ñdeme Tarihi', 'Olu≈üturma Tarihi']
            },
            'kazalar': {
                'title': 'Kazalar ≈ûablonu',
                'description': 'Kaza kayƒ±tlarƒ±nƒ± i√ßeren Excel ≈üablonu. Ara√ß plakasƒ±, s√ºr√ºc√º, kaza tarihi, kaza yeri, kaza t√ºr√º, hasar durumu, hasar tutarƒ±, sigorta ≈üirketi, sigorta dosya no, kaza a√ßƒ±klamasƒ±, kaza dosyasƒ± bilgilerini i√ßerir.',
                                     'columns': ['ID', 'Ara√ß Plakasƒ±', 'S√ºr√ºc√º', 'Kaza Tarihi', 'Kaza Yeri', 'Kaza T√ºr√º', 'Hasar Durumu', 'Hasar Tutarƒ±', 'Sigorta ≈ûirketi', 'Sigorta Dosya No', 'Kaza A√ßƒ±klamasƒ±', 'Olu≈üturma Tarihi']
            },
            
        }
    
    def create_template(self, data_type, save_path=None):
        """Belirtilen veri t√ºr√º i√ßin Excel ≈üablonu olu≈ütur"""
        if data_type not in self.template_descriptions:
            raise ValueError(f"Ge√ßersiz veri t√ºr√º: {data_type}")
        
        if save_path is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{data_type}_sablonu_{timestamp}.xlsx"
            save_path = os.path.join(os.getcwd(), filename)
        
        # √ñrnek verilerle DataFrame olu≈ütur
        df = self._create_template_with_examples(data_type)
        
        # Excel dosyasƒ±na kaydet
        with pd.ExcelWriter(save_path, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='Veri', index=False)
            
            # A√ßƒ±klama sayfasƒ± olu≈ütur
            self._create_instruction_sheet(writer, data_type)
        
        return save_path
    
    def _create_template_with_examples(self, data_type):
        """√ñrnek verilerle ≈üablon olu≈ütur"""
        if data_type == 'araclar':
            df = pd.DataFrame({
                'ID': [1, 2],
                'Plaka': ['34ABC123', '06XYZ789'],
                'Marka': ['Renault', 'Ford'],
                'Model': ['Megane', 'Focus'],
                'Yƒ±l': ['2020', '2019'],
                '≈ûasi No': ['VF1KZ0E0000000001', 'WF0AXXGAF5K123456'],
                'Ruhsat Seri No': ['123456789', '987654321'],
                'Yakƒ±t Tipi': ['Benzin', 'Dizel'],
                'Ara√ß Tipi': ['Binek', 'SUV'],
                'Son KM': ['45000', '32000'],
                'Durum': ['Aktif', 'Aktif'],
                'Sigorta Biti≈ü': ['31.12.2024', '15.06.2024'],
                'Muayene Tarihi': ['30.09.2024', '20.03.2024'],
                
                'KM Ge√ßmi≈üi': ['2020:0, 2021:15000, 2022:30000, 2023:45000', '2019:0, 2020:12000, 2021:25000, 2022:32000'],
                'Olu≈üturma Tarihi': ['01.01.2024 10:00:00', '01.01.2024 10:00:00'],
                'G√ºncelleme Tarihi': ['01.01.2024 10:00:00', '01.01.2024 10:00:00'],
                'Son Hatƒ±rlatma': ['', '']
            })
        elif data_type == 'suruculer':
            df = pd.DataFrame({
                'ID': [1, 2],
                'Ad Soyad': ['Ahmet Yƒ±lmaz', 'Fatma Demir'],
                'TC Kimlik': ['12345678901', '98765432109'],
                'Telefon': ['0532 123 45 67', '0533 987 65 43'],
                'Ehliyet Sƒ±nƒ±fƒ±': ['B', 'B'],
                'Ehliyet Tarihi': ['15.03.2015', '20.07.2018'],
                'Atanan Ara√ß': ['34ABC123', '06XYZ789'],
                'Atama Tarihi': ['01.01.2024 10:00:00', '01.01.2024 10:00:00'],
                'Durum': ['Aktif', 'Aktif'],
                'Olu≈üturma Tarihi': ['01.01.2024 10:00:00', '01.01.2024 10:00:00'],
                'G√ºncelleme Tarihi': ['01.01.2024 10:00:00', '01.01.2024 10:00:00']
            })
        elif data_type == 'bakimlar':
            df = pd.DataFrame({
                'ID': [1, 2],
                'Ara√ß Plakasƒ±': ['34ABC123', '06XYZ789'],
                'Bakƒ±m Tarihi': ['15.01.2024', '20.02.2024'],
                'KM': ['45000', '32000'],
                'ƒ∞≈ülem T√ºr√º': ['Periyodik Bakƒ±m', 'Yaƒü Deƒüi≈üimi'],
                'Servis Adƒ±': ['Oto Servis Merkezi', 'Ford Yetkili Servis'],
                'Tutar': ['1.250,00', '850,00'],
                'A√ßƒ±klama': ['Motor yaƒüƒ±, filtre deƒüi≈üimi', 'Yaƒü ve filtre deƒüi≈üimi'],
                
                'Olu≈üturma Tarihi': ['15.01.2024 10:00:00', '20.02.2024 10:00:00']
            })
        elif data_type == 'yakitlar':
            df = pd.DataFrame({
                'ID': [1, 2],
                'Ara√ß Plakasƒ±': ['34ABC123', '06XYZ789'],
                'Yakƒ±t Tipi': ['Benzin', 'Dizel'],
                'Tarih': ['10.01.2024', '15.01.2024'],
                'Litre': ['50', '45'],
                'Tutar': ['750,00', '675,00'],
                'Bayi': ['BP ƒ∞stasyonu', 'Shell ƒ∞stasyonu'],
                'A√ßƒ±klama': ['Tam doldurma', 'Yarƒ± doldurma'],
                'Olu≈üturma Tarihi': ['10.01.2024 10:00:00', '15.01.2024 10:00:00']
            })
        elif data_type == 'giderler':
            df = pd.DataFrame({
                'ID': [1, 2],
                'Ara√ß Plakasƒ±': ['34ABC123', '06XYZ789'],
                'Tarih': ['05.01.2024', '12.01.2024'],
                'Gider T√ºr√º': ['Yƒ±kama', 'Park √úcreti'],
                'Tutar': ['50,00', '25,00'],
                'A√ßƒ±klama': ['Detaylƒ± yƒ±kama', '≈ûehir merkezi park'],
                
                'Olu≈üturma Tarihi': ['05.01.2024 10:00:00', '12.01.2024 10:00:00']
            })
        elif data_type == 'cezalar':
            df = pd.DataFrame({
                'ID': [1, 2],
                'Ara√ß Plakasƒ±': ['34ABC123', '06XYZ789'],
                'S√ºr√ºc√º': ['Ahmet Yƒ±lmaz', 'Fatma Demir'],
                'Ceza Tarihi': ['10.01.2024', '15.01.2024'],
                'Ceza T√ºr√º': ['Hƒ±z ƒ∞hlali', 'Park ƒ∞hlali'],
                'Ceza Tutarƒ±': ['500,00', '150,00'],
                'Ceza Yeri': ['ƒ∞stanbul, Kadƒ±k√∂y', 'Ankara, √áankaya'],
                'Ceza Nedeni': ['50 km/h sƒ±nƒ±rda 70 km/h', 'Yasak yerde park'],
                '√ñdeme Durumu': ['√ñdendi', 'Beklemede'],
                '√ñdeme Tarihi': ['15.01.2024', ''],
                
                'Olu≈üturma Tarihi': ['10.01.2024 10:00:00', '15.01.2024 10:00:00']
            })
        elif data_type == 'kazalar':
            df = pd.DataFrame({
                'ID': [1, 2],
                'Ara√ß Plakasƒ±': ['34ABC123', '06XYZ789'],
                'S√ºr√ºc√º': ['Ahmet Yƒ±lmaz', 'Fatma Demir'],
                'Kaza Tarihi': ['05.01.2024', '12.01.2024'],
                'Kaza Yeri': ['ƒ∞stanbul, Be≈üikta≈ü', 'Ankara, Kƒ±zƒ±lay'],
                'Kaza T√ºr√º': ['Hafif Hasar', 'Orta Hasar'],
                'Hasar Durumu': ['√ñn tampon √ßizik', 'Yan kapƒ± g√∂√ß√ºk'],
                'Hasar Tutarƒ±': ['2.500,00', '8.000,00'],
                'Sigorta ≈ûirketi': ['Anadolu Sigorta', 'Axa Sigorta'],
                'Sigorta Dosya No': ['AS2024001', 'AX2024001'],
                'Kaza A√ßƒ±klamasƒ±': ['Park halindeyken √ßarpma', 'Kav≈üakta √ßarpƒ±≈üma'],
                
                'Olu≈üturma Tarihi': ['05.01.2024 10:00:00', '12.01.2024 10:00:00']
            })
        
        else:
            # Bo≈ü DataFrame olu≈ütur
            self.data_manager._create_empty_excel(save_path, data_type)
            return None
        
        return df
    
    def _create_instruction_sheet(self, writer, data_type):
        """A√ßƒ±klama sayfasƒ± olu≈ütur"""
        instructions = {
            'araclar': {
                'title': 'Ara√ßlar ≈ûablonu - Kullanƒ±m Talimatlarƒ±',
                'instructions': [
                    'Bu ≈üablon ara√ß bilgilerini i√ßerir.',
                    'Plaka: Ara√ß plakasƒ± (√∂rn: 34ABC123)',
                    'Marka: Ara√ß markasƒ± (√∂rn: Renault, Ford)',
                    'Model: Ara√ß modeli (√∂rn: Megane, Focus)',
                    'Yƒ±l: Ara√ß √ºretim yƒ±lƒ± (√∂rn: 2020)',
                    '≈ûasi No: Ara√ß ≈üasi numarasƒ±',
                    'Ruhsat Seri No: Ruhsat seri numarasƒ±',
                    'Yakƒ±t Tipi: Benzin, Dizel, LPG, Elektrik',
                    'Ara√ß Tipi: Binek, SUV, Kamyon, vb.',
                    'Son KM: Ara√ßtaki son kilometre',
                    'Durum: Aktif, Pasif, Arƒ±zalƒ±',
                    'Sigorta Biti≈ü: Sigorta biti≈ü tarihi (gg.aa.yyyy)',
                    'Muayene Tarihi: Muayene tarihi (gg.aa.yyyy)',
                    
                    'KM Ge√ßmi≈üi: Yƒ±llƒ±k km ge√ßmi≈üi (2020:0, 2021:15000)',
                    '√ñNEMLƒ∞: Tarih formatƒ± gg.aa.yyyy ≈üeklinde olmalƒ±dƒ±r!',
                    '√ñNEMLƒ∞: Tutar formatƒ± 1.250,00 ≈üeklinde olmalƒ±dƒ±r!'
                ]
            },
            'suruculer': {
                'title': 'S√ºr√ºc√ºler ≈ûablonu - Kullanƒ±m Talimatlarƒ±',
                'instructions': [
                    'Bu ≈üablon s√ºr√ºc√º bilgilerini i√ßerir.',
                    'Ad Soyad: S√ºr√ºc√ºn√ºn tam adƒ±',
                    'TC Kimlik: 11 haneli TC kimlik numarasƒ±',
                    'Telefon: ƒ∞leti≈üim telefonu',
                    'Ehliyet Sƒ±nƒ±fƒ±: B, C, D, E vb.',
                    'Ehliyet Tarihi: Ehliyet alma tarihi (gg.aa.yyyy)',
                    'Atanan Ara√ß: S√ºr√ºc√ºn√ºn atandƒ±ƒüƒ± ara√ß plakasƒ±',
                    'Atama Tarihi: Atama tarihi',
                    'Durum: Aktif, Pasif',
                    '√ñNEMLƒ∞: Tarih formatƒ± gg.aa.yyyy ≈üeklinde olmalƒ±dƒ±r!'
                ]
            },
            'bakimlar': {
                'title': 'Bakƒ±m & Onarƒ±mlar ≈ûablonu - Kullanƒ±m Talimatlarƒ±',
                'instructions': [
                    'Bu ≈üablon bakƒ±m ve onarƒ±m kayƒ±tlarƒ±nƒ± i√ßerir.',
                    'Ara√ß Plakasƒ±: Bakƒ±m yapƒ±lan ara√ß plakasƒ±',
                    'Bakƒ±m Tarihi: Bakƒ±m tarihi (gg.aa.yyyy)',
                    'KM: Bakƒ±m sƒ±rasƒ±ndaki kilometre',
                    'ƒ∞≈ülem T√ºr√º: Periyodik Bakƒ±m, Yaƒü Deƒüi≈üimi, vb.',
                    'Servis Adƒ±: Bakƒ±m yapƒ±lan servis adƒ±',
                    'Tutar: Bakƒ±m tutarƒ± (1.250,00 formatƒ±nda)',
                    'A√ßƒ±klama: Bakƒ±m detaylarƒ±',
                    '√ñNEMLƒ∞: Tarih formatƒ± gg.aa.yyyy ≈üeklinde olmalƒ±dƒ±r!',
                    '√ñNEMLƒ∞: Tutar formatƒ± 1.250,00 ≈üeklinde olmalƒ±dƒ±r!'
                ]
            },
            'yakitlar': {
                'title': 'Yakƒ±tlar ≈ûablonu - Kullanƒ±m Talimatlarƒ±',
                'instructions': [
                    'Bu ≈üablon yakƒ±t alƒ±m kayƒ±tlarƒ±nƒ± i√ßerir.',
                    'Ara√ß Plakasƒ±: Yakƒ±t alƒ±nan ara√ß plakasƒ±',
                    'Yakƒ±t Tipi: Benzin, Dizel, LPG',
                    'Tarih: Yakƒ±t alma tarihi (gg.aa.yyyy)',
                    'Litre: Alƒ±nan yakƒ±t miktarƒ±',
                    'Tutar: Yakƒ±t tutarƒ± (750,00 formatƒ±nda)',
                    'Bayi: Yakƒ±t alƒ±nan istasyon',
                    'A√ßƒ±klama: Ek a√ßƒ±klamalar',
                    '√ñNEMLƒ∞: Tarih formatƒ± gg.aa.yyyy ≈üeklinde olmalƒ±dƒ±r!',
                    '√ñNEMLƒ∞: Tutar formatƒ± 750,00 ≈üeklinde olmalƒ±dƒ±r!'
                ]
            },
            'giderler': {
                'title': 'Giderler ≈ûablonu - Kullanƒ±m Talimatlarƒ±',
                'instructions': [
                    'Bu ≈üablon ara√ß giderlerini i√ßerir.',
                    'Ara√ß Plakasƒ±: Gider yapƒ±lan ara√ß plakasƒ±',
                    'Tarih: Gider tarihi (gg.aa.yyyy)',
                    'Gider T√ºr√º: Yƒ±kama, Park, Otopark, vb.',
                    'Tutar: Gider tutarƒ± (50,00 formatƒ±nda)',
                    'A√ßƒ±klama: Gider detaylarƒ±',
                    '√ñNEMLƒ∞: Tarih formatƒ± gg.aa.yyyy ≈üeklinde olmalƒ±dƒ±r!',
                    '√ñNEMLƒ∞: Tutar formatƒ± 50,00 ≈üeklinde olmalƒ±dƒ±r!'
                ]
            },
            'cezalar': {
                'title': 'Trafik Cezalarƒ± ≈ûablonu - Kullanƒ±m Talimatlarƒ±',
                'instructions': [
                    'Bu ≈üablon trafik cezalarƒ±nƒ± i√ßerir.',
                    'Ara√ß Plakasƒ±: Ceza alan ara√ß plakasƒ±',
                    'S√ºr√ºc√º: Ceza alan s√ºr√ºc√º adƒ±',
                    'Ceza Tarihi: Ceza tarihi (gg.aa.yyyy)',
                    'Ceza T√ºr√º: Hƒ±z ƒ∞hlali, Park ƒ∞hlali, vb.',
                    'Ceza Tutarƒ±: Ceza tutarƒ± (500,00 formatƒ±nda)',
                    'Ceza Yeri: Ceza alƒ±nan yer',
                    'Ceza Nedeni: Ceza nedeni',
                    '√ñdeme Durumu: √ñdendi, Beklemede',
                    '√ñdeme Tarihi: √ñdeme tarihi (gg.aa.yyyy)',
                    '√ñNEMLƒ∞: Tarih formatƒ± gg.aa.yyyy ≈üeklinde olmalƒ±dƒ±r!',
                    '√ñNEMLƒ∞: Tutar formatƒ± 500,00 ≈üeklinde olmalƒ±dƒ±r!'
                ]
            },
            'kazalar': {
                'title': 'Kazalar ≈ûablonu - Kullanƒ±m Talimatlarƒ±',
                'instructions': [
                    'Bu ≈üablon kaza kayƒ±tlarƒ±nƒ± i√ßerir.',
                    'Ara√ß Plakasƒ±: Kaza yapan ara√ß plakasƒ±',
                    'S√ºr√ºc√º: Kaza yapan s√ºr√ºc√º adƒ±',
                    'Kaza Tarihi: Kaza tarihi (gg.aa.yyyy)',
                    'Kaza Yeri: Kaza yeri',
                    'Kaza T√ºr√º: Hafif Hasar, Orta Hasar, Aƒüƒ±r Hasar',
                    'Hasar Durumu: Hasar detaylarƒ±',
                    'Hasar Tutarƒ±: Hasar tutarƒ± (2.500,00 formatƒ±nda)',
                    'Sigorta ≈ûirketi: Sigorta ≈üirketi adƒ±',
                    'Sigorta Dosya No: Sigorta dosya numarasƒ±',
                    'Kaza A√ßƒ±klamasƒ±: Kaza detaylarƒ±',
                    '√ñNEMLƒ∞: Tarih formatƒ± gg.aa.yyyy ≈üeklinde olmalƒ±dƒ±r!',
                    '√ñNEMLƒ∞: Tutar formatƒ± 2.500,00 ≈üeklinde olmalƒ±dƒ±r!'
                ]
            },
            
        }
        
        if data_type in instructions:
            info = instructions[data_type]
            
            # A√ßƒ±klama sayfasƒ± olu≈ütur
            instruction_df = pd.DataFrame({
                'A√ßƒ±klama': info['instructions']
            })
            
            instruction_df.to_excel(writer, sheet_name='Kullanƒ±m Talimatlarƒ±', index=False)
            
            # Ba≈ülƒ±k ekle
            workbook = writer.book
            worksheet = writer.sheets['Kullanƒ±m Talimatlarƒ±']
            worksheet.insert_rows(1)
            worksheet['A1'] = info['title']
            worksheet['A1'].font = openpyxl.styles.Font(bold=True, size=14)
    
    def create_all_templates(self, output_dir=None):
        """T√ºm ≈üablonlarƒ± olu≈ütur"""
        if output_dir is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_dir = os.path.join(os.getcwd(), f"excel_sablonlari_{timestamp}")
        
        os.makedirs(output_dir, exist_ok=True)
        created_files = []
        
        for data_type in self.template_descriptions.keys():
            if data_type not in ['silinen_araclar', 'silinen_suruculer', 'silinen_bakimlar', 'silinen_giderler', 'silinen_cezalar', 'silinen_kazalar', 'belgeler', 'hatirlatmalar']:
                filename = f"{data_type}_sablonu.xlsx"
                filepath = os.path.join(output_dir, filename)
                self.create_template(data_type, filepath)
                created_files.append(filepath)
        
        return output_dir, created_files
    
    def get_template_info(self, data_type):
        """≈ûablon bilgilerini d√∂nd√ºr"""
        return self.template_descriptions.get(data_type, {})


class ExcelImporter:
    """Excel veri y√ºkleme sistemi"""
    
    def __init__(self, data_manager):
        self.data_manager = data_manager
    
    def import_vehicles(self, file_path):
        """Ara√ß verilerini import et"""
        try:
            df = pd.read_excel(file_path)
            vehicles = self.data_manager.load_data('araclar')
            
            for _, row in df.iterrows():
                # Plaka kontrol√º
                plaka = str(row.get('Plaka', '')).strip()
                if not plaka:
                    continue
                
                # Mevcut ara√ß kontrol√º
                existing = vehicles[vehicles['Plaka'] == plaka]
                if not existing.empty:
                    # G√ºncelleme
                    vehicles = vehicles[vehicles['Plaka'] != plaka]
                
                # Yeni veri
                new_vehicle = {
                    'ID': len(vehicles) + 1 if len(vehicles) > 0 else 1,
                    'Plaka': plaka,
                    'Marka': str(row.get('Marka', '')).strip(),
                    'Model': str(row.get('Model', '')).strip(),
                    'Yƒ±l': str(row.get('Yƒ±l', '')).strip(),
                    '≈ûasi No': str(row.get('≈ûasi No', '')).strip(),
                    'Motor No': str(row.get('Motor No', '')).strip(),
                    'Ara√ß Tipi': str(row.get('Ara√ß Tipi', 'Binek')).strip(),
                    'Son KM': str(row.get('Son KM', '')).strip(),
                    'Durum': str(row.get('Durum', 'Aktif')).strip(),
                    'Sigorta Biti≈ü': str(row.get('Sigorta Biti≈ü', '')).strip(),
                    'Muayene Tarihi': str(row.get('Muayene Tarihi', '')).strip(),
                    'Evrak Yolu': str(row.get('Evrak Yolu', '')).strip(),
                    'KM Ge√ßmi≈üi': str(row.get('KM Ge√ßmi≈üi', '')).strip(),
                    'Olu≈üturma Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'G√ºncelleme Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }
                
                new_df = pd.DataFrame([new_vehicle])
                vehicles = pd.concat([vehicles, new_df], ignore_index=True)  # type: ignore
            
            return self.data_manager.save_data('araclar', vehicles)
            
        except Exception as e:
            raise Exception(f"Ara√ß import hatasƒ±: {str(e)}")
    
    def import_drivers(self, file_path):
        """S√ºr√ºc√º verilerini import et"""
        try:
            df = pd.read_excel(file_path)
            drivers = self.data_manager.load_data('suruculer')
            
            for _, row in df.iterrows():
                # TC kimlik kontrol√º
                tc_kimlik = str(row.get('TC Kimlik', '')).strip()
                if not tc_kimlik:
                    continue
                
                # Mevcut s√ºr√ºc√º kontrol√º
                existing = drivers[drivers['TC Kimlik'] == tc_kimlik]
                if not existing.empty:
                    # G√ºncelleme
                    drivers = drivers[drivers['TC Kimlik'] != tc_kimlik]
                
                # Yeni veri
                new_driver = {
                    'ID': len(drivers) + 1 if len(drivers) > 0 else 1,
                    'Ad Soyad': str(row.get('Ad Soyad', '')).strip(),
                    'TC Kimlik': tc_kimlik,
                    'Telefon': str(row.get('Telefon', '')).strip(),
                    'Ehliyet Sƒ±nƒ±fƒ±': str(row.get('Ehliyet Sƒ±nƒ±fƒ±', 'B')).strip(),
                    'Ehliyet Tarihi': str(row.get('Ehliyet Tarihi', '')).strip(),
                    'Atanan Ara√ß': str(row.get('Atanan Ara√ß', '')).strip(),
                    'Atama Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'Durum': str(row.get('Durum', 'Aktif')).strip(),
                    'Olu≈üturma Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'G√ºncelleme Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }
                
                new_df = pd.DataFrame([new_driver])
                drivers = pd.concat([drivers, new_df], ignore_index=True)  # type: ignore
            
            return self.data_manager.save_data('suruculer', drivers)
            
        except Exception as e:
            raise Exception(f"S√ºr√ºc√º import hatasƒ±: {str(e)}")
    
    def import_maintenance(self, file_path):
        """Bakƒ±m verilerini import et"""
        try:
            df = pd.read_excel(file_path)
            maintenance = self.data_manager.load_data('bakimlar')
            
            for _, row in df.iterrows():
                # Yeni bakƒ±m kaydƒ±
                new_maintenance = {
                    'ID': len(maintenance) + 1 if len(maintenance) > 0 else 1,
                    'Ara√ß Plakasƒ±': str(row.get('Ara√ß Plakasƒ±', '')).strip(),
                    'Bakƒ±m Tarihi': str(row.get('Bakƒ±m Tarihi', '')).strip(),
                    'KM': str(row.get('KM', '')).strip(),
                    'ƒ∞≈ülem T√ºr√º': str(row.get('ƒ∞≈ülem T√ºr√º', '')).strip(),
                    'Servis Adƒ±': str(row.get('Servis Adƒ±', '')).strip(),
                    'Tutar': str(row.get('Tutar', '')).strip(),
                    'A√ßƒ±klama': str(row.get('A√ßƒ±klama', '')).strip(),
                    'Fatura Dosyasƒ±': str(row.get('Fatura Dosyasƒ±', '')).strip(),
                    'Olu≈üturma Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }
                
                new_df = pd.DataFrame([new_maintenance])
                maintenance = pd.concat([maintenance, new_df], ignore_index=True)
            
            return self.data_manager.save_data('bakimlar', maintenance)
            
        except Exception as e:
            raise Exception(f"Bakƒ±m import hatasƒ±: {str(e)}")
    
    def import_expenses(self, file_path):
        """Gider verilerini import et"""
        try:
            df = pd.read_excel(file_path)
            expenses = self.data_manager.load_data('giderler')
            
            for _, row in df.iterrows():
                # Yeni gider kaydƒ±
                new_expense = {
                    'ID': len(expenses) + 1 if len(expenses) > 0 else 1,
                    'Ara√ß Plakasƒ±': str(row.get('Ara√ß Plakasƒ±', '')).strip(),
                    'Gider T√ºr√º': str(row.get('Gider T√ºr√º', '')).strip(),
                    'Tarih': str(row.get('Tarih', '')).strip(),
                    'Tutar': str(row.get('Tutar', '')).strip(),
                    'A√ßƒ±klama': str(row.get('A√ßƒ±klama', '')).strip(),
                    'Fi≈ü Dosyasƒ±': str(row.get('Fi≈ü Dosyasƒ±', '')).strip(),
                    'Olu≈üturma Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }
                
                new_df = pd.DataFrame([new_expense])
                expenses = pd.concat([expenses, new_df], ignore_index=True)
            
            return self.data_manager.save_data('giderler', expenses)
            
        except Exception as e:
            raise Exception(f"Gider import hatasƒ±: {str(e)}")

# =============================================================================
# VERƒ∞ Y√ñNETƒ∞Mƒ∞ (Excel Tabanlƒ±)
# =============================================================================

class DataManager:
    """Excel tabanlƒ± veri y√∂neticisi"""
    
    def __init__(self):
        self._ensure_directories()
        self._init_excel_files()
    
    def _ensure_directories(self):
        """Gerekli klas√∂rleri olu≈ütur"""
        directories = [Config.DATA_DIR, Config.BACKUP_DIR, Config.LOG_DIR]
        for directory in directories:
            if not os.path.exists(directory):
                os.makedirs(directory)
    
    def _init_excel_files(self):
        """Excel dosyalarƒ±nƒ± ba≈ülat"""
        for key, filename in Config.EXCEL_FILES.items():
            filepath = os.path.join(Config.DATA_DIR, filename)
            if not os.path.exists(filepath):
                self._create_empty_excel(filepath, key)
    
    def _create_empty_excel(self, filepath, data_type):
        """Bo≈ü Excel dosyasƒ± olu≈ütur"""
        if data_type == 'araclar':
            df = pd.DataFrame({
                'ID': [],
                'Plaka': [],
                'Marka': [],
                'Model': [],
                'Yƒ±l': [],
                '≈ûasi No': [],
                'Ruhsat Seri No': [],
                'Yakƒ±t Tipi': [],
                'Ara√ß Tipi': [],
                'Son KM': [],
                'Durum': [],
                'Sigorta Biti≈ü': [],
                'Muayene Tarihi': [],
                'Evrak Yolu': [],
                'KM Ge√ßmi≈üi': [],
                'Olu≈üturma Tarihi': [],
                'G√ºncelleme Tarihi': [],
                'Son Hatƒ±rlatma': []
            })
        elif data_type == 'suruculer':
            df = pd.DataFrame({
                'ID': [],
                'Ad Soyad': [],
                'TC Kimlik': [],
                'Telefon': [],
                'Ehliyet Sƒ±nƒ±fƒ±': [],
                'Ehliyet Tarihi': [],
                'Atanan Ara√ß': [],
                'Atama Tarihi': [],
                'Durum': [],
                'Olu≈üturma Tarihi': [],
                'G√ºncelleme Tarihi': []
            })
        elif data_type == 'bakimlar':
            df = pd.DataFrame({
                'ID': [],
                'Ara√ß Plakasƒ±': [],
                'Bakƒ±m Tarihi': [],
                'KM': [],
                'ƒ∞≈ülem T√ºr√º': [],
                'Servis Adƒ±': [],
                'Tutar': [],
                'A√ßƒ±klama': [],
                'Fatura Dosyasƒ±': [],
                'Olu≈üturma Tarihi': []
            })
        elif data_type == 'yakitlar':
            df = pd.DataFrame({
                'ID': [],
                'Ara√ß Plakasƒ±': [],
                'Yakƒ±t Tipi': [],
                'Tarih': [],
                'Litre': [],
                'Tutar': [],
                'Bayi': [],
                'A√ßƒ±klama': [],
                'Olu≈üturma Tarihi': []
            })
        elif data_type == 'cezalar':
            df = pd.DataFrame({
                'ID': [],
                'Ara√ß Plakasƒ±': [],
                'S√ºr√ºc√º': [],
                'Ceza Tarihi': [],
                'Ceza T√ºr√º': [],
                'Ceza Tutarƒ±': [],
                'Ceza Yeri': [],
                'Ceza Nedeni': [],
                '√ñdeme Durumu': [],
                '√ñdeme Tarihi': [],
                'Ceza Dosyasƒ±': [],
                'Olu≈üturma Tarihi': []
            })
        elif data_type == 'kazalar':
            df = pd.DataFrame({
                'ID': [],
                'Ara√ß Plakasƒ±': [],
                'S√ºr√ºc√º': [],
                'Kaza Tarihi': [],
                'Kaza Yeri': [],
                'Kaza T√ºr√º': [],
                'Hasar Durumu': [],
                'Hasar Tutarƒ±': [],
                'Sigorta ≈ûirketi': [],
                'Sigorta Dosya No': [],
                'Kaza A√ßƒ±klamasƒ±': [],
                'Kaza Dosyasƒ±': [],
                'Olu≈üturma Tarihi': []
            })
        elif data_type == 'hatirlatmalar':
            df = pd.DataFrame({
                'ID': [],
                'Ba≈ülƒ±k': [],
                'A√ßƒ±klama': [],
                'Tarih': [],
                'T√ºr': [],
                'Durum': [],
                'Olu≈üturma Tarihi': []
            })
        elif data_type == 'silinen_araclar':
            df = pd.DataFrame({
                'ID': [],
                'Plaka': [],
                'Marka': [],
                'Model': [],
                'Yƒ±l': [],
                '≈ûasi No': [],
                'Motor No': [],
                'Ara√ß Tipi': [],
                'Son KM': [],
                'Durum': [],
                'Sigorta Biti≈ü': [],
                'Muayene Tarihi': [],
                'Birim': [],
                'Hizmet Ki≈üisi': [],
                'Fotoƒüraf Yolu': [],
                'Evrak Yolu': [],
                'KM Ge√ßmi≈üi': [],
                'Olu≈üturma Tarihi': [],
                'G√ºncelleme Tarihi': [],
                'Silme Tarihi': []
            })
        elif data_type == 'silinen_suruculer':
            df = pd.DataFrame({
                'ID': [],
                'Ad Soyad': [],
                'TC Kimlik': [],
                'Telefon': [],
                'Ehliyet Sƒ±nƒ±fƒ±': [],
                'Ehliyet Tarihi': [],
                'Atanan Ara√ß': [],
                'Atama Tarihi': [],
                'Olu≈üturma Tarihi': [],
                'G√ºncelleme Tarihi': [],
                'Silme Tarihi': []
            })
        elif data_type == 'silinen_bakimlar':
            df = pd.DataFrame({
                'ID': [],
                'Ara√ß Plakasƒ±': [],
                'Bakƒ±m Tarihi': [],
                'KM': [],
                'ƒ∞≈ülem T√ºr√º': [],
                'A√ßƒ±klama': [],
                'Tutar': [],
                'Servis': [],
                'Olu≈üturma Tarihi': [],
                'G√ºncelleme Tarihi': [],
                'Silme Tarihi': []
            })
        elif data_type == 'silinen_giderler':
            df = pd.DataFrame({
                'ID': [],
                'Ara√ß Plakasƒ±': [],
                'Tarih': [],
                'Gider T√ºr√º': [],
                'Tutar': [],
                'A√ßƒ±klama': [],
                'Olu≈üturma Tarihi': [],
                'G√ºncelleme Tarihi': [],
                'Silme Tarihi': []
            })
        elif data_type == 'silinen_cezalar':
            df = pd.DataFrame({
                'ID': [],
                'Ara√ß Plakasƒ±': [],
                'S√ºr√ºc√º': [],
                'Ceza Tarihi': [],
                'Ceza T√ºr√º': [],
                'Ceza Tutarƒ±': [],
                'Ceza Yeri': [],
                'Ceza Nedeni': [],
                '√ñdeme Durumu': [],
                '√ñdeme Tarihi': [],
                'Ceza Dosyasƒ±': [],
                'Olu≈üturma Tarihi': [],
                'Silme Tarihi': []
            })
        elif data_type == 'silinen_kazalar':
            df = pd.DataFrame({
                'ID': [],
                'Ara√ß Plakasƒ±': [],
                'S√ºr√ºc√º': [],
                'Kaza Tarihi': [],
                'Kaza Yeri': [],
                'Kaza T√ºr√º': [],
                'Hasar Durumu': [],
                'Hasar Tutarƒ±': [],
                'Sigorta ≈ûirketi': [],
                'Sigorta Dosya No': [],
                'Kaza A√ßƒ±klamasƒ±': [],
                'Kaza Dosyasƒ±': [],
                'Olu≈üturma Tarihi': [],
                'Silme Tarihi': []
            })
        elif data_type == 'giderler':
            df = pd.DataFrame({
                'ID': [],
                'Ara√ß Plakasƒ±': [],
                'Tarih': [],
                'Gider T√ºr√º': [],
                'Tutar': [],
                'A√ßƒ±klama': [],
                'Fatura Dosyasƒ±': [],
                'Olu≈üturma Tarihi': []
            })
        elif data_type == 'belgeler':
            df = pd.DataFrame({
                'ID': [],
                'Ara√ß Plakasƒ±': [],
                'Belge Adƒ±': [],
                'Belge T√ºr√º': [],
                'Ge√ßerlilik Tarihi': [],
                'Dosya Yolu': [],
                'A√ßƒ±klama': [],
                'Olu≈üturma Tarihi': []
            })
        
        df.to_excel(filepath, index=False)
    
    def load_data(self, data_type):
        filepath = os.path.join(Config.DATA_DIR, Config.EXCEL_FILES[data_type])
        if not os.path.exists(filepath):
            self._create_empty_excel(filepath, data_type)
        df = pd.read_excel(filepath)
        # --- Giderler i√ßin eksik s√ºtunlarƒ± tamamla ---
        if data_type == 'giderler':
            for col in ['Ara√ß Plakasƒ±', 'Gider T√ºr√º', 'Ba≈ülangƒ±√ß', 'Biti≈ü', '≈ûirket', 'Tutar']:
                if col not in df.columns:
                    df[col] = ''
        return df
    
    def save_data(self, data_type, data):
        """Veriyi Excel dosyasƒ±na kaydet"""
        try:
            filepath = os.path.join(Config.DATA_DIR, Config.EXCEL_FILES[data_type])
            data.to_excel(filepath, index=False)
            self._create_backup(data_type)
            logger.info(f"Veri kaydedildi: {data_type} - {len(data)} kayƒ±t")
            return True
        except Exception as e:
            logger.error(f"Veri kaydetme hatasƒ± ({data_type}): {str(e)}", e)
            return False
    
    def _create_backup(self, data_type):
        """Yedek olu≈ütur"""
        try:
            source = os.path.join(Config.DATA_DIR, Config.EXCEL_FILES[data_type])
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_name = f"{data_type}_{timestamp}.xlsx"
            backup_path = os.path.join(Config.BACKUP_DIR, backup_name)
            shutil.copy2(source, backup_path)
        except Exception as e:
            self._log_error(f"Yedek olu≈üturma hatasƒ±: {str(e)}")
    
    def _log_error(self, message):
        """Hata logla"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_message = f"[{timestamp}] {message}\n"
        log_file = os.path.join(Config.LOG_DIR, "hata_log.txt")
        with open(log_file, "a", encoding="utf-8") as f:
            f.write(log_message)
    


# =============================================================================
# ANA PENCERE
# =============================================================================

class MainWindow(QMainWindow):
    """Ana uygulama penceresi"""
    
    def __init__(self):
        super().__init__()
        
        # Log sistemi ba≈ülat
        logger.log_system_event("Ana pencere ba≈ülatƒ±lƒ±yor", f"v{Config.VERSION}")
        
        self.data_manager = DataManager()
        self.current_panel = None
        self.automation_system = AutomationSystem(self.data_manager)
        self.last_used_panel = 'dashboard'  # Son kullanƒ±lan panel
        
        self.init_ui()
        self.setup_menu()
        self.setup_status_bar()
        self.setup_keyboard_shortcuts()  # Klavye kƒ±sayollarƒ±nƒ± ayarla
        self.load_dashboard()
        
        # Otomatik hatƒ±rlatma timer'ƒ±
        self.reminder_timer = QTimer()
        self.reminder_timer.timeout.connect(self.check_automated_reminders)
        self.reminder_timer.start(3600000)  # Her saat kontrol et (1 saat = 3600000 ms)
        
        # Otomatik g√ºncelleme kontrol√º timer'ƒ±
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.check_for_updates_silent)
        self.update_timer.start(24 * 3600000)  # Her 24 saat kontrol et
        
        # ƒ∞lk kontrolleri hemen yap
        self.check_automated_reminders()
        
        # Program ba≈ülarken GitHub versiyon kontrol√º yap (daha hƒ±zlƒ±)
        QTimer.singleShot(1000, self.check_startup_update)
        
        logger.log_system_event("Ana pencere ba≈ülatƒ±ldƒ±", "Ba≈üarƒ±lƒ±")
    
    def init_ui(self):
        """UI ba≈ülat"""
        self.setWindowTitle(f"{Config.APP_NAME} v{Config.VERSION}")
        self.setGeometry(100, 100, 1400, 900)
        self.setMinimumSize(1200, 800)
        
        # Ana widget
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Ana layout
        main_layout = QHBoxLayout(central_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)
        
        # Sol men√º
        self.create_sidebar()
        
        # Saƒü panel
        self.create_main_panel()
        
        # Layout'a ekle
        main_layout.addWidget(self.sidebar, 1)
        main_layout.addWidget(self.main_panel, 4)
        
        # Stil uygula
        self.apply_styles()
    
    def create_sidebar(self):
        """Klasik Windows sidebar olu≈ütur"""
        self.sidebar = QFrame()
        self.sidebar.setMaximumWidth(220)
        self.sidebar.setMinimumWidth(180)
        self.sidebar.setFrameStyle(QFrame.Box)
        self.sidebar.setStyleSheet("""
            QFrame {
                background-color: #f0f0f0;
                border-right: 1px solid #c0c0c0;
            }
        """)
        
        # Ana layout
        main_layout = QVBoxLayout(self.sidebar)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)
        
        # √úst kƒ±sƒ±m - Logo ve daraltma butonu
        top_frame = QFrame()
        top_frame.setStyleSheet("background-color: #0078d7; border: none;")
        top_layout = QHBoxLayout(top_frame)
        top_layout.setContentsMargins(10, 10, 10, 10)
        
        # Logo/ba≈ülƒ±k
        title_label = QLabel("Ara√ß Filo Y√∂netim")
        title_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                font-weight: bold;
                color: white;
            }
        """)
        
        # Sidebar collapse butonu kaldƒ±rƒ±ldƒ± - sidebar hep a√ßƒ±k kalacak
        
        top_layout.addWidget(title_label)
        top_layout.addStretch()
        
        main_layout.addWidget(top_frame)
        
        # Scroll area i√ßin widget
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout(scroll_widget)
        scroll_layout.setContentsMargins(5, 5, 5, 5)
        scroll_layout.setSpacing(1)
        
        # Men√º butonlarƒ± - Tablo benzeri d√ºzen
        self.menu_buttons = {}
        self.menu_containers = {}
        
        for item in Config.MENU_ITEMS:
            item_id = item['id']
            
            # Men√º butonu
            btn_container = self.create_menu_button(item)
            self.menu_buttons[item_id] = btn_container
            self.menu_containers[item_id] = btn_container
            scroll_layout.addWidget(btn_container)
        
        # Alt bo≈üluk
        scroll_layout.addStretch()
        
        # Alt kƒ±sƒ±m - Sadece versiyon bilgisi
        bottom_frame = QFrame()
        bottom_frame.setStyleSheet("background-color: #ecf0f1; border-top: 1px solid #bdc3c7;")
        bottom_layout = QVBoxLayout(bottom_frame)
        bottom_layout.setContentsMargins(10, 10, 10, 10)
        
        # Versiyon bilgisi
        version_label = QLabel(f"v{Config.VERSION}")
        version_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        version_label.setStyleSheet("color: #7f8c8d; font-size: 11px; font-weight: bold;")
        bottom_layout.addWidget(version_label)
        
        main_layout.addWidget(bottom_frame)
        
        # Scroll area
        self.scroll_area = QScrollArea()
        self.scroll_area.setWidget(scroll_widget)
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.scroll_area.setStyleSheet("QScrollArea { border: none; }")
        
        main_layout.insertWidget(1, self.scroll_area)
        
        # Sidebar durumu - hep a√ßƒ±k kalacak
    
    def create_menu_button(self, item):
        """Klasik Windows men√º butonu olu≈ütur"""
        # Ana buton container
        btn_container = QFrame()
        btn_container.setStyleSheet("""
            QFrame {
                background-color: transparent;
                border: none;
                margin: 1px 0px;
            }
        """)
        
        btn_layout = QHBoxLayout(btn_container)
        btn_layout.setContentsMargins(2, 2, 2, 2)
        btn_layout.setSpacing(3)
        
        # Ana buton - Emoji ikonlarƒ± kullan
        btn = QPushButton(f"{item.get('emoji_icon', 'üè†')} {item['title']}")
        
        btn.setMinimumHeight(32)
        btn.setObjectName(f"menu_btn_{item['id']}")
        
        btn.setStyleSheet("""
            QPushButton {
                text-align: left;
                padding: 4px 8px;
                border: none;
                background-color: transparent;
                color: #000000;
                font-size: 11px;
                font-weight: normal;
            }
            QPushButton:hover {
                background-color: #e1e1e1;
                color: #000000;
            }
            QPushButton:pressed {
                background-color: #d4d4d4;
                color: #000000;
            }
            QPushButton:checked {
                background-color: #3498db;
                color: white;
                font-weight: bold;
            }
        """)
        
        # Kƒ±sayol tu≈üu g√∂ster
        if 'shortcut' in item:
            shortcut_label = QLabel(item['shortcut'])
            shortcut_label.setStyleSheet("""
                QLabel {
                    color: #666666;
                    font-size: 8px;
                    font-weight: normal;
                }
            """)
            btn_layout.addWidget(btn)
            btn_layout.addWidget(shortcut_label)
            btn_layout.addStretch()
        else:
            btn_layout.addWidget(btn)
            btn_layout.addStretch()
        
        btn.clicked.connect(lambda: self.show_panel(item['id']))
        
        # Tooltip ekle
        tooltip_text = item['title']
        if 'shortcut' in item:
            tooltip_text += f" ({item['shortcut']})"
        btn.setToolTip(tooltip_text)
        
        return btn_container
    
    def create_main_panel(self):
        """Ana panel olu≈ütur"""
        self.main_panel = QStackedWidget()
        self.main_panel.setStyleSheet("""
            QStackedWidget {
                background-color: #f0f0f0;
                border-left: 1px solid #c0c0c0;
            }
        """)
    
    def setup_menu(self):
        """Men√º barƒ± olu≈ütur"""
        menubar = self.menuBar()
        if menubar is None:
            return
        
        # Dosya men√ºs√º
        file_menu = menubar.addMenu('Dosya')
        
        # Veri yedekleme
        backup_action = QAction('Veri Yedekle', self)
        backup_action.triggered.connect(self.backup_data)
        file_menu.addAction(backup_action)
        
        # Excel export
        export_action = QAction('Excel\'e Aktar', self)
        export_action.triggered.connect(self.export_to_excel)
        file_menu.addAction(export_action)
        
        file_menu.addSeparator()
        
        # √áƒ±kƒ±≈ü
        exit_action = QAction('√áƒ±kƒ±≈ü', self)
        exit_action.triggered.connect(lambda: self.close())
        file_menu.addAction(exit_action)
        
        # Yardƒ±m men√ºs√º
        help_menu = menubar.addMenu('Yardƒ±m')
        
        # G√ºncelleme kontrol√º
        update_action = QAction('G√ºncelleme Kontrol√º', self)
        update_action.triggered.connect(self.check_for_updates)
        help_menu.addAction(update_action)
        
        help_menu.addSeparator()
        
        # Geri bildirim
        feedback_action = QAction('Geri Bildirim G√∂nder', self)
        feedback_action.triggered.connect(self.show_feedback)
        help_menu.addAction(feedback_action)
        
        help_menu.addSeparator()
        
        about_action = QAction('Hakkƒ±nda', self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
    
    def setup_status_bar(self):
        """Durum √ßubuƒüu olu≈ütur"""
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        
        # Durum
        self.status_bar.addPermanentWidget(QLabel("Hazƒ±r"))
    
    def apply_styles(self):
        """Klasik Windows temasƒ± uygula"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f0f0f0;
            }
            QMenuBar {
                background-color: #f0f0f0;
                border-bottom: 1px solid #c0c0c0;
                color: #000000;
            }
            QMenuBar::item {
                background-color: transparent;
                padding: 4px 8px;
            }
            QMenuBar::item:selected {
                background-color: #0078d7;
                color: white;
            }
            QMenu {
                background-color: #f0f0f0;
                border: 1px solid #c0c0c0;
                padding: 2px;
            }
            QMenu::item {
                padding: 4px 20px;
            }
            QMenu::item:selected {
                background-color: #0078d7;
                color: white;
            }
            QStatusBar {
                background-color: #f0f0f0;
                border-top: 1px solid #c0c0c0;
                color: #000000;
            }
            QToolBar {
                background-color: #f0f0f0;
                border-bottom: 1px solid #c0c0c0;
                spacing: 2px;
                padding: 2px;
            }
            QToolButton {
                background-color: #f0f0f0;
                border: 1px solid transparent;
                padding: 4px;
                margin: 1px;
            }
            QToolButton:hover {
                background-color: #e1e1e1;
                border: 1px solid #c0c0c0;
            }
            QToolButton:pressed {
                background-color: #d4d4d4;
                border: 1px solid #a0a0a0;
            }
        """)
    
    def show_panel(self, panel_id):
        """Panel g√∂ster - Geli≈ümi≈ü versiyon"""
        # Men√º butonlarƒ±nƒ± g√ºncelle
        for btn_id, btn_container in self.menu_buttons.items():
            btn = btn_container.findChild(QPushButton)
            if btn:
                if btn_id == panel_id:
                    # Se√ßili buton stilini g√ºncelle
                    btn.setChecked(True)
                    group_color = "#3498db"
                    if 'group' in next((item for item in Config.MENU_ITEMS if item['id'] == btn_id), {}):
                        group = next((item for item in Config.MENU_ITEMS if item['id'] == btn_id), {})['group']
                        if group in Config.MENU_GROUPS:
                            group_color = Config.MENU_GROUPS[group]['color']
                    
                    btn.setStyleSheet(f"""
                        QPushButton {{
                        text-align: left;
                        padding: 10px 15px;
                        border: none;
                            border-radius: 8px;
                            background-color: {group_color};
                        color: white;
                        font-size: 13px;
                            font-weight: 500;
                            border-left: 4px solid {group_color};
                        }}
                """)
                else:
                    # Normal buton stilini g√ºncelle
                    btn.setChecked(False)
                    group_color = "#3498db"
                    if 'group' in next((item for item in Config.MENU_ITEMS if item['id'] == btn_id), {}):
                        group = next((item for item in Config.MENU_ITEMS if item['id'] == btn_id), {})['group']
                        if group in Config.MENU_GROUPS:
                            group_color = Config.MENU_GROUPS[group]['color']
                    
                    btn.setStyleSheet(f"""
                        QPushButton {{
                        text-align: left;
                        padding: 10px 15px;
                        border: none;
                            border-radius: 8px;
                            background-color: #f8f9fa;
                        color: #2c3e50;
                        font-size: 13px;
                            font-weight: 500;
                            border-left: 4px solid transparent;
                        }}
                        QPushButton:hover {{
                            background-color: {group_color};
                        color: white;
                            border-left: 4px solid {group_color};
                        }}
                """)
        
        # Son kullanƒ±lan paneli kaydet
        self.last_used_panel = panel_id
        
        # Panel i√ßeriƒüini y√ºkle
        if panel_id == 'dashboard':
            self.load_dashboard()
        elif panel_id == 'araclar':
            self.load_vehicles_panel()
        elif panel_id == 'suruculer':
            self.load_drivers_panel()
        elif panel_id == 'bakimlar':
            self.load_maintenance_panel()
        elif panel_id == 'yakitlar':
            self.load_fuel_panel()
        elif panel_id == 'trafik':
            self.load_traffic_panel()
        elif panel_id == 'raporlar':
            self.load_reports_panel()
        elif panel_id == 'belgeler':
            self.load_documents_panel()
        elif panel_id == 'ayarlar':
            self.load_settings_panel()
    
    # Sidebar toggle fonksiyonu kaldƒ±rƒ±ldƒ± - sidebar hep a√ßƒ±k kalacak
    
    def setup_keyboard_shortcuts(self):
        """Klavye kƒ±sayollarƒ±nƒ± ayarla"""
        for item in Config.MENU_ITEMS:
            if 'shortcut' in item:
                shortcut = QShortcut(QKeySequence(item['shortcut']), self)
                shortcut.activated.connect(lambda pid=item['id']: self.show_panel(pid))
        
        # Genel kƒ±sayollar
        refresh_shortcut = QShortcut(QKeySequence("F5"), self)
        refresh_shortcut.activated.connect(self.refresh_current_panel)
        

        
        # Sidebar kƒ±sayolu kaldƒ±rƒ±ldƒ± - sidebar hep a√ßƒ±k kalacak
    
    def refresh_current_panel(self):
        """Mevcut paneli yenile"""
        if hasattr(self, 'current_panel') and self.current_panel:
            if hasattr(self.current_panel, 'load_data'):
                self.current_panel.load_data()
            if hasattr(self.current_panel, 'refresh_dashboard'):
                self.current_panel.refresh_dashboard()
    

    
    def show_usage_statistics(self):
        """Kullanƒ±m istatistiklerini g√∂ster"""
        # Bu fonksiyon gelecekte kullanƒ±m istatistiklerini g√∂sterecek
        QMessageBox.information(self, "Kullanƒ±m ƒ∞statistikleri", 
            "Bu √∂zellik gelecekte eklenecek.\n"
            "Hangi panellerin daha √ßok kullanƒ±ldƒ±ƒüƒ±nƒ± g√∂rebileceksiniz.")
    
    def load_dashboard(self):
        """Ana sayfa y√ºkle"""
        # Mevcut paneli temizle
        if self.current_panel:
            self.main_panel.removeWidget(self.current_panel)
        
        # Yeni dashboard paneli olu≈ütur
        self.current_panel = DashboardPanel(self.data_manager)
        self.main_panel.addWidget(self.current_panel)
        self.main_panel.setCurrentWidget(self.current_panel)
    
    def refresh_dashboard(self):
        """Dashboard'ƒ± yenile"""
        if isinstance(self.current_panel, DashboardPanel):
            self.current_panel.load_data()
            if hasattr(self.current_panel, 'update_maintenance_card'):
                self.current_panel.update_maintenance_card()
            if hasattr(self.current_panel, 'update_fuel_details_label'):
                self.current_panel.update_fuel_details_label()
        

    
    def load_vehicles_panel(self):
        """Ara√ßlar paneli y√ºkle"""
        if self.current_panel:
            self.main_panel.removeWidget(self.current_panel)
        
        self.current_panel = VehiclesPanel(self.data_manager)
        self.main_panel.addWidget(self.current_panel)
        self.main_panel.setCurrentWidget(self.current_panel)
    
    def load_drivers_panel(self):
        """S√ºr√ºc√ºler paneli y√ºkle"""
        if self.current_panel:
            self.main_panel.removeWidget(self.current_panel)
        
        self.current_panel = DriversPanel(self.data_manager)
        self.main_panel.addWidget(self.current_panel)
        self.main_panel.setCurrentWidget(self.current_panel)
    
    def load_maintenance_panel(self):
        """Bakƒ±m paneli y√ºkle"""
        if self.current_panel:
            self.main_panel.removeWidget(self.current_panel)
        
        self.current_panel = MaintenancePanel(self.data_manager)
        self.main_panel.addWidget(self.current_panel)
        self.main_panel.setCurrentWidget(self.current_panel)
    
    def load_fuel_panel(self):
        if self.current_panel:
            self.main_panel.removeWidget(self.current_panel)
        self.current_panel = Yakƒ±tlarPanel(self.data_manager)
        self.main_panel.addWidget(self.current_panel)
        self.main_panel.setCurrentWidget(self.current_panel)
    
    def load_traffic_panel(self):
        """Trafik paneli y√ºkle"""
        if self.current_panel:
            self.main_panel.removeWidget(self.current_panel)
        
        self.current_panel = TrafficPanel(self.data_manager)
        self.main_panel.addWidget(self.current_panel)
        self.main_panel.setCurrentWidget(self.current_panel)
    
    def load_reports_panel(self):
        """Raporlar paneli y√ºkle"""
        if self.current_panel:
            self.main_panel.removeWidget(self.current_panel)
        
        self.current_panel = ReportsPanel(self.data_manager)
        self.main_panel.addWidget(self.current_panel)
        self.main_panel.setCurrentWidget(self.current_panel)
    
    def load_calendar_panel(self):
        """Takvim paneli y√ºkle"""
        if self.current_panel:
            self.main_panel.removeWidget(self.current_panel)
        
        self.current_panel = CalendarPanel(self.data_manager)
        self.main_panel.addWidget(self.current_panel)
        self.main_panel.setCurrentWidget(self.current_panel)
    
    def load_documents_panel(self):
        """Belgeler paneli y√ºkle"""
        if self.current_panel:
            self.main_panel.removeWidget(self.current_panel)
        
        self.current_panel = DocumentsPanel(self.data_manager)
        self.main_panel.addWidget(self.current_panel)
        self.main_panel.setCurrentWidget(self.current_panel)
    
    def load_settings_panel(self):
        """Ayarlar paneli y√ºkle"""
        if self.current_panel:
            self.main_panel.removeWidget(self.current_panel)
        
        self.current_panel = SettingsPanel(self.data_manager)
        self.main_panel.addWidget(self.current_panel)
        self.main_panel.setCurrentWidget(self.current_panel)
    
    def backup_data(self):
        """Veri yedekle"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_dir = os.path.join(Config.BACKUP_DIR, f"yedek_{timestamp}")
            os.makedirs(backup_dir, exist_ok=True)
            
            for data_type, filename in Config.EXCEL_FILES.items():
                source = os.path.join(Config.DATA_DIR, filename)
                if os.path.exists(source):
                    shutil.copy2(source, backup_dir)
            
            QMessageBox.information(self, "Ba≈üarƒ±lƒ±", f"Veriler yedeklendi:\n{backup_dir}")
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Yedekleme hatasƒ±: {str(e)}")
    
    def export_to_excel(self):
        """Excel'e aktar"""
        try:
            folder = QFileDialog.getExistingDirectory(self, "Excel dosyalarƒ±nƒ± kaydet")
            if folder:
                for data_type, filename in Config.EXCEL_FILES.items():
                    source = os.path.join(Config.DATA_DIR, filename)
                    if os.path.exists(source):
                        dest = os.path.join(folder, filename)
                        shutil.copy2(source, dest)
                
                QMessageBox.information(self, "Ba≈üarƒ±lƒ±", f"Excel dosyalarƒ± kaydedildi:\n{folder}")
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Export hatasƒ±: {str(e)}")
    
    def check_for_updates(self):
        """Geli≈ümi≈ü g√ºncelleme kontrol√º"""
        # Progress dialog g√∂ster
        self.progress_dialog = QProgressDialog("G√ºncelleme kontrol ediliyor...", None, 0, 0, self)
        self.progress_dialog.setWindowTitle("üîÑ G√ºncelleme Kontrol√º")
        self.progress_dialog.setWindowModality(Qt.WindowModal)
        self.progress_dialog.setCancelButton(None)
        self.progress_dialog.setMinimumDuration(0)
        self.progress_dialog.show()
        
        # G√ºncelleme kontrolc√ºs√ºn√º ba≈ülat
        self.update_checker = UpdateChecker()
        self.update_checker.update_available.connect(self.show_update_dialog)
        self.update_checker.no_update.connect(self.show_no_update)
        self.update_checker.error_occurred.connect(self.show_update_error)
        self.update_checker.check_progress.connect(self.update_progress)
        self.update_checker.finished.connect(self.update_check_finished)
        self.update_checker.start()
    
    def update_progress(self, message):
        """ƒ∞lerleme durumunu g√ºncelle"""
        if hasattr(self, 'progress_dialog'):
            self.progress_dialog.setLabelText(message)
    
    def update_check_finished(self):
        """G√ºncelleme kontrol√º tamamlandƒ±"""
        if hasattr(self, 'progress_dialog'):
            self.progress_dialog.close()
        
        # Kontrol tamamlandƒ± olarak i≈üaretle
        if hasattr(self, 'update_checker'):
            self.update_checker.mark_check_completed()
    
    def show_update_dialog(self, update_info):
        """Geli≈ümi≈ü g√ºncelleme dialog g√∂ster"""
        dialog = UpdateDialog(self, update_info)
        result = dialog.exec_()
        
        # Kullanƒ±cƒ± g√ºncellemeyi indirmeyi se√ßtiyse log kaydƒ±
        if result == QDialog.Accepted:
            logger.log_system_event("G√ºncelleme indirme ba≈ülatƒ±ldƒ±", 
                f"v{update_info.get('version', '')} -> v{Config.VERSION}")
    
    def show_no_update(self):
        """G√ºncelleme yok mesajƒ±"""
        QMessageBox.information(self, "‚úÖ G√ºncelleme Kontrol√º", 
            f"üéâ Tebrikler! G√ºncel s√ºr√ºm√º kullanmaktasƒ±nƒ±z.\n\n"
            f"üìã S√ºr√ºm Bilgileri:\n"
            f"‚Ä¢ Mevcut S√ºr√ºm: v{Config.VERSION}\n"
            f"‚Ä¢ Son Kontrol: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üí° ƒ∞pucu: G√ºncellemeler otomatik olarak kontrol edilir.")
    
    def show_update_error(self, error_message):
        """Geli≈ümi≈ü g√ºncelleme hatasƒ± mesajƒ±"""
        QMessageBox.warning(self, "‚ö†Ô∏è G√ºncelleme Hatasƒ±", 
            f"G√ºncelleme kontrol√º sƒ±rasƒ±nda bir hata olu≈ütu:\n\n"
            f"‚ùå Hata: {error_message}\n\n"
            f"üîß √á√∂z√ºm √ñnerileri:\n"
            f"‚Ä¢ ƒ∞nternet baƒülantƒ±nƒ±zƒ± kontrol edin\n"
            f"‚Ä¢ G√ºvenlik duvarƒ± ayarlarƒ±nƒ±zƒ± kontrol edin\n"
            f"‚Ä¢ Daha sonra tekrar deneyin\n\n"
            f"üìû Destek: {Config.EMAIL}")
        
        # Hata logunu kaydet
        logger.error(f"G√ºncelleme kontrol√º hatasƒ±: {error_message}")
    
    def check_for_updates_silent(self):
        """Sessiz g√ºncelleme kontrol√º (otomatik)"""
        if not hasattr(self, 'update_checker') or not self.update_checker.isRunning():
            self.update_checker = UpdateChecker()
            self.update_checker.update_available.connect(self.show_update_dialog)
            self.update_checker.no_update.connect(lambda: None)  # Sessiz
            self.update_checker.error_occurred.connect(lambda msg: logger.error(f"Otomatik g√ºncelleme hatasƒ±: {msg}"))
            self.update_checker.start()
    
    def check_startup_update(self):
        """Program ba≈ülarken GitHub versiyon kontrol√º"""
        try:
            logger.log_system_event("Ba≈ülangƒ±√ß versiyon kontrol√º", "Ba≈ülatƒ±lƒ±yor")
            
            # Kullanƒ±cƒ±ya bilgilendirme mesajƒ± g√∂ster
            self.show_update_check_notification()
            
            # GitHub API'den version.txt dosyasƒ±nƒ± al
            response = requests.get(Config.UPDATE_CHECK_URL, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                
                # Base64 encoded content'i decode et
                import base64
                content = data.get('content', '')
                if content:
                    # Base64 decode
                    decoded_content = base64.b64decode(content).decode('utf-8')
                    # Satƒ±rlarƒ± ayƒ±r ve versiyon numarasƒ±nƒ± bul
                    lines = decoded_content.strip().split('\n')
                    latest_version = None
                    
                    for line in lines:
                        if line.startswith('Version:'):
                            latest_version = line.replace('Version:', '').strip()
                            break
                    
                    if latest_version:
                        # Debug: API yanƒ±tƒ±nƒ± logla
                        logger.log_system_event("GitHub API Yanƒ±tƒ±", f"Version.txt i√ßeriƒüi: {decoded_content.strip()}")
                        
                        # Versiyon kar≈üƒ±la≈ütƒ±rmasƒ±
                        if self.compare_versions(latest_version, Config.VERSION):
                            # Yeni s√ºr√ºm mevcut - kullanƒ±cƒ±ya sor
                            download_url = f"{Config.GITHUB_REPO_URL}/releases/latest"
                            self.show_startup_update_dialog(latest_version, download_url)
                        else:
                            logger.log_system_event("Ba≈ülangƒ±√ß versiyon kontrol√º", f"G√ºncel s√ºr√ºm kullanƒ±lƒ±yor (v{Config.VERSION}) - GitHub: {latest_version}")
                            # G√ºncel s√ºr√ºm bilgisi g√∂ster
                            self.show_current_version_notification()
                    else:
                        logger.error("Version.txt dosyasƒ±nda versiyon numarasƒ± bulunamadƒ±")
                        self.show_update_error_notification("Version.txt dosyasƒ± okunamadƒ±")
                else:
                    logger.error("Version.txt dosyasƒ± bo≈ü")
                    self.show_update_error_notification("Version.txt dosyasƒ± bo≈ü")
            else:
                logger.error(f"GitHub API hatasƒ±: HTTP {response.status_code}")
                self.show_update_error_notification("GitHub sunucusuna ula≈üƒ±lamadƒ±")
                
        except requests.exceptions.Timeout:
            logger.error("Ba≈ülangƒ±√ß versiyon kontrol√º zaman a≈üƒ±mƒ±")
            self.show_update_error_notification("Baƒülantƒ± zaman a≈üƒ±mƒ±na uƒüradƒ±")
        except requests.exceptions.ConnectionError:
            logger.error("Ba≈ülangƒ±√ß versiyon kontrol√º baƒülantƒ± hatasƒ±")
            self.show_update_error_notification("ƒ∞nternet baƒülantƒ±sƒ± yok")
        except Exception as e:
            logger.error(f"Ba≈ülangƒ±√ß versiyon kontrol√º hatasƒ±: {str(e)}")
            self.show_update_error_notification(f"Kontrol hatasƒ±: {str(e)}")
    
    def show_update_check_notification(self):
        """G√ºncelleme kontrol√º ba≈üladƒ±ƒüƒ±nda bilgilendirme"""
        try:
            msg_box = QMessageBox(self)
            msg_box.setWindowTitle("üîÑ G√ºncelleme Kontrol√º")
            msg_box.setIcon(QMessageBox.Information)
            msg_box.setText("üîÑ GitHub'dan g√ºncelleme kontrol ediliyor...\n\n"
                          "üì° Sunucuya baƒülanƒ±lƒ±yor...\n"
                          "üîç S√ºr√ºm bilgileri alƒ±nƒ±yor...\n"
                          "‚ö° L√ºtfen bekleyin...")
            msg_box.setStandardButtons(QMessageBox.Ok)
            msg_box.setModal(False)  # Modal olmayan dialog
            msg_box.show()
            
            # 2 saniye sonra otomatik kapat
            QTimer.singleShot(2000, msg_box.close)
            
        except Exception as e:
            logger.error(f"G√ºncelleme kontrol√º bilgilendirme hatasƒ±: {str(e)}")
    
    def show_current_version_notification(self):
        """G√ºncel s√ºr√ºm bilgisi g√∂ster"""
        try:
            msg_box = QMessageBox(self)
            msg_box.setWindowTitle("‚úÖ G√ºncel S√ºr√ºm")
            msg_box.setIcon(QMessageBox.Information)
            msg_box.setText(f"üéâ Tebrikler! G√ºncel s√ºr√ºm√º kullanƒ±yorsunuz.\n\n"
                          f"üìã S√ºr√ºm: v{Config.VERSION}\n"
                          f"üìÖ Kontrol: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                          f"üîó Repository: {Config.GITHUB_REPO_URL}\n\n"
                          f"üí° ƒ∞pucu: G√ºncellemeler otomatik olarak kontrol edilir.")
            msg_box.setStandardButtons(QMessageBox.Ok)
            msg_box.setModal(False)
            msg_box.show()
            
            # 4 saniye sonra otomatik kapat
            QTimer.singleShot(4000, msg_box.close)
            
        except Exception as e:
            logger.error(f"G√ºncel s√ºr√ºm bilgilendirme hatasƒ±: {str(e)}")
    
    def show_update_error_notification(self, error_message):
        """G√ºncelleme hatasƒ± bilgilendirmesi"""
        try:
            msg_box = QMessageBox(self)
            msg_box.setWindowTitle("‚ö†Ô∏è G√ºncelleme Hatasƒ±")
            msg_box.setIcon(QMessageBox.Warning)
            msg_box.setText(f"G√ºncelleme kontrol√º sƒ±rasƒ±nda hata olu≈ütu:\n\n"
                          f"‚ùå {error_message}\n\n"
                          f"Program normal ≈üekilde √ßalƒ±≈ümaya devam edecek.")
            msg_box.setStandardButtons(QMessageBox.Ok)
            msg_box.setModal(False)
            msg_box.show()
            
            # 4 saniye sonra otomatik kapat
            QTimer.singleShot(4000, msg_box.close)
            
        except Exception as e:
            logger.error(f"G√ºncelleme hatasƒ± bilgilendirme hatasƒ±: {str(e)}")
    
    def compare_versions(self, latest, current):
        """Versiyon kar≈üƒ±la≈ütƒ±rmasƒ±"""
        try:
            latest_parts = [int(x) for x in latest.split('.')]
            current_parts = [int(x) for x in current.split('.')]
            
            for i in range(max(len(latest_parts), len(current_parts))):
                latest_part = latest_parts[i] if i < len(latest_parts) else 0
                current_part = current_parts[i] if i < len(current_parts) else 0
                
                if latest_part > current_part:
                    return True
                elif latest_part < current_part:
                    return False
            
            return False
        except:
            return False
    
    def show_startup_update_dialog(self, latest_version, download_url):
        """Program ba≈ülarken g√ºncelleme dialog'u"""
        try:
            # Basit bir dialog olu≈ütur
            msg_box = QMessageBox(self)
            msg_box.setWindowTitle("üîÑ Yeni G√ºncelleme Bulundu")
            msg_box.setIcon(QMessageBox.Information)
            
            msg_box.setText(f"GitHub deposunda yeni bir s√ºr√ºm bulundu!\n\n"
                          f"Mevcut S√ºr√ºm: v{Config.VERSION}\n"
                          f"Yeni S√ºr√ºm: v{latest_version}\n\n"
                          f"G√ºncellemeyi indirmek istiyor musunuz?")
            
            msg_box.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
            msg_box.setDefaultButton(QMessageBox.Yes)
            
            # Buton metinlerini √∂zelle≈ütir
            yes_button = msg_box.button(QMessageBox.Yes)
            yes_button.setText("Evet, ƒ∞ndir")
            yes_button.setStyleSheet("""
                QPushButton {
                    background-color: #28a745;
                    color: white;
                    border: none;
                    padding: 8px 16px;
                    border-radius: 4px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #218838;
                }
            """)
            
            no_button = msg_box.button(QMessageBox.No)
            no_button.setText("Hayƒ±r, Devam Et")
            no_button.setStyleSheet("""
                QPushButton {
                    background-color: #6c757d;
                    color: white;
                    border: none;
                    padding: 8px 16px;
                    border-radius: 4px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #5a6268;
                }
            """)
            
            # Dialog'u g√∂ster
            result = msg_box.exec_()
            
            if result == QMessageBox.Yes:
                # GitHub linkine y√∂nlendir
                import webbrowser
                webbrowser.open(download_url)
                
                # Bilgilendirme mesajƒ±
                QMessageBox.information(self, "‚úÖ ƒ∞ndirme Ba≈ülatƒ±ldƒ±", 
                    "GitHub sayfasƒ± tarayƒ±cƒ±da a√ßƒ±ldƒ±.\n\n"
                    "üìã Kurulum Adƒ±mlarƒ±:\n"
                    "1. Dosyayƒ± indirin\n"
                    "2. Mevcut uygulamayƒ± kapatƒ±n\n"
                    "3. ƒ∞ndirilen dosyayƒ± √ßalƒ±≈ütƒ±rƒ±n\n"
                    "4. Kurulumu tamamlayƒ±n\n\n"
                    "‚ö†Ô∏è √ñnemli: Kurulum √∂ncesi verilerinizi yedekleyin!")
                
                logger.log_system_event("Ba≈ülangƒ±√ß g√ºncelleme indirme", f"v{latest_version}")
            else:
                logger.log_system_event("Ba≈ülangƒ±√ß g√ºncelleme reddedildi", f"v{latest_version}")
                
        except Exception as e:
            logger.error(f"Ba≈ülangƒ±√ß g√ºncelleme dialog hatasƒ±: {str(e)}")
    

    
    def show_feedback(self):
        """Geri bildirim dialog g√∂ster"""
        dialog = FeedbackDialog(self)
        dialog.exec_()
    
    def check_automated_reminders(self):
        """Otomatik hatƒ±rlatmalarƒ± kontrol et"""
        try:
            expiring_items = self.automation_system.check_expiring_documents()
            current_date = datetime.now().date()
            
            for item in expiring_items:
                # 30 g√ºn kala hatƒ±rlatma olu≈ütur
                if item['days_left'] == 30:
                    self.automation_system.create_reminder(
                        item['plaka'], 
                        item['type'], 
                        item['date']
                    )
                
                # 7 g√ºn kala tekrar hatƒ±rlatma
                elif item['days_left'] == 7:
                    self.automation_system.create_reminder(
                        item['plaka'], 
                        f"{item['type']} - ACƒ∞L", 
                        item['date']
                    )
                
                # Bug√ºn dolacak olanlar i√ßin acil hatƒ±rlatma
                elif item['days_left'] == 0:
                    self.automation_system.create_reminder(
                        item['plaka'], 
                        f"{item['type']} - BUG√úN DOLUYOR!", 
                        item['date']
                    )
                    
        except Exception as e:
            print(f"Otomatik hatƒ±rlatma kontrol√º hatasƒ±: {e}")
    
    def show_about(self):
        """Hakkƒ±nda dialog"""
        QMessageBox.about(self, "Hakkƒ±nda", 
            f"{Config.APP_NAME} v{Config.VERSION}\n\n"
            f"Geli≈ütirici: {Config.DEVELOPER}\n"
            f"E-posta: {Config.EMAIL}\n\n"
            "Ara√ß filo y√∂netim sistemi")

# =============================================================================
# PANEL SINIFLARI
# =============================================================================

class DashboardPanel(QWidget):
    """Ana sayfa paneli"""
    
    def __init__(self, data_manager):
        super().__init__()
        self.data_manager = data_manager
        self.init_ui()
        self.load_data()
    
    def init_ui(self):
        """Modern ve √ßekici UI ba≈ülat"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(12)
        
        # Ho≈ü geldin b√∂l√ºm√º
        self.create_welcome_section(layout)
        
        # √ñzet kartlarƒ±
        self.create_summary_cards(layout)
        
        # Alt b√∂l√ºm - Yakla≈üan i≈ülemler tam geni≈ülik
        self.create_expiring_documents(layout)
    
    def create_welcome_section(self, parent_layout):
        """Ho≈ü geldin b√∂l√ºm√º"""
        welcome_frame = QFrame()
        welcome_frame.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, 
                    stop:0 #667eea, stop:1 #764ba2);
                border-radius: 10px;
                padding: 12px;
            }
        """)
        
        welcome_layout = QHBoxLayout(welcome_frame)
        
        # Sol taraf - Ba≈ülƒ±k ve a√ßƒ±klama
        left_layout = QVBoxLayout()
        
        # Ana ba≈ülƒ±k
        welcome_title = QLabel("üöó Ara√ß Filo Y√∂netim Sistemi")
        welcome_title.setStyleSheet("""
            font-size: 16px; 
            font-weight: bold; 
            color: white; 
            margin-bottom: 4px;
        """)
        
        # Alt ba≈ülƒ±k
        welcome_subtitle = QLabel("Filonuzu profesyonelce y√∂netin")
        welcome_subtitle.setStyleSheet("""
            font-size: 12px; 
            color: rgba(255,255,255,0.9);
            margin-bottom: 2px;
        """)
        
        left_layout.addWidget(welcome_title)
        left_layout.addWidget(welcome_subtitle)
        
        # Saƒü taraf - Tarih, saat ve versiyon
        right_layout = QVBoxLayout()
        right_layout.setAlignment(Qt.AlignmentFlag.AlignRight | Qt.AlignmentFlag.AlignTop)
        
        # Tarih
        current_date = QLabel(datetime.now().strftime("%d.%m.%Y"))
        current_date.setStyleSheet("""
            font-size: 12px; 
            font-weight: bold; 
            color: white;
            text-align: right;
            margin-bottom: 2px;
        """)
        
        # Saat
        current_time = QLabel(datetime.now().strftime("%H:%M"))
        current_time.setStyleSheet("""
            font-size: 10px; 
            color: rgba(255,255,255,0.8);
            text-align: right;
            margin-bottom: 2px;
        """)
        
        # Versiyon
        version_info = QLabel(f"v{Config.VERSION}")
        version_info.setStyleSheet("""
            font-size: 9px; 
            color: rgba(255,255,255,0.7);
            text-align: right;
        """)
        
        right_layout.addWidget(current_date)
        right_layout.addWidget(current_time)
        right_layout.addWidget(version_info)
        
        welcome_layout.addLayout(left_layout)
        welcome_layout.addStretch()  # Bo≈üluk ekle
        welcome_layout.addLayout(right_layout)
        
        parent_layout.addWidget(welcome_frame)
    
    def create_quick_actions(self, parent_layout):
        """Hƒ±zlƒ± i≈ülem butonlarƒ±"""
        actions_frame = QFrame()
        actions_frame.setStyleSheet("""
            QFrame {
                background-color: white;
                border: 1px solid #e0e0e0;
                border-radius: 8px;
                padding: 10px;
            }
        """)
        
        actions_layout = QVBoxLayout(actions_frame)
        
        # Ba≈ülƒ±k
        title = QLabel("‚ö° Hƒ±zlƒ± ƒ∞≈ülemler")
        title.setStyleSheet("""
            font-size: 14px; 
            font-weight: bold; 
            color: #333333; 
            margin-bottom: 8px;
        """)
        actions_layout.addWidget(title)
        
        # Butonlar
        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(8)
        
        quick_buttons = [
            ("üöó Ara√ß Ekle", self.quick_add_vehicle, "#3498db"),
            ("üë®‚Äç‚úàÔ∏è S√ºr√ºc√º Ekle", self.quick_add_driver, "#e74c3c"),
            ("üîß Bakƒ±m Ekle", self.quick_add_maintenance, "#f39c12"),
            ("‚õΩ Yakƒ±t Ekle", self.quick_add_fuel, "#27ae60"),
            ("üìä Rapor Olu≈ütur", self.quick_create_report, "#9b59b6")
        ]
        
        for text, callback, color in quick_buttons:
            btn = QPushButton(text)
            btn.setStyleSheet(f"""
                QPushButton {{
                    background-color: {color};
                    color: white;
                    border: none;
                    border-radius: 6px;
                    padding: 8px 12px;
                    font-size: 11px;
                    font-weight: bold;
                }}
                QPushButton:hover {{
                    background-color: {color}dd;
                }}
                QPushButton:pressed {{
                    background-color: {color}aa;
                }}
            """)
            btn.clicked.connect(callback)
            buttons_layout.addWidget(btn)
        
        actions_layout.addLayout(buttons_layout)
        parent_layout.addWidget(actions_frame)
    
    def quick_add_vehicle(self):
        """Hƒ±zlƒ± ara√ß ekleme"""
        # Ana pencereye sinyal g√∂nder
        if hasattr(self.parent(), 'show_panel'):
            self.parent().show_panel('araclar')
    
    def quick_add_driver(self):
        """Hƒ±zlƒ± s√ºr√ºc√º ekleme"""
        if hasattr(self.parent(), 'show_panel'):
            self.parent().show_panel('suruculer')
    
    def quick_add_maintenance(self):
        """Hƒ±zlƒ± bakƒ±m ekleme"""
        if hasattr(self.parent(), 'show_panel'):
            self.parent().show_panel('bakimlar')
    
    def quick_add_fuel(self):
        """Hƒ±zlƒ± yakƒ±t ekleme"""
        if hasattr(self.parent(), 'show_panel'):
            self.parent().show_panel('yakitlar')
    
    def quick_create_report(self):
        """Hƒ±zlƒ± rapor olu≈üturma"""
        if hasattr(self.parent(), 'show_panel'):
            self.parent().show_panel('raporlar')
    
    def quick_backup_data(self):
        """Hƒ±zlƒ± veri yedekleme"""
        if hasattr(self.parent(), 'backup_data'):
            self.parent().backup_data()
    
    def create_summary_cards(self, parent_layout):
        """Yan yana √∂zet kartlarƒ± - Her biri ayrƒ± ba≈ülƒ±klƒ±"""
        # Ana container
        summary_container = QFrame()
        summary_container.setStyleSheet("""
            QFrame {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 8px;
                padding: 15px;
            }
        """)
        
        container_layout = QVBoxLayout(summary_container)
        container_layout.setSpacing(15)
        container_layout.setContentsMargins(15, 15, 15, 15)
        
        # Ana ba≈ülƒ±k
        title_label = QLabel("üìä √ñZET Bƒ∞LGƒ∞LER")
        title_label.setStyleSheet("""
            font-size: 16px;
                font-weight: bold;
            color: #2c3e50;
            margin-bottom: 10px;
        """)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        container_layout.addWidget(title_label)
        
        # Kartlar i√ßin yatay layout
        cards_layout = QHBoxLayout()
        cards_layout.setSpacing(0)
        cards_layout.setContentsMargins(0, 0, 0, 0)
        
        # Kart konfig√ºrasyonlarƒ±
        card_configs = [
            ("üöó", "Ara√ßlar", "#3498db", "araclar"),
            ("üí∞", "Bakƒ±m & Onarƒ±m", "#e74c3c", "bakimlar"),
            ("‚õΩ", "Yakƒ±t Harcamalarƒ±", "#f39c12", "yakitlar"),
            ("üë®‚Äç‚úàÔ∏è", "S√ºr√ºc√ºler", "#27ae60", "suruculer")
        ]
        
        self.summary_cards = {}
        
        for i, (icon, title, color, data_type) in enumerate(card_configs):
            card = self.create_summary_card(icon, title, color, data_type)
            self.summary_cards[title] = card
            cards_layout.addWidget(card)
            
            # Son kart deƒüilse dikey √ßizgi ekle
            if i < len(card_configs) - 1:
                separator = QFrame()
                separator.setFrameShape(QFrame.Shape.VLine)
                separator.setStyleSheet("""
                    QFrame {
                        background-color: #dee2e6;
                        max-width: 1px;
                        min-width: 1px;
                    }
                """)
                cards_layout.addWidget(separator)
        
        container_layout.addLayout(cards_layout)
        parent_layout.addWidget(summary_container)
    
    def create_summary_card(self, icon, title, color, data_type):
        """Tek bir √∂zet kartƒ± olu≈ütur"""
        card = QFrame()
        card.setStyleSheet(f"""
            QFrame {{
                background-color: white;
                border: 1px solid #dee2e6;
                border-radius: 6px;
                padding: 12px;
                min-width: 200px;
                max-width: 250px;
            }}
        """)
        
        layout = QVBoxLayout(card)
        layout.setSpacing(8)
        layout.setContentsMargins(12, 12, 12, 12)
        
        # Ba≈ülƒ±k ve Yƒ±l se√ßimi yan yana - basit d√ºzen
        header_layout = QHBoxLayout()
        header_layout.setSpacing(8)
        header_layout.setContentsMargins(0, 0, 0, 5)
        
        # Ba≈ülƒ±k
        title_label = QLabel(f"{icon} {title}")
        title_label.setStyleSheet("""
            font-size: 13px;
            font-weight: bold;
            color: #2c3e50;
        """)
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        
        # Yƒ±l se√ßimi - sadece dropdown
        year_combo = QComboBox()
        year_combo.setStyleSheet("""
            QComboBox {
                background-color: white;
                border: 1px solid #ccc;
                border-radius: 2px;
                padding: 1px 2px;
                font-size: 8px;
                min-width: 35px;
                max-width: 45px;
                height: 16px;
            }
        """)
        current_year = datetime.now().year
        years = [str(y) for y in range(current_year, current_year-5, -1)]
        year_combo.addItems(years)
        year_combo.setCurrentText(str(current_year))
        
        header_layout.addWidget(year_combo)
        layout.addLayout(header_layout)
        
        # Toplam satƒ±rƒ± (sadece bakƒ±m kartƒ± i√ßin)
        total_label = QLabel("")
        total_label.setStyleSheet("""
            font-size: 11px;
            font-weight: bold;
            color: #2c3e50;
            padding: 3px 0px;
            border-top: 1px solid #dee2e6;
            margin-top: 2px;
        """)
        total_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        total_label.setVisible(False)  # Ba≈ülangƒ±√ßta gizli
        layout.addWidget(total_label)
        
        # Veri listesi
        data_list = QListWidget()
        data_list.setStyleSheet("""
            QListWidget {
                background-color: transparent;
                border: none;
                font-size: 11px;
                padding: 0px;
            }
            QListWidget::item {
                padding: 4px 0px;
                border: none;
                color: #495057;
            }
        """)
        data_list.setMaximumHeight(120)
        layout.addWidget(data_list)
        
        # Kart referanslarƒ±nƒ± sakla
        card.data_list = data_list
        card.year_combo = year_combo
        card.data_type = data_type
        card.total_label = total_label
        
        # Yƒ±l deƒüi≈üikliƒüini dinle
        year_combo.currentTextChanged.connect(lambda: self.update_card_data(card))
        
        # ƒ∞lk veriyi y√ºkle
        QTimer.singleShot(100, lambda: self.update_card_data(card))
        
        return card
    
    def update_card_data(self, card):
        """Kart verilerini g√ºncelle"""
        try:
            year = int(card.year_combo.currentText())
            data_type = card.data_type
            card.data_list.clear()
            
            def tr_money(val):
                return f"{val:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".") + " TL"
            
            if data_type == "araclar":
                # Toplam satƒ±rƒ±nƒ± gizle
                card.total_label.setVisible(False)
                
                # Ara√ßlar verisi
                vehicles_data = self.data_manager.load_data('araclar')
                if not vehicles_data.empty:
                    active_vehicles = vehicles_data[vehicles_data['Durum'] == 'Aktif']
                    total_active = len(active_vehicles)
                    
                    if 'Eklenme Tarihi' in vehicles_data.columns:
                        vehicles_data['Eklenme Tarihi'] = pd.to_datetime(vehicles_data['Eklenme Tarihi'], errors='coerce')
                        year_vehicles = vehicles_data[vehicles_data['Eklenme Tarihi'].dt.year == year]
                        year_count = len(year_vehicles)
                    else:
                        year_count = 0
                    
                    card.data_list.addItem(f"Aktif: {total_active}")
                    card.data_list.addItem(f"{year}: {year_count} eklendi")
                else:
                    card.data_list.addItem("Veri bulunamadƒ±")
            
            elif data_type == "bakimlar":
                # Bakƒ±m & Onarƒ±m verisi
                maintenance_data = self.data_manager.load_data('bakimlar')
                giderler_data = self.data_manager.load_data('giderler')
                
                # Debug bilgileri
                print(f"Bakƒ±m verisi y√ºklendi: {len(maintenance_data)} satƒ±r")
                if not maintenance_data.empty:
                    print(f"Bakƒ±m s√ºtunlarƒ±: {list(maintenance_data.columns)}")
                    print(f"Bakƒ±m verisi √∂rnek: {maintenance_data.head()}")
                
                # Bakƒ±m & Onarƒ±m giderleri (bakimlar.xlsx dosyasƒ±ndan)
                total_maintenance = 0
                if not maintenance_data.empty and 'Bakƒ±m Tarihi' in maintenance_data.columns:
                    maintenance_data['Bakƒ±m Tarihi'] = pd.to_datetime(maintenance_data['Bakƒ±m Tarihi'], errors='coerce')
                    year_maintenance = maintenance_data[maintenance_data['Bakƒ±m Tarihi'].dt.year == year]
                    print(f"Se√ßili yƒ±l ({year}) i√ßin bakƒ±m verisi: {len(year_maintenance)} satƒ±r")
                    total_maintenance = year_maintenance['Tutar'].sum() if 'Tutar' in year_maintenance.columns else 0
                    print(f"Bakƒ±m toplam tutar: {total_maintenance}")
                else:
                    print("Bakƒ±m verisi bo≈ü veya 'Bakƒ±m Tarihi' s√ºtunu yok")
                
                # Kasko/Muayene/Sigorta giderleri (giderler.xlsx dosyasƒ±ndan)
                kasko_total = 0
                muayene_total = 0
                sigorta_total = 0
                
                if not giderler_data.empty and 'Tarih' in giderler_data.columns:
                    giderler_data['Tarih'] = pd.to_datetime(giderler_data['Tarih'], errors='coerce')
                    year_giderler = giderler_data[giderler_data['Tarih'].dt.year == year]
                    
                    # Gider t√ºrlerine g√∂re ayrƒ±≈ütƒ±r
                    kasko_data = year_giderler[year_giderler['Gider T√ºr√º'] == 'Kasko']
                    muayene_data = year_giderler[year_giderler['Gider T√ºr√º'] == 'Muayene']
                    sigorta_data = year_giderler[year_giderler['Gider T√ºr√º'] == 'Sigorta']
                    
                    kasko_total = kasko_data['Tutar'].sum() if 'Tutar' in kasko_data.columns else 0
                    muayene_total = muayene_data['Tutar'].sum() if 'Tutar' in muayene_data.columns else 0
                    sigorta_total = sigorta_data['Tutar'].sum() if 'Tutar' in sigorta_data.columns else 0
                
                # Toplam hesapla ve g√∂ster
                total_all = total_maintenance + kasko_total + muayene_total + sigorta_total
                card.total_label.setText(f"Toplam: {tr_money(total_all)}")
                card.total_label.setVisible(True)
                
                # Bakƒ±m & Onarƒ±m bilgileri
                card.data_list.addItem("Bakƒ±m & Onarƒ±m:")
                card.data_list.addItem(f"  {tr_money(total_maintenance)}")
                
                # Kasko/Muayene/Sigorta bilgileri
                card.data_list.addItem("")
                card.data_list.addItem("Sigorta Giderleri:")
                if kasko_total > 0:
                    card.data_list.addItem(f"  Kasko: {tr_money(kasko_total)}")
                if muayene_total > 0:
                    card.data_list.addItem(f"  Muayene: {tr_money(muayene_total)}")
                if sigorta_total > 0:
                    card.data_list.addItem(f"  Sigorta: {tr_money(sigorta_total)}")
            
            elif data_type == "yakitlar":
                # Yakƒ±t verisi
                fuel_data = self.data_manager.load_data('yakitlar')
                if not fuel_data.empty and 'Tarih' in fuel_data.columns:
                    fuel_data['Tarih'] = pd.to_datetime(fuel_data['Tarih'], errors='coerce')
                    year_fuel = fuel_data[fuel_data['Tarih'].dt.year == year]
                    
                    # Yakƒ±t t√ºr√º s√ºtununu bul
                    fuel_type_column = None
                    for col in year_fuel.columns:
                        if 'yakƒ±t' in col.lower() or 't√ºr' in col.lower() or 'tip' in col.lower() or '√ºr√ºn' in col.lower():
                            fuel_type_column = col
                            break
                    
                    total_fuel_cost = 0
                    total_fuel_liter = 0
                    
                    if fuel_type_column and not year_fuel.empty:
                        # Yakƒ±t t√ºrlerine g√∂re grupla
                        fuel_types = year_fuel[fuel_type_column].value_counts()
                        
                        for fuel_type, count in fuel_types.items():
                            type_data = year_fuel[year_fuel[fuel_type_column] == fuel_type]
                            type_liter = type_data['Litre'].sum() if 'Litre' in type_data.columns else 0
                            type_cost = type_data['Tutar'].sum() if 'Tutar' in type_data.columns else 0
                            
                            total_fuel_cost += type_cost
                            total_fuel_liter += type_liter
                            
                            card.data_list.addItem(f"{fuel_type}:")
                            card.data_list.addItem(f"  {type_liter:.1f}L - {tr_money(type_cost)}")
                    else:
                        # Yakƒ±t t√ºr√º s√ºtunu yoksa toplam bilgileri g√∂ster
                        total_fuel_cost = year_fuel['Tutar'].sum() if 'Tutar' in year_fuel.columns else 0
                        total_fuel_liter = year_fuel['Litre'].sum() if 'Litre' in year_fuel.columns else 0
                        
                        card.data_list.addItem(f"Toplam Tutar: {tr_money(total_fuel_cost)}")
                        card.data_list.addItem(f"Toplam Litre: {total_fuel_liter:.1f} L")
                    
                    # Toplam satƒ±rƒ±nƒ± g√∂ster
                    card.total_label.setText(f"Toplam: {tr_money(total_fuel_cost)} ({total_fuel_liter:.1f}L)")
                    card.total_label.setVisible(True)
                else:
                    card.data_list.addItem("Veri bulunamadƒ±")
                    card.total_label.setVisible(False)
            
            elif data_type == "suruculer":
                # Toplam satƒ±rƒ±nƒ± gizle
                card.total_label.setVisible(False)
                
                # S√ºr√ºc√ºler verisi
                drivers_data = self.data_manager.load_data('suruculer')
                if not drivers_data.empty:
                    total_drivers = len(drivers_data)
                    active_drivers = drivers_data[drivers_data['Durum'] == 'Aktif']
                    total_active = len(active_drivers)
                    
                    card.data_list.addItem(f"Toplam: {total_drivers}")
                    card.data_list.addItem(f"Aktif: {total_active}")
                else:
                    card.data_list.addItem("Veri bulunamadƒ±")
            
        except Exception as e:
            print(f"Kart g√ºncelleme hatasƒ±: {e}")
            card.data_list.addItem("‚ùå Hata olu≈ütu")
    

    

    
    def create_info_card(self, title, value, color, with_fuel_table=False):
        """K√º√ß√ºk ve kompakt √∂zet kartƒ± olu≈üturur, yƒ±l se√ßici saƒü √ºstte."""
        card = QFrame()
        card.setFrameStyle(QFrame.Box)
        card.setStyleSheet(f"""
            QFrame {{
                background-color: {color};
                border-radius: 5px;
                padding: 7px;
                color: white;
            }}
        """)
        layout = QVBoxLayout(card)
        layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.setSpacing(6)

        # Ba≈ülƒ±k ve yƒ±l se√ßici aynƒ± satƒ±rda
        header_layout = QHBoxLayout()
        header_layout.setContentsMargins(0, 0, 0, 0)
        header_layout.setSpacing(3)
        title_label = QLabel(title)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_label.setStyleSheet("font-size: 12px; font-weight: bold;")
        header_layout.addWidget(title_label, alignment=Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignVCenter)
        year_combo = None
        if title in ["üí∞ Ara√ßlarƒ±n Yƒ±l ƒ∞√ßindeki Masraflarƒ±", "‚õΩ Yƒ±llƒ±k Yakƒ±t"]:
            year_combo = QComboBox()
            year_combo.setStyleSheet("background-color: white; color: #2c3e50; font-weight: bold; border-radius: 4px; padding: 1px 6px; font-size: 10px;")
            current_year = datetime.now().year
            years = [str(y) for y in range(current_year, current_year-10, -1)]
            year_combo.addItems(years)
            year_combo.setCurrentText(str(current_year))
            if title == "üí∞ Ara√ßlarƒ±n Yƒ±l ƒ∞√ßindeki Masraflarƒ±":
                self.maintenance_year_combo = year_combo
                year_combo.currentTextChanged.connect(self.update_maintenance_card)
                # ƒ∞lk deƒüeri y√ºkle
                QTimer.singleShot(100, self.update_maintenance_card)
            else:
                self.fuel_year_combo = year_combo
                year_combo.currentTextChanged.connect(self.update_fuel_details_label)
                # ƒ∞lk deƒüeri y√ºkle
                QTimer.singleShot(100, self.update_fuel_details_label)
            header_layout.addWidget(year_combo, alignment=Qt.AlignmentFlag.AlignRight | Qt.AlignmentFlag.AlignVCenter)
        else:
            header_layout.addStretch()
        layout.addLayout(header_layout)

        # Ana deƒüer
        value_label = QLabel(value)
        value_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        value_label.setStyleSheet("font-size: 15px; font-weight: bold; margin-bottom: 2px;")
        value_label.setObjectName("value_label")
        layout.addWidget(value_label)

        # Alt bilgi veya detay
        if with_fuel_table:
            self.fuel_details_label = QLabel()
            self.fuel_details_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            self.fuel_details_label.setStyleSheet("font-size: 10px; color: #eaeaea; margin-top: 2px;")
            layout.addWidget(self.fuel_details_label)
        elif title == "üöó T√ºm Ara√ßlar":
            self.vehicle_status_sub = QLabel()
            self.vehicle_status_sub.setAlignment(Qt.AlignmentFlag.AlignCenter)
            self.vehicle_status_sub.setStyleSheet("font-size: 10px; color: #eaeaea; margin-top: 2px;")
            layout.addWidget(self.vehicle_status_sub)
        elif title == "üí∞ Ara√ßlarƒ±n Yƒ±l ƒ∞√ßindeki Masraflarƒ±":
            self.maintenance_cost_sub = QLabel()
            self.maintenance_cost_sub.setAlignment(Qt.AlignmentFlag.AlignCenter)
            self.maintenance_cost_sub.setStyleSheet("font-size: 10px; color: #eaeaea; margin-top: 2px;")
            layout.addWidget(self.maintenance_cost_sub)
        return card
    
    def create_upcoming_events(self, parent_layout):
        """Yakla≈üan i≈ülemler"""
        group = QGroupBox("üìÖ Yakla≈üan ƒ∞≈ülemler")
        group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #27ae60;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
                background-color: #f0f8f0;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 8px 0 8px;
                color: #27ae60;
            }
        """)
        
        layout = QVBoxLayout(group)
        
        self.upcoming_table = QTableWidget()
        self.upcoming_table.setColumnCount(4)
        self.upcoming_table.setHorizontalHeaderLabels(["Tarih", "T√ºr", "Ara√ß", "A√ßƒ±klama"])
        self.upcoming_table.horizontalHeader().setStretchLastSection(True)
        self.upcoming_table.setAlternatingRowColors(True)
        
        layout.addWidget(self.upcoming_table)
        parent_layout.addWidget(group)
    
    def create_recent_activities(self, parent_layout):
        """Son aktiviteler - saƒü taraf"""
        activities_frame = QFrame()
        activities_frame.setStyleSheet("""
            QFrame {
                background-color: white;
                border: 1px solid #e0e0e0;
                border-radius: 8px;
                padding: 10px;
            }
        """)
        activities_frame.setMinimumWidth(250)
        activities_frame.setMaximumWidth(280)
        
        activities_layout = QVBoxLayout(activities_frame)
        
        # Ba≈ülƒ±k
        title = QLabel("üìã Son Aktiviteler")
        title.setStyleSheet("""
            font-size: 12px; 
                font-weight: bold;
            color: #333333; 
            margin-bottom: 6px;
        """)
        activities_layout.addWidget(title)
        
        # Aktivite listesi
        self.activities_list = QListWidget()
        self.activities_list.setStyleSheet("""
            QListWidget {
                border: none;
                background-color: transparent;
                font-size: 9px;
            }
            QListWidget::item {
                padding: 3px;
                border-bottom: 1px solid #f0f0f0;
            }
        """)
        
        # √ñrnek aktiviteler
        sample_activities = [
            "üöó 34ABC123 eklendi (2 saat √∂nce)",
            "üîß 34DEF456 bakƒ±m (1 g√ºn √∂nce)",
            "‚õΩ 34GHI789 yakƒ±t (2 g√ºn √∂nce)",
            "üë®‚Äç‚úàÔ∏è Ahmet Yƒ±lmaz g√ºncellendi (3 g√ºn √∂nce)",
            "üìä Aylƒ±k rapor (1 hafta √∂nce)"
        ]
        
        for activity in sample_activities:
            item = QListWidgetItem(activity)
            self.activities_list.addItem(item)
        
        activities_layout.addWidget(self.activities_list)
        
        parent_layout.addWidget(activities_frame)
    
    def create_expiring_documents(self, parent_layout):
        """Yakla≈üan i≈ülemler - sol taraf"""
        expiring_frame = QFrame()
        expiring_frame.setStyleSheet("""
            QFrame {
                background-color: white;
                border: 1px solid #e0e0e0;
                border-radius: 8px;
                padding: 12px;
            }
        """)
        expiring_frame.setMinimumWidth(400)
        
        expiring_layout = QVBoxLayout(expiring_frame)
        
        # Ba≈ülƒ±k
        title = QLabel("‚è∞ Yakla≈üan ƒ∞≈ülemler")
        title.setStyleSheet("""
            font-size: 14px; 
                font-weight: bold;
            color: #333333; 
            margin-bottom: 8px;
        """)
        expiring_layout.addWidget(title)
        
        # Yan yana 3 s√ºtun layout
        cards_layout = QHBoxLayout()
        cards_layout.setSpacing(8)
        
        # Muayene kartƒ±
        muayene_frame = QFrame()
        muayene_frame.setStyleSheet("""
            QFrame {
                border: 2px solid #f39c12;
                border-radius: 6px;
                background-color: #fef9e7;
                padding: 8px;
            }
        """)
        muayene_layout = QVBoxLayout(muayene_frame)
        
        muayene_title = QLabel("üîß Muayenesi Yakla≈üan Ara√ßlar")
        muayene_title.setStyleSheet("""
            font-size: 8px; 
            font-weight: bold; 
            color: #f39c12;
            text-align: center;
            padding: 2px;
            max-height: 20px;
        """)
        
        self.muayene_list = QListWidget()
        self.muayene_list.setMaximumHeight(140)
        self.muayene_list.setStyleSheet("""
            QListWidget {
                border: none;
                background-color: transparent;
                font-size: 8px;
            }
        """)
        
        muayene_layout.addWidget(muayene_title)
        muayene_layout.addWidget(self.muayene_list)
        
        # Sigorta kartƒ±
        sigorta_frame = QFrame()
        sigorta_frame.setStyleSheet("""
            QFrame {
                border: 2px solid #e74c3c;
                border-radius: 6px;
                background-color: #fdf2f2;
                padding: 8px;
            }
        """)
        sigorta_layout = QVBoxLayout(sigorta_frame)
        
        sigorta_title = QLabel("üõ°Ô∏è Sigortasƒ± Yakla≈üan Ara√ßlar")
        sigorta_title.setStyleSheet("""
            font-size: 8px; 
            font-weight: bold; 
            color: #e74c3c;
            text-align: center;
            padding: 2px;
            max-height: 20px;
        """)
        
        self.sigorta_list = QListWidget()
        self.sigorta_list.setMaximumHeight(140)
        self.sigorta_list.setStyleSheet("""
            QListWidget {
                border: none;
                background-color: transparent;
                font-size: 8px;
            }
        """)
        
        sigorta_layout.addWidget(sigorta_title)
        sigorta_layout.addWidget(self.sigorta_list)
        
        # Kasko kartƒ±
        kasko_frame = QFrame()
        kasko_frame.setStyleSheet("""
            QFrame {
                border: 2px solid #9b59b6;
                border-radius: 6px;
                background-color: #f8f4fd;
                padding: 8px;
            }
        """)
        kasko_layout = QVBoxLayout(kasko_frame)
        
        kasko_title = QLabel("üõ°Ô∏è Kaskosu Yakla≈üan Ara√ßlar")
        kasko_title.setStyleSheet("""
            font-size: 8px; 
            font-weight: bold; 
            color: #9b59b6;
            text-align: center;
            padding: 2px;
            max-height: 20px;
        """)
        
        self.kasko_list = QListWidget()
        self.kasko_list.setMaximumHeight(140)
        self.kasko_list.setStyleSheet("""
            QListWidget {
                border: none;
                background-color: transparent;
                font-size: 8px;
            }
        """)
        
        kasko_layout.addWidget(kasko_title)
        kasko_layout.addWidget(self.kasko_list)
        
        # Kartlarƒ± yan yana ekle
        cards_layout.addWidget(muayene_frame)
        cards_layout.addWidget(sigorta_frame)
        cards_layout.addWidget(kasko_frame)
        
        expiring_layout.addLayout(cards_layout)
        
        parent_layout.addWidget(expiring_frame)
    
    def load_data(self):
        """Veri y√ºkle"""
        try:
            # Ara√ß verileri
            vehicles = self.data_manager.load_data('araclar')
            vehicle_count = len(vehicles) if not vehicles.empty else 0
            
            # Ara√ß durumlarƒ±na g√∂re daƒüƒ±lƒ±m
            vehicle_statuses = {}
            if not vehicles.empty:
                vehicle_statuses = vehicles['Durum'].value_counts().to_dict()
            
            # Durum daƒüƒ±lƒ±mƒ±nƒ± metin olarak olu≈ütur
            status_text = f"Toplam: {vehicle_count}"
            for status, count in vehicle_statuses.items():
                status_text += f"\n{status}: {count}"
            
            # Masraf detaylarƒ±nƒ± hesapla
            maintenance = self.data_manager.load_data('bakimlar')
            expenses = self.data_manager.load_data('giderler')
            current_year = datetime.now().year
            
            # Bakƒ±m onarƒ±m maliyetleri
            maintenance_cost = 0
            if not maintenance.empty:
                for _, record in maintenance.iterrows():
                    try:
                        bakim_tarihi = str(record.get('Bakƒ±m Tarihi', ''))
                        if bakim_tarihi and len(bakim_tarihi) >= 4:
                            bakim_yili = int(bakim_tarihi[:4])
                            if bakim_yili == current_year:
                                tutar_str = str(record.get('Tutar', '0'))
                                tutar_str = tutar_str.replace('TL', '').replace('‚Ç∫', '').replace(',', '').strip()
                                try:
                                    tutar = float(tutar_str)
                                    maintenance_cost += tutar
                                except:
                                    pass
                    except:
                        pass
            
            # Kasko/Muayene/Sigorta giderleri
            insurance_cost = 0
            if not expenses.empty:
                for _, record in expenses.iterrows():
                    try:
                        gider_turu = str(record.get('Gider T√ºr√º', '')).strip()
                        # Tam e≈üle≈üme kontrol√º
                        if gider_turu in ['Kasko', 'Muayene', 'Sigorta']:
                            tarih = str(record.get('Tarih', ''))
                            if tarih and len(tarih) >= 4:
                                gider_yili = int(tarih[:4])
                                if gider_yili == current_year:
                                    tutar_str = str(record.get('Tutar', '0'))
                                    tutar_str = tutar_str.replace('TL', '').replace('‚Ç∫', '').replace(',', '').strip()
                                    try:
                                        tutar = float(tutar_str)
                                        insurance_cost += tutar
                                    except:
                                        pass
                    except:
                        pass
            
            # NaN kontrol√º
            if pd.isna(maintenance_cost) or maintenance_cost is None:
                maintenance_cost = 0
            if pd.isna(insurance_cost) or insurance_cost is None:
                insurance_cost = 0
                
            # Toplam masraf
            total_cost = maintenance_cost + insurance_cost
            
            # Yakƒ±t giderlerini hesapla
            expenses = self.data_manager.load_data('giderler')
            fuel_cost = 0
            
            if not expenses.empty:
                for _, record in expenses.iterrows():
                    try:
                        # Gider t√ºr√ºn√º kontrol et
                        gider_turu = str(record.get('Gider T√ºr√º', '')).lower()
                        if 'yakƒ±t' in gider_turu or 'benzin' in gider_turu or 'dizel' in gider_turu:
                            # Tarihi kontrol et
                            tarih = str(record.get('Tarih', ''))
                            if tarih and len(tarih) >= 4:
                                gider_yili = int(tarih[:4])
                                if gider_yili == current_year:
                                    # Tutarƒ± hesapla
                                    tutar_str = str(record.get('Tutar', '0'))
                                    tutar_str = tutar_str.replace('TL', '').replace('‚Ç∫', '').replace(',', '').strip()
                                    try:
                                        tutar = float(tutar_str)
                                        fuel_cost += tutar
                                    except:
                                        pass
                    except:
                        pass
            
            # Yakƒ±t maliyeti NaN kontrol√º
            if pd.isna(fuel_cost) or fuel_cost is None:
                fuel_cost = 0
            
            # S√ºresi Yakla≈üan ƒ∞≈ülemleri y√ºkle
            self.load_expiring_documents()
            
            # Kartlarƒ± g√ºncelle (varsa)
            if hasattr(self, 'maintenance_cost_card'):
                maintenance_cost_label = self.maintenance_cost_card.findChild(QLabel, "value_label")
            else:
                maintenance_cost_label = None
                
            if hasattr(self, 'fuel_cost_card'):
                fuel_cost_label = self.fuel_cost_card.findChild(QLabel, "value_label")
            else:
                fuel_cost_label = None
            
            if maintenance_cost_label:
                # Masraf detaylarƒ±nƒ± olu≈ütur
                def tr_money(val):
                    if pd.isna(val) or val is None:
                        return "0,00"
                    try:
                        return f"{float(val):,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')
                    except:
                        return "0,00"
                cost_text = f"Toplam: {tr_money(total_cost)} TL\n"
                cost_text += f"Bakƒ±m/Onarƒ±m: {tr_money(maintenance_cost)} TL\n"
                cost_text += f"Kasko/Muayene/Sigorta: {tr_money(insurance_cost)} TL"
                maintenance_cost_label.setText(cost_text)
            if fuel_cost_label:
                def tr_money(val):
                    if pd.isna(val) or val is None:
                        return "0,00"
                    try:
                        return f"{float(val):,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')
                    except:
                        return "0,00"
                fuel_cost_label.setText(f"{tr_money(fuel_cost)} TL")
            
            # Yƒ±llƒ±k yakƒ±t detayƒ±nƒ± g√ºncelle (sadece combo box'lar olu≈üturulduktan sonra)
            if hasattr(self, 'fuel_year_combo') and hasattr(self, 'maintenance_year_combo'):
                self.update_fuel_details_label()
                self.update_maintenance_card()
            
        except Exception as e:
            print(f"Dashboard veri y√ºkleme hatasƒ±: {e}")
    
    def update_maintenance_card(self):
        try:
            year = int(self.maintenance_year_combo.currentText()) if hasattr(self, 'maintenance_year_combo') else datetime.now().year
            maintenance = self.data_manager.load_data('bakimlar')
            expenses = self.data_manager.load_data('giderler')
            maintenance_cost = 0
            insurance_cost = 0
            # Bakƒ±m/onarƒ±m
            if not maintenance.empty:
                for _, record in maintenance.iterrows():
                    try:
                        bakim_tarihi = str(record.get('Bakƒ±m Tarihi', ''))
                        if bakim_tarihi and len(bakim_tarihi) >= 4:
                            bakim_yili = int(bakim_tarihi[-4:]) if bakim_tarihi[-4:].isdigit() else int(bakim_tarihi[:4])
                            if bakim_yili == year:
                                tutar_str = str(record.get('Tutar', '0')).replace('TL', '').replace('‚Ç∫', '').replace(',', '').strip()
                                try:
                                    tutar = float(tutar_str)
                                    maintenance_cost += tutar
                                except:
                                    pass
                    except:
                        pass
            # Kasko/Muayene/Sigorta
            if not expenses.empty:
                for _, record in expenses.iterrows():
                    try:
                        gider_turu = str(record.get('Gider T√ºr√º', '')).strip()
                        # Tam e≈üle≈üme kontrol√º
                        if gider_turu in ['Kasko', 'Muayene', 'Sigorta']:
                            tarih = str(record.get('Tarih', '')).strip()
                            if not tarih or len(tarih) < 4:
                                tarih = str(record.get('Biti≈ü', '')).strip()
                            gider_yili = None
                            if tarih and len(tarih) >= 4:
                                # Yƒ±l ba≈üta mƒ± sonda mƒ± kontrol et
                                if tarih[:4].isdigit():
                                    gider_yili = int(tarih[:4])
                                elif tarih[-4:].isdigit():
                                    gider_yili = int(tarih[-4:])
                            if gider_yili == year:
                                tutar_str = str(record.get('Tutar', '0')).replace('TL', '').replace('‚Ç∫', '').replace(',', '').strip()
                                try:
                                    tutar = float(tutar_str)
                                except:
                                    tutar = 0
                                insurance_cost += tutar
                    except:
                        pass
            # NaN ve None deƒüerlerini kontrol et
            if pd.isna(maintenance_cost) or maintenance_cost is None:
                maintenance_cost = 0
            if pd.isna(insurance_cost) or insurance_cost is None:
                insurance_cost = 0
                
            total_cost = maintenance_cost + insurance_cost
            
            def tr_money(val):
                if pd.isna(val) or val is None:
                    return "0,00"
                try:
                    return f"{float(val):,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')
                except:
                    return "0,00"
                    
            cost_text = f"Toplam: {tr_money(total_cost)} TL\n"
            cost_text += f"Bakƒ±m/Onarƒ±m: {tr_money(maintenance_cost)} TL\n"
            cost_text += f"Kasko/Muayene/Sigorta: {tr_money(insurance_cost)} TL"
            
            # Ana deƒüer label'ƒ±nƒ± g√ºncelle
            maintenance_cost_label = self.maintenance_cost_card.findChild(QLabel, "value_label")
            if maintenance_cost_label:
                maintenance_cost_label.setText(cost_text)
            
            # Alt bilgi label'ƒ±nƒ± da g√ºncelle
            if hasattr(self, 'maintenance_cost_sub'):
                self.maintenance_cost_sub.setText(f"{year} yƒ±lƒ± toplam masrafƒ±")
        except Exception as e:
            maintenance_cost_label = self.maintenance_cost_card.findChild(QLabel, "value_label")
            if maintenance_cost_label:
                maintenance_cost_label.setText("")
            if hasattr(self, 'maintenance_cost_sub'):
                self.maintenance_cost_sub.setText("")
    
    def update_fuel_details_label(self):
        try:
            year = int(self.fuel_year_combo.currentText()) if hasattr(self, 'fuel_year_combo') else datetime.now().year
            yakitlar = self.data_manager.load_data('yakitlar')
            summary = {"Benzin": {"litre": 0, "tutar": 0}, "Motorin": {"litre": 0, "tutar": 0}}
            if not yakitlar.empty:
                for _, record in yakitlar.iterrows():
                    try:
                        yakit_tipi = str(record.get('Yakƒ±t Tipi', ''))
                        tarih = str(record.get('Tarih', ''))
                        litre = float(str(record.get('Litre', '0')).replace(',', '.'))
                        tutar = float(str(record.get('Tutar', '0')).replace(',', '.'))
                        if tarih and len(tarih) >= 4:
                            yili = int(tarih[:4])
                            if yili == year and yakit_tipi in summary:
                                summary[yakit_tipi]["litre"] += litre
                                summary[yakit_tipi]["tutar"] += tutar
                    except:
                        pass
            def tr_money(val):
                if pd.isna(val) or val is None:
                    return "0,00"
                try:
                    return f"{float(val):,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')
                except:
                    return "0,00"
                    
            lines = []
            for yakit_tipi in ["Benzin", "Motorin"]:
                litre = summary[yakit_tipi]["litre"]
                tutar = summary[yakit_tipi]["tutar"]
                # NaN kontrol√º
                if pd.isna(litre) or litre is None:
                    litre = 0
                if pd.isna(tutar) or tutar is None:
                    tutar = 0
                lines.append(f"{yakit_tipi}: {litre:,.2f} L / {tr_money(tutar)} TL")
            
            # Detay label'ƒ±nƒ± g√ºncelle
            if hasattr(self, 'fuel_details_label'):
                self.fuel_details_label.setText("\n".join(lines))
            
            # Ana deƒüer label'ƒ±nƒ± g√ºncelle
            fuel_cost_label = self.fuel_cost_card.findChild(QLabel, "value_label")
            if fuel_cost_label:
                toplam = summary["Benzin"]["tutar"] + summary["Motorin"]["tutar"]
                fuel_cost_label.setText(f"{tr_money(toplam)} TL")
        except Exception as e:
            if hasattr(self, 'fuel_details_label'):
                self.fuel_details_label.setText("")
            fuel_cost_label = self.fuel_cost_card.findChild(QLabel, "value_label")
            if fuel_cost_label:
                fuel_cost_label.setText("")
    
    def load_expiring_documents(self):
        """S√ºresi Yakla≈üan ƒ∞≈ülemleri y√ºkle"""
        try:
            vehicles = self.data_manager.load_data('araclar')
            current_date = datetime.now().date()
            
            # Listeleri temizle
            self.muayene_list.clear()
            self.sigorta_list.clear()
            self.kasko_list.clear()
            
            if vehicles.empty:
                self.muayene_list.addItem("Muayenesi yakla≈üan ara√ß yok")
                self.sigorta_list.addItem("Sigortasƒ± yakla≈üan ara√ß yok")
                self.kasko_list.addItem("Kaskosu yakla≈üan ara√ß yok")
                return
            
            muayene_count = 0
            sigorta_count = 0
            kasko_count = 0
            
            # Ge√ßmi≈ü belgeler i√ßin saya√ß
            expired_muayene = 0
            expired_sigorta = 0
            expired_kasko = 0
            
            for _, vehicle in vehicles.iterrows():
                plaka = vehicle.get('Plaka', '')
                if not plaka:
                    continue
                
                # Muayene kontrol√º
                muayene_date = self._parse_date(vehicle.get('Muayene Tarihi', ''))
                if muayene_date:
                    days_left = (muayene_date - current_date).days
                    
                    # Ge√ßmi≈ü tarih kontrol√º - s√ºrekli uyarƒ±
                    if days_left < 0:
                        expired_muayene += 1
                        days_text = f"{abs(days_left)} g√ºn ge√ßmi≈ü"
                        item_text = f"üö® {plaka} - {days_text} - YENƒ∞ TARƒ∞H Gƒ∞Rƒ∞N!"
                        
                        list_item = QListWidgetItem(item_text)
                        list_item.setBackground(QColor("#ffcdd2"))  # Kƒ±rmƒ±zƒ± arka plan
                        list_item.setForeground(QColor("#d32f2f"))  # Kƒ±rmƒ±zƒ± yazƒ±
                        
                        self.muayene_list.addItem(list_item)
                    # Yakla≈üan tarih kontrol√º
                    elif 0 <= days_left <= 30:
                        muayene_count += 1
                        days_text = f"{days_left} g√ºn" if days_left > 0 else "BUG√úN"
                        item_text = f"{plaka} - {days_text}"
                        
                        list_item = QListWidgetItem(item_text)
                        if days_left <= 7:
                            list_item.setBackground(QColor("#ffebee"))
                        elif days_left <= 15:
                            list_item.setBackground(QColor("#fff3e0"))
                        else:
                            list_item.setBackground(QColor("#f1f8e9"))
                        
                        self.muayene_list.addItem(list_item)
                
                # Sigorta kontrol√º
                sigorta_date = self._parse_date(vehicle.get('Sigorta Biti≈ü', ''))
                if sigorta_date:
                    days_left = (sigorta_date - current_date).days
                    
                    # Ge√ßmi≈ü tarih kontrol√º - s√ºrekli uyarƒ±
                    if days_left < 0:
                        expired_sigorta += 1
                        days_text = f"{abs(days_left)} g√ºn ge√ßmi≈ü"
                        item_text = f"üö® {plaka} - {days_text} - YENƒ∞ TARƒ∞H Gƒ∞Rƒ∞N!"
                        
                        list_item = QListWidgetItem(item_text)
                        list_item.setBackground(QColor("#ffcdd2"))  # Kƒ±rmƒ±zƒ± arka plan
                        list_item.setForeground(QColor("#d32f2f"))  # Kƒ±rmƒ±zƒ± yazƒ±
                        
                        self.sigorta_list.addItem(list_item)
                    # Yakla≈üan tarih kontrol√º
                    elif 0 <= days_left <= 30:
                        sigorta_count += 1
                        days_text = f"{days_left} g√ºn" if days_left > 0 else "BUG√úN"
                        item_text = f"{plaka} - {days_text}"
                        
                        list_item = QListWidgetItem(item_text)
                        if days_left <= 7:
                            list_item.setBackground(QColor("#ffebee"))
                        elif days_left <= 15:
                            list_item.setBackground(QColor("#fff3e0"))
                        else:
                            list_item.setBackground(QColor("#f1f8e9"))
                        
                        self.sigorta_list.addItem(list_item)
                
                # Kasko kontrol√º
                kasko_date = self._parse_date(vehicle.get('Kasko Biti≈ü', ''))
                if kasko_date:
                    days_left = (kasko_date - current_date).days
                    
                    # Ge√ßmi≈ü tarih kontrol√º - s√ºrekli uyarƒ±
                    if days_left < 0:
                        expired_kasko += 1
                        days_text = f"{abs(days_left)} g√ºn ge√ßmi≈ü"
                        item_text = f"üö® {plaka} - {days_text} - YENƒ∞ TARƒ∞H Gƒ∞Rƒ∞N!"
                        
                        list_item = QListWidgetItem(item_text)
                        list_item.setBackground(QColor("#ffcdd2"))  # Kƒ±rmƒ±zƒ± arka plan
                        list_item.setForeground(QColor("#d32f2f"))  # Kƒ±rmƒ±zƒ± yazƒ±
                        
                        self.kasko_list.addItem(list_item)
                    # Yakla≈üan tarih kontrol√º
                    elif 0 <= days_left <= 30:
                        kasko_count += 1
                        days_text = f"{days_left} g√ºn" if days_left > 0 else "BUG√úN"
                        item_text = f"{plaka} - {days_text}"
                        
                        list_item = QListWidgetItem(item_text)
                        if days_left <= 7:
                            list_item.setBackground(QColor("#ffebee"))
                        elif days_left <= 15:
                            list_item.setBackground(QColor("#fff3e0"))
                        else:
                            list_item.setBackground(QColor("#f1f8e9"))
                        
                        self.kasko_list.addItem(list_item)
            
            # Eƒüer hi√ß belge yoksa mesaj g√∂ster
            if muayene_count == 0 and expired_muayene == 0:
                self.muayene_list.addItem("Muayenesi yakla≈üan ara√ß yok")
            if sigorta_count == 0 and expired_sigorta == 0:
                self.sigorta_list.addItem("Sigortasƒ± yakla≈üan ara√ß yok")
            if kasko_count == 0 and expired_kasko == 0:
                self.kasko_list.addItem("Kaskosu yakla≈üan ara√ß yok")
                
        except Exception as e:
            print(f"Belge y√ºkleme hatasƒ±: {e}")
            self.muayene_list.addItem("Y√ºkleme hatasƒ±")
            self.sigorta_list.addItem("Y√ºkleme hatasƒ±")
            self.kasko_list.addItem("Y√ºkleme hatasƒ±")
    
    def _parse_date(self, date_str):
        """Tarih string'ini parse et - T√ºrk√ße format (dd.mm.yyyy) i√ßin dayfirst=True"""
        try:
            # NaN, None, bo≈ü string, float NaN kontrol√º
            if pd.isna(date_str) or date_str is None or str(date_str).strip() == '' or str(date_str).lower() == 'nan':
                return None
            
            # String'e √ßevir ve bo≈üluklarƒ± temizle
            date_str = str(date_str).strip()
            if not date_str or date_str.lower() == 'nan':
                return None
                
            return pd.to_datetime(date_str, dayfirst=True).date()
        except Exception as e:
            print(f"Dashboard tarih parse hatasƒ±: {date_str} - {str(e)}")
            return None
    
    def create_fuel_summary(self, parent_layout):
        group = QGroupBox("Yakƒ±t Tipine G√∂re Yƒ±llƒ±k T√ºketim ve Tutar")
        group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #f39c12;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
            }
        """)
        layout = QVBoxLayout(group)
        self.fuel_table = QTableWidget()
        self.fuel_table.setColumnCount(3)
        self.fuel_table.setHorizontalHeaderLabels(["Yakƒ±t Tipi", "Toplam Litre", "Toplam Tutar (TL)"])
        self.fuel_table.horizontalHeader().setStretchLastSection(True)
        self.fuel_table.setAlternatingRowColors(True)
        layout.addWidget(self.fuel_table)
        parent_layout.addWidget(group)
    
    def load_fuel_summary(self):
        try:
            yakitlar = self.data_manager.load_data('yakitlar')
            current_year = datetime.now().year
            summary = {}
            if not yakitlar.empty:
                for _, record in yakitlar.iterrows():
                    try:
                        yakit_tipi = str(record.get('Yakƒ±t Tipi', 'Diƒüer'))
                        tarih = str(record.get('Tarih', ''))
                        litre = float(str(record.get('Litre', '0')).replace(',', '.'))
                        tutar = float(str(record.get('Tutar', '0')).replace(',', '.'))
                        if tarih and len(tarih) >= 4:
                            year = int(tarih[:4])
                            if year == current_year:
                                if yakit_tipi not in summary:
                                    summary[yakit_tipi] = {'litre': 0, 'tutar': 0}
                                summary[yakit_tipi]['litre'] += litre
                                summary[yakit_tipi]['tutar'] += tutar
                    except:
                        pass
            self.fuel_table.setRowCount(len(summary))
            for row, (yakit_tipi, vals) in enumerate(summary.items()):
                self.fuel_table.setItem(row, 0, QTableWidgetItem(yakit_tipi))
                self.fuel_table.setItem(row, 1, QTableWidgetItem(f"{vals['litre']:.2f}"))
                self.fuel_table.setItem(row, 2, QTableWidgetItem(f"{vals['tutar']:.2f}"))
        except Exception as e:
            print(f"Yakƒ±t √∂zet y√ºkleme hatasƒ±: {e}")

# Diƒüer panel sƒ±nƒ±flarƒ± burada tanƒ±mlanacak...
class VehiclesPanel(QWidget):
    def __init__(self, data_manager):
        super().__init__()
        self.data_manager = data_manager
        self.init_ui()
        self.load_vehicles()
        self.load_deleted_vehicles()  # Silinen ara√ßlarƒ± da y√ºkle
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)
        
        # Ba≈ülƒ±k
        header_layout = QHBoxLayout()
        title = QLabel("Ara√ß Y√∂netimi")
        title.setStyleSheet("font-size: 24px; font-weight: bold; color: #2c3e50;")
        header_layout.addWidget(title)
        header_layout.addStretch()
        layout.addLayout(header_layout)
        
        # Tab Widget olu≈ütur
        self.tab_widget = QTabWidget()
        self.tab_widget.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #bdc3c7;
                border-radius: 5px;
                background-color: white;
            }
            QTabBar::tab {
                background-color: #ecf0f1;
                color: #2c3e50;
                padding: 10px 20px;
                margin-right: 2px;
                border-top-left-radius: 5px;
                border-top-right-radius: 5px;
            font-weight: bold; 
            }
            QTabBar::tab:selected {
                background-color: #3498db;
                color: white;
            }
            QTabBar::tab:hover {
                background-color: #2980b9;
                color: white;
            }
        """)
        
        # Aktif Ara√ßlar sekmesi
        self.create_active_vehicles_tab()
        
        # Silinen Ara√ßlar sekmesi
        self.create_deleted_vehicles_tab()
        
        layout.addWidget(self.tab_widget)
        
        # ƒ∞lk y√ºkleme i√ßin timer kullan
        QTimer.singleShot(100, self.load_deleted_vehicles)
    
    def create_active_vehicles_tab(self):
        """Aktif ara√ßlar sekmesi"""
        active_tab = QWidget()
        layout = QVBoxLayout(active_tab)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(15)
        
        # Butonlar
        btn_layout = QHBoxLayout()
        btn_add = QPushButton("‚ûï Ara√ß Ekle")
        btn_add.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        btn_add.clicked.connect(self.add_vehicle)
        
        btn_edit = QPushButton("‚úèÔ∏è D√ºzenle")
        btn_edit.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        btn_edit.clicked.connect(self.edit_vehicle)
        
        btn_delete = QPushButton("üóëÔ∏è Sil")
        btn_delete.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
        """)
        btn_delete.clicked.connect(self.delete_vehicle)
        
        btn_export = QPushButton("üì§ Excel'e Aktar")
        btn_export.setStyleSheet("""
            QPushButton {
                background-color: #f1c40f;
                color: #2c3e50;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #f39c12;
            }
        """)
        btn_export.clicked.connect(lambda: export_table_to_excel(self.model, self.proxy_model, self))
        
        btn_layout.addWidget(btn_add)
        btn_layout.addWidget(btn_edit)
        btn_layout.addWidget(btn_delete)
        btn_layout.addWidget(btn_export)
        btn_layout.addStretch()
        layout.addLayout(btn_layout)
        
        # Arama kutusu
        self.search_box = QLineEdit()
        self.search_box.setPlaceholderText("Aktif ara√ßlarda ara...")
        self.search_box.textChanged.connect(self.filter_vehicles)
        layout.addWidget(self.search_box)
        
        # QTableView ve model
        self.table_view = QTableView()
        self.model = QStandardItemModel()
        self.proxy_model = QSortFilterProxyModel()
        self.proxy_model.setSourceModel(self.model)
        self.proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)
        self.table_view.setModel(self.proxy_model)
        self.table_view.setSortingEnabled(True)
        self.table_view.setSelectionBehavior(QTableView.SelectRows)
        self.table_view.setSelectionMode(QTableView.SingleSelection)
        self.table_view.horizontalHeader().setStretchLastSection(True)
        
        # Satƒ±r numaralarƒ±nƒ± gizle
        self.table_view.verticalHeader().setVisible(False)
        
        layout.addWidget(self.table_view)
        
        self.tab_widget.addTab(active_tab, "üöó Aktif Ara√ßlar")
    
    def create_deleted_vehicles_tab(self):
        """Silinen ara√ßlar sekmesi"""
        deleted_tab = QWidget()
        layout = QVBoxLayout(deleted_tab)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(15)
        
        # Filtreler
        filter_layout = QHBoxLayout()
        
        # Tarih filtresi
        date_label = QLabel("Tarih Aralƒ±ƒüƒ±:")
        self.deleted_start_date = QDateEdit()
        self.deleted_start_date.setDate(QDate.currentDate().addMonths(-6))
        self.deleted_end_date = QDateEdit()
        self.deleted_end_date.setDate(QDate.currentDate())
        
        # Sebep filtresi
        reason_label = QLabel("Silme Sebebi:")
        self.deleted_reason_filter = QComboBox()
        self.deleted_reason_filter.addItems(["T√ºm√º", "Hurda", "Satƒ±≈ü", "Kaza", "Deƒüi≈üim", "Devir", "Diƒüer"])
        
        # Arama kutusu
        self.deleted_search_box = QLineEdit()
        self.deleted_search_box.setPlaceholderText("Silinen ara√ßlarda ara...")
        
        filter_layout.addWidget(date_label)
        filter_layout.addWidget(self.deleted_start_date)
        filter_layout.addWidget(QLabel("-"))
        filter_layout.addWidget(self.deleted_end_date)
        filter_layout.addWidget(reason_label)
        filter_layout.addWidget(self.deleted_reason_filter)
        filter_layout.addWidget(self.deleted_search_box)
        filter_layout.addStretch()
        layout.addLayout(filter_layout)
        
        # Butonlar
        btn_layout = QHBoxLayout()
        
        btn_restore = QPushButton("üîÑ Geri Y√ºkle")
        btn_restore.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        btn_restore.clicked.connect(self.restore_vehicle)
        
        btn_export_deleted = QPushButton("üì§ Excel'e Aktar")
        btn_export_deleted.setStyleSheet("""
            QPushButton {
                background-color: #f1c40f;
                color: #2c3e50;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
            font-weight: bold; 
            }
            QPushButton:hover {
                background-color: #f39c12;
            }
        """)
        btn_export_deleted.clicked.connect(self.export_deleted_vehicles)
        
        btn_report = QPushButton("üìä Silme Raporu")
        btn_report.setStyleSheet("""
            QPushButton {
                background-color: #9b59b6;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #8e44ad;
            }
        """)
        btn_report.clicked.connect(self.generate_deletion_report)
        
        btn_layout.addWidget(btn_restore)
        btn_layout.addWidget(btn_export_deleted)
        btn_layout.addWidget(btn_report)
        btn_layout.addStretch()
        layout.addLayout(btn_layout)
        
        # Silinen ara√ßlar tablosu
        self.deleted_table_view = QTableView()
        self.deleted_model = QStandardItemModel()
        self.deleted_proxy_model = QSortFilterProxyModel()
        self.deleted_proxy_model.setSourceModel(self.deleted_model)
        self.deleted_proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)
        self.deleted_table_view.setModel(self.deleted_proxy_model)
        self.deleted_table_view.setSortingEnabled(True)
        self.deleted_table_view.setSelectionBehavior(QTableView.SelectRows)
        self.deleted_table_view.setSelectionMode(QTableView.SingleSelection)
        self.deleted_table_view.horizontalHeader().setStretchLastSection(True)
        
        # Satƒ±r numaralarƒ±nƒ± gizle
        self.deleted_table_view.verticalHeader().setVisible(False)
        
        layout.addWidget(self.deleted_table_view)
        
        # Filtre baƒülantƒ±larƒ±
        self.deleted_start_date.dateChanged.connect(self.load_deleted_vehicles)
        self.deleted_end_date.dateChanged.connect(self.load_deleted_vehicles)
        self.deleted_reason_filter.currentTextChanged.connect(self.load_deleted_vehicles)
        self.deleted_search_box.textChanged.connect(self.filter_deleted_vehicles)
        
        # Test butonu ekle
        btn_test = QPushButton("üîÑ Test Y√ºkle")
        btn_test.setStyleSheet("""
            QPushButton {
                background-color: #9b59b6;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 3px;
                font-size: 10px;
            }
            QPushButton:hover {
                background-color: #8e44ad;
            }
        """)
        btn_test.clicked.connect(self.load_deleted_vehicles)
        btn_layout.addWidget(btn_test)
        
        self.tab_widget.addTab(deleted_tab, "üóëÔ∏è Silinen Ara√ßlar")
    def load_vehicles(self):
        try:
            vehicles = self.data_manager.load_data('araclar')
            columns = [
                "Plaka", "Marka", "Model", "Yƒ±l", "≈ûasi No", "Ruhsat Seri No", "Yakƒ±t Tipi", "Ara√ß Tipi", "Son KM", "Durum", "Sigorta Biti≈ü", "Kasko Var mƒ±?", "Kasko Biti≈ü", "Muayene Tarihi", "Birim", "Hizmet Ki≈üisi"
            ]
            self.model.clear()
            self.model.setHorizontalHeaderLabels(columns)
            for _, vehicle in vehicles.iterrows():
                row = []
                for idx, col in enumerate(columns):
                    val = str(vehicle.get(col, ''))
                    item = QStandardItem(val)
                    if col in ["Sigorta Biti≈ü", "Kasko Biti≈ü", "Muayene Tarihi"] and val:
                        try:
                            date_val = pd.to_datetime(val, dayfirst=False)
                            days_left = (date_val - datetime.now()).days
                            if days_left > 60:
                                item.setBackground(QColor("#b6fcb6"))  # Ye≈üil
                            elif 30 < days_left <= 60:
                                item.setBackground(QColor("#fff9b1"))  # Sarƒ±
                            elif 0 <= days_left <= 30:
                                item.setBackground(QColor("#ffb3b3"))  # Kƒ±rmƒ±zƒ±
                            else:
                                item.setBackground(QColor("#e0e0e0"))  # Gri
                        except:
                            pass
                    row.append(item)
                self.model.appendRow(row)
        except Exception as e:
            print(f"Ara√ß y√ºkleme hatasƒ±: {e}")
    def filter_vehicles(self, text):
        self.proxy_model.setFilterWildcard(text)
    def add_vehicle(self):
        dialog = VehicleDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            self.load_vehicles()
    def edit_vehicle(self):
        index = self.table_view.currentIndex()
        if index.isValid():
            row = self.proxy_model.mapToSource(index).row()
            plaka = self.model.item(row, 0).text()
            vehicles = self.data_manager.load_data('araclar')
            vehicle = vehicles[vehicles['Plaka'] == plaka]
            if not vehicle.empty:
                dialog = VehicleDialog(self, vehicle.iloc[0].to_dict())
                if dialog.exec_() == QDialog.Accepted:
                    self.load_vehicles()
        else:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen d√ºzenlenecek aracƒ± se√ßin.")
    def delete_vehicle(self):
        index = self.table_view.currentIndex()
        if index.isValid():
            row = self.proxy_model.mapToSource(index).row()
            plaka = self.model.item(row, 0).text()
            
            # Geli≈ümi≈ü silme dialog'u
            dialog = VehicleDeletionDialog(self, plaka)
            if dialog.exec_() == QDialog.Accepted:
                try:
                    # Ara√ß verilerini al
                    vehicles = self.data_manager.load_data('araclar')
                    vehicle_data = vehicles[vehicles['Plaka'] == plaka]
                    
                    if not vehicle_data.empty:
                        vehicle_info = vehicle_data.iloc[0].to_dict()
                        
                        # Silinen ara√ßlar tablosuna ekle
                        self.add_to_deleted_vehicles(vehicle_info, dialog.get_deletion_reason(), dialog.get_deletion_notes())
                        
                        # Ana tablodan √ßƒ±kar
                        vehicles = vehicles[vehicles['Plaka'] != plaka]
                        self.data_manager.save_data('araclar', vehicles)
                        
                        # ƒ∞lgili kayƒ±tlarƒ± g√ºncelle (bakƒ±m, yakƒ±t vs.)
                        self.update_related_records(plaka)
                        
                        self.load_vehicles()
                        self.load_deleted_vehicles()  # Silinen ara√ßlar sekmesini g√ºncelle
                        
                        QMessageBox.information(self, "Ba≈üarƒ±lƒ±", 
                            f"'{plaka}' plakalƒ± ara√ß ba≈üarƒ±yla silindi.\n"
                            f"Sebep: {dialog.get_deletion_reason()}")
                    else:
                        QMessageBox.warning(self, "Uyarƒ±", "Ara√ß bulunamadƒ±.")
                        
                except Exception as e:
                    QMessageBox.critical(self, "Hata", f"Ara√ß silme hatasƒ±: {str(e)}")
        else:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen silinecek aracƒ± se√ßin.")
    
    def add_to_deleted_vehicles(self, vehicle_info, reason, notes):
        """Silinen ara√ßlarƒ± ayrƒ± tabloya ekle"""
        try:
            deleted_vehicles = self.data_manager.load_data('silinen_araclar')
            
            # Yeni silinen ara√ß kaydƒ±
            deleted_record = {
                'ID': len(deleted_vehicles) + 1 if not deleted_vehicles.empty else 1,
                'Plaka': vehicle_info.get('Plaka', ''),
                'Marka': vehicle_info.get('Marka', ''),
                'Model': vehicle_info.get('Model', ''),
                'Yƒ±l': vehicle_info.get('Yƒ±l', ''),
                '≈ûasi No': vehicle_info.get('≈ûasi No', ''),
                'Motor No': vehicle_info.get('Motor No', ''),
                'Ara√ß Tipi': vehicle_info.get('Ara√ß Tipi', ''),
                'Son KM': vehicle_info.get('Son KM', ''),
                'Durum': 'Silindi',
                'Sigorta Biti≈ü': vehicle_info.get('Sigorta Biti≈ü', ''),
                'Muayene Tarihi': vehicle_info.get('Muayene Tarihi', ''),
                'Birim': vehicle_info.get('Birim', ''),
                'Hizmet Ki≈üisi': vehicle_info.get('Hizmet Ki≈üisi', ''),
                'Fotoƒüraf Yolu': vehicle_info.get('Fotoƒüraf Yolu', ''),
                'Evrak Yolu': vehicle_info.get('Evrak Yolu', ''),
                'KM Ge√ßmi≈üi': vehicle_info.get('KM Ge√ßmi≈üi', ''),
                'Olu≈üturma Tarihi': vehicle_info.get('Olu≈üturma Tarihi', ''),
                'G√ºncelleme Tarihi': vehicle_info.get('G√ºncelleme Tarihi', ''),
                'Silme Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'Silme Sebebi': reason,
                'Silme Notlarƒ±': notes,
                'Silen Kullanƒ±cƒ±': 'Admin'  # Gelecekte kullanƒ±cƒ± sistemi eklenebilir
            }
            
            new_df = pd.DataFrame([deleted_record])
            deleted_vehicles = pd.concat([deleted_vehicles, new_df], ignore_index=True)
            
            self.data_manager.save_data('silinen_araclar', deleted_vehicles)
            
        except Exception as e:
            logger.error(f"Silinen ara√ß ekleme hatasƒ±: {str(e)}", e)
    
    def update_related_records(self, plaka):
        """ƒ∞lgili kayƒ±tlarƒ± g√ºncelle (bakƒ±m, yakƒ±t, ceza vs.)"""
        try:
            # Bakƒ±m kayƒ±tlarƒ±nƒ± g√ºncelle
            maintenance = self.data_manager.load_data('bakimlar')
            if not maintenance.empty:
                maintenance.loc[maintenance['Ara√ß Plakasƒ±'] == plaka, 'Durum'] = 'Ara√ß Silindi'
                self.data_manager.save_data('bakimlar', maintenance)
            
            # Yakƒ±t kayƒ±tlarƒ±nƒ± g√ºncelle
            fuel = self.data_manager.load_data('yakitlar')
            if not fuel.empty:
                fuel.loc[fuel['Ara√ß Plakasƒ±'] == plaka, 'Durum'] = 'Ara√ß Silindi'
                self.data_manager.save_data('yakitlar', fuel)
            
            # S√ºr√ºc√º atamalarƒ±nƒ± g√ºncelle
            drivers = self.data_manager.load_data('suruculer')
            if not drivers.empty:
                drivers.loc[drivers['Atanan Ara√ß'] == plaka, 'Atanan Ara√ß'] = ''
                drivers.loc[drivers['Atanan Ara√ß'] == plaka, 'Atama Tarihi'] = ''
                self.data_manager.save_data('suruculer', drivers)
                
        except Exception as e:
            logger.error(f"ƒ∞lgili kayƒ±t g√ºncelleme hatasƒ±: {str(e)}", e)
    
    def load_deleted_vehicles(self):
        """Silinen ara√ßlarƒ± y√ºkle"""
        try:
            print("üîç Silinen ara√ßlar y√ºkleniyor...")
            deleted_vehicles = self.data_manager.load_data('silinen_araclar')
            print(f"üìä Y√ºklenen kayƒ±t sayƒ±sƒ±: {len(deleted_vehicles)}")
            
            # Filtreleri uygula
            start_date = self.deleted_start_date.date().toPyDate()
            end_date = self.deleted_end_date.date().toPyDate()
            selected_reason = self.deleted_reason_filter.currentText()
            
            print(f"üìÖ Tarih aralƒ±ƒüƒ±: {start_date} - {end_date}")
            print(f"üè∑Ô∏è Se√ßilen sebep: {selected_reason}")
            
            if not deleted_vehicles.empty:
                # Tarih filtresi - G√ºvenli tarih d√∂n√º≈ü√ºm√º
                try:
                    # Silme Tarihi s√ºtununu datetime'a √ßevir
                    deleted_vehicles['Silme Tarihi'] = pd.to_datetime(deleted_vehicles['Silme Tarihi'], errors='coerce')
                    
                    # Ge√ßerli tarihleri filtrele
                    valid_dates = deleted_vehicles['Silme Tarihi'].notna()
                    deleted_vehicles = deleted_vehicles[valid_dates]
                    
                    # Tarih aralƒ±ƒüƒ± filtresi
                    if not deleted_vehicles.empty:
                        deleted_vehicles = deleted_vehicles[
                            (deleted_vehicles['Silme Tarihi'].dt.date >= start_date) &
                            (deleted_vehicles['Silme Tarihi'].dt.date <= end_date)
                        ]
                except Exception as date_error:
                    logger.error(f"Tarih filtreleme hatasƒ±: {str(date_error)}")
                    # Tarih filtresi olmadan devam et
                
                # Sebep filtresi
                if selected_reason != "T√ºm√º":
                    deleted_vehicles = deleted_vehicles[
                        deleted_vehicles['Silme Sebebi'] == selected_reason
                    ]
            
            # Tablo s√ºtunlarƒ±
            columns = [
                "Plaka", "Marka", "Model", "Yƒ±l", "Son KM", 
                "Silme Tarihi", "Silme Sebebi", "Silen Kullanƒ±cƒ±"
            ]
            
            print(f"üìã Tablo s√ºtunlarƒ±: {columns}")
            print(f"üìä Filtrelenmi≈ü kayƒ±t sayƒ±sƒ±: {len(deleted_vehicles)}")
            
            self.deleted_model.clear()
            self.deleted_model.setHorizontalHeaderLabels(columns)
            
            for _, vehicle in deleted_vehicles.iterrows():
                row = []
                for col in columns:
                    value = str(vehicle.get(col, ''))
                    # Tarih formatƒ±nƒ± d√ºzenle
                    if col == "Silme Tarihi" and pd.notna(vehicle.get(col, '')):
                        try:
                            date_value = pd.to_datetime(vehicle.get(col, ''))
                            value = date_value.strftime("%d.%m.%Y %H:%M")
                        except:
                            value = str(vehicle.get(col, ''))
                    item = QStandardItem(value)
                    row.append(item)
                self.deleted_model.appendRow(row)
            
        except Exception as e:
            logger.error(f"Silinen ara√ßlar y√ºkleme hatasƒ±: {str(e)}", e)
            # Hata durumunda bo≈ü tablo g√∂ster
            self.deleted_model.clear()
            columns = [
                "Plaka", "Marka", "Model", "Yƒ±l", "Son KM", 
                "Silme Tarihi", "Silme Sebebi", "Silen Kullanƒ±cƒ±"
            ]
            self.deleted_model.setHorizontalHeaderLabels(columns)
    
    def filter_deleted_vehicles(self, text):
        """Silinen ara√ßlarda arama"""
        self.deleted_proxy_model.setFilterWildcard(text)
    
    def restore_vehicle(self):
        """Silinen aracƒ± geri y√ºkle"""
        index = self.deleted_table_view.currentIndex()
        if index.isValid():
            row = self.deleted_proxy_model.mapToSource(index).row()
            plaka = self.deleted_model.item(row, 0).text()
            
            reply = QMessageBox.question(self, "Geri Y√ºkleme Onayƒ±", 
                f"'{plaka}' plakalƒ± aracƒ± geri y√ºklemek istediƒüinizden emin misiniz?",
                QMessageBox.Yes | QMessageBox.No)
            
            if reply == QMessageBox.Yes:
                try:
                    # Silinen ara√ßlar tablosundan al
                    deleted_vehicles = self.data_manager.load_data('silinen_araclar')
                    vehicle_data = deleted_vehicles[deleted_vehicles['Plaka'] == plaka]
                    
                    if not vehicle_data.empty:
                        vehicle_info = vehicle_data.iloc[0].to_dict()
                        
                        # Ana tabloya geri ekle
                        vehicles = self.data_manager.load_data('araclar')
                        
                        restored_vehicle = {
                            'ID': len(vehicles) + 1 if not vehicles.empty else 1,
                            'Plaka': vehicle_info.get('Plaka', ''),
                            'Marka': vehicle_info.get('Marka', ''),
                            'Model': vehicle_info.get('Model', ''),
                            'Yƒ±l': vehicle_info.get('Yƒ±l', ''),
                            '≈ûasi No': vehicle_info.get('≈ûasi No', ''),
                            'Motor No': vehicle_info.get('Motor No', ''),
                            'Ara√ß Tipi': vehicle_info.get('Ara√ß Tipi', ''),
                            'Son KM': vehicle_info.get('Son KM', ''),
                            'Durum': 'Aktif',
                            'Sigorta Biti≈ü': vehicle_info.get('Sigorta Biti≈ü', ''),
                            'Muayene Tarihi': vehicle_info.get('Muayene Tarihi', ''),
                            'Birim': vehicle_info.get('Birim', ''),
                            'Hizmet Ki≈üisi': vehicle_info.get('Hizmet Ki≈üisi', ''),
                            'Fotoƒüraf Yolu': vehicle_info.get('Fotoƒüraf Yolu', ''),
                            'Evrak Yolu': vehicle_info.get('Evrak Yolu', ''),
                            'KM Ge√ßmi≈üi': vehicle_info.get('KM Ge√ßmi≈üi', ''),
                            'Olu≈üturma Tarihi': vehicle_info.get('Olu≈üturma Tarihi', ''),
                            'G√ºncelleme Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        }
                        
                        new_df = pd.DataFrame([restored_vehicle])
                        vehicles = pd.concat([vehicles, new_df], ignore_index=True)
                        self.data_manager.save_data('araclar', vehicles)
                        
                        # Silinen ara√ßlar tablosundan √ßƒ±kar
                        deleted_vehicles = deleted_vehicles[deleted_vehicles['Plaka'] != plaka]
                        self.data_manager.save_data('silinen_araclar', deleted_vehicles)
                        
                        self.load_vehicles()
                        self.load_deleted_vehicles()
                        
                        QMessageBox.information(self, "Ba≈üarƒ±lƒ±", 
                            f"'{plaka}' plakalƒ± ara√ß ba≈üarƒ±yla geri y√ºklendi.")
                    else:
                        QMessageBox.warning(self, "Uyarƒ±", "Ara√ß bulunamadƒ±.")
                        
                except Exception as e:
                    QMessageBox.critical(self, "Hata", f"Ara√ß geri y√ºkleme hatasƒ±: {str(e)}")
        else:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen geri y√ºklenecek aracƒ± se√ßin.")
    
    def export_deleted_vehicles(self):
        """Silinen ara√ßlarƒ± Excel'e aktar"""
        try:
            export_table_to_excel(self.deleted_model, self.deleted_proxy_model, self)
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Export hatasƒ±: {str(e)}")
    
    def generate_deletion_report(self):
        """Silme raporu olu≈ütur"""
        try:
            deleted_vehicles = self.data_manager.load_data('silinen_araclar')
            
            if deleted_vehicles.empty:
                QMessageBox.information(self, "Bilgi", "Silinen ara√ß bulunmuyor.")
                return
            
            # ƒ∞statistikler
            total_deleted = len(deleted_vehicles)
            reasons = deleted_vehicles['Silme Sebebi'].value_counts()
            
            # Rapor i√ßeriƒüi
            report_content = f"""
Sƒ∞Lƒ∞NEN ARA√áLAR RAPORU
========================

Toplam Silinen Ara√ß: {total_deleted}

Sƒ∞LME SEBEPLERƒ∞:
"""
            
            for reason, count in reasons.items():
                percentage = (count / total_deleted) * 100
                report_content += f"‚Ä¢ {reason}: {count} ara√ß (%{percentage:.1f})\n"
            
            report_content += f"""

DETAYLI Lƒ∞STE:
"""
            
            for _, vehicle in deleted_vehicles.iterrows():
                report_content += f"""
Plaka: {vehicle.get('Plaka', '')}
Marka/Model: {vehicle.get('Marka', '')} {vehicle.get('Model', '')}
Silme Tarihi: {vehicle.get('Silme Tarihi', '')}
Silme Sebebi: {vehicle.get('Silme Sebebi', '')}
Son KM: {vehicle.get('Son KM', '')}
---
"""
            
            # Rapor dialog'u
            self.show_deletion_report_dialog(report_content)
            
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Rapor olu≈üturma hatasƒ±: {str(e)}")
    
    def show_deletion_report_dialog(self, content):
        """Silme raporu dialog'u"""
        dialog = QDialog(self)
        dialog.setWindowTitle("Silinen Ara√ßlar Raporu")
        dialog.setMinimumSize(600, 400)
        dialog.setModal(True)
        
        layout = QVBoxLayout(dialog)
        
        # Rapor i√ßeriƒüi
        text_edit = QTextEdit()
        text_edit.setPlainText(content)
        text_edit.setReadOnly(True)
        layout.addWidget(text_edit)
        
        # Butonlar
        btn_layout = QHBoxLayout()
        
        btn_save = QPushButton("üíæ Kaydet")
        btn_save.clicked.connect(lambda: self.save_deletion_report(content))
        
        btn_close = QPushButton("‚ùå Kapat")
        btn_close.clicked.connect(dialog.accept)
        
        btn_layout.addWidget(btn_save)
        btn_layout.addWidget(btn_close)
        layout.addLayout(btn_layout)
        
        dialog.exec_()
    
    def save_deletion_report(self, content):
        """Silme raporunu kaydet"""
        try:
            file_path, _ = QFileDialog.getSaveFileName(
                self, "Raporu Kaydet", "", "Metin Dosyasƒ± (*.txt)")
            
            if file_path:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                QMessageBox.information(self, "Ba≈üarƒ±lƒ±", "Rapor ba≈üarƒ±yla kaydedildi.")
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Rapor kaydetme hatasƒ±: {str(e)}")

class VehicleDeletionDialog(QDialog):
    """Ara√ß silme dialog'u"""
    
    def __init__(self, parent=None, plaka=""):
        super().__init__(parent)
        self.plaka = plaka
        self.deletion_reason = ""
        self.deletion_notes = ""
        self.init_ui()
    
    def init_ui(self):
        self.setWindowTitle("Ara√ß Silme Onayƒ±")
        self.setFixedSize(500, 400)
        self.setModal(True)
        
        layout = QVBoxLayout(self)
        layout.setSpacing(20)
        
        # Uyarƒ± mesajƒ±
        warning_label = QLabel("‚ö†Ô∏è Dƒ∞KKAT: Bu i≈ülem geri alƒ±namaz!")
        warning_label.setStyleSheet("""
            QLabel {
            color: #e74c3c;
                font-size: 16px;
                font-weight: bold;
                padding: 10px;
                background-color: #fdf2f2;
                border: 2px solid #e74c3c;
                border-radius: 5px;
            }
        """)
        warning_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(warning_label)
        
        # Ara√ß bilgileri
        vehicle_info = QLabel(f"Silinecek Ara√ß: {self.plaka}")
        vehicle_info.setStyleSheet("font-size: 14px; font-weight: bold; color: #2c3e50;")
        vehicle_info.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(vehicle_info)
        
        # Silme sebebi
        reason_group = QGroupBox("Silme Sebebi")
        reason_layout = QVBoxLayout(reason_group)
        
        self.reason_combo = QComboBox()
        self.reason_combo.addItems([
            "Hurda",
            "Satƒ±≈ü", 
            "Kaza",
            "Deƒüi≈üim",
            "Devir",
            "Diƒüer"
        ])
        self.reason_combo.currentTextChanged.connect(self.on_reason_changed)
        reason_layout.addWidget(self.reason_combo)
        
        layout.addWidget(reason_group)
        
        # A√ßƒ±klama
        notes_group = QGroupBox("A√ßƒ±klama (Opsiyonel)")
        notes_layout = QVBoxLayout(notes_group)
        
        self.notes_text = QTextEdit()
        self.notes_text.setPlaceholderText("Silme sebebi hakkƒ±nda detaylƒ± a√ßƒ±klama yazabilirsiniz...")
        self.notes_text.setMaximumHeight(100)
        notes_layout.addWidget(self.notes_text)
        
        layout.addWidget(notes_group)
        
        # Onay checkbox'ƒ±
        self.confirm_checkbox = QCheckBox("Bu i≈ülemi ger√ßekle≈ütirmek istediƒüimi onaylƒ±yorum")
        self.confirm_checkbox.setStyleSheet("font-weight: bold; color: #e74c3c;")
        layout.addWidget(self.confirm_checkbox)
        
        # Butonlar
        btn_layout = QHBoxLayout()
        
        btn_delete = QPushButton("üóëÔ∏è Sil")
        btn_delete.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
                color: #7f8c8d;
            }
        """)
        btn_delete.clicked.connect(self.accept)
        btn_delete.setEnabled(False)
        self.confirm_checkbox.toggled.connect(btn_delete.setEnabled)
        
        btn_cancel = QPushButton("‚ùå ƒ∞ptal")
        btn_cancel.setStyleSheet("""
            QPushButton {
                background-color: #95a5a6;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #7f8c8d;
            }
        """)
        btn_cancel.clicked.connect(self.reject)
        
        btn_layout.addWidget(btn_delete)
        btn_layout.addWidget(btn_cancel)
        layout.addLayout(btn_layout)
    
    def on_reason_changed(self, reason):
        """Silme sebebi deƒüi≈ütiƒüinde"""
        self.deletion_reason = reason
    
    def get_deletion_reason(self):
        """Silme sebebini d√∂nd√ºr"""
        return self.deletion_reason
    
    def get_deletion_notes(self):
        """Silme notlarƒ±nƒ± d√∂nd√ºr"""
        return self.notes_text.toPlainText()

class VehicleDialog(QDialog):
    """Ara√ß ekleme/d√ºzenleme dialog"""
    
    def __init__(self, parent=None, vehicle_data=None):
        super().__init__(parent)
        self.vehicle_data = vehicle_data
        self.data_manager = parent.data_manager if parent else DataManager()
        self.selected_photo_path = None
        self.init_ui()
        if vehicle_data:
            self.load_vehicle_data(vehicle_data)
    
    def init_ui(self):
        self.setWindowTitle("Ara√ß Ekle" if not self.vehicle_data else "Ara√ß D√ºzenle")
        self.setMinimumWidth(500)
        self.setModal(True)
        
        layout = QFormLayout(self)
        layout.setSpacing(15)
        
        # Form alanlarƒ±
        self.plaka = QLineEdit()
        self.marka = QLineEdit()
        self.model = QLineEdit()
        self.yil = QLineEdit()
        self.sasi = QLineEdit()
        self.ruhsat_seri_no = QLineEdit()
        self.ruhsat_seri_no.setPlaceholderText("Ruhsat Seri Numarasƒ±")
        
        self.yakit_tipi = QComboBox()
        self.yakit_tipi.addItems(["Benzin", "Dizel", "LPG", "Elektrik", "Hibrit", "Diƒüer"])
        
        self.arac_tipi = QComboBox()
        self.arac_tipi.addItems(["Binek", "SUV", "Elektrikli", "Minib√ºs", "Pick-up", "Ticari", "Diƒüer"])
        
        self.son_km = QLineEdit()
        
        self.durum = QComboBox()
        self.durum.addItems(["Aktif", "Pasif", "Hurda", "Satƒ±ldƒ±"])
        
        self.sigorta = QDateEdit()
        self.sigorta.setCalendarPopup(True)
        self.sigorta.setDate(QDate.currentDate())
        
        self.kasko_var = QComboBox()
        self.kasko_var.addItems(["Yok", "Var"])
        
        self.kasko = QDateEdit()
        self.kasko.setCalendarPopup(True)
        self.kasko.setDate(QDate.currentDate())
        self.kasko.setEnabled(False)
        self.kasko_var.currentTextChanged.connect(self.kasko_durum_kontrol)
        
        # Kasko se√ßimi i√ßin a√ßƒ±klama
        kasko_info = QLabel("Kasko sigortasƒ± var mƒ±? Varsa tarih girin.")
        kasko_info.setStyleSheet("color: #7f8c8d; font-size: 11px; font-style: italic;")
        
        self.muayene = QDateEdit()
        self.muayene.setCalendarPopup(True)
        self.muayene.setDate(QDate.currentDate())
        
        # Birim ve hizmet bilgileri
        self.birim = QLineEdit()
        self.birim.setPlaceholderText("√ñrn: ƒ∞dari ƒ∞≈üler, Teknik Servis, G√ºvenlik")
        
        self.hizmet_kisi = QLineEdit()
        self.hizmet_kisi.setPlaceholderText("√ñrn: Ahmet Yƒ±lmaz, Mehmet Demir")
        
        # Fotoƒüraf b√∂l√ºm√º
        photo_group = QGroupBox("üì∏ Ara√ß Fotoƒürafƒ±")
        photo_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #3498db;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
            }
        """)
        
        photo_layout = QVBoxLayout(photo_group)
        
        # Fotoƒüraf g√∂r√ºnt√ºleme alanƒ±
        self.photo_label = QLabel()
        self.photo_label.setMinimumSize(200, 150)
        self.photo_label.setMaximumSize(300, 200)
        self.photo_label.setStyleSheet("""
            QLabel {
                border: 2px dashed #bdc3c7;
                border-radius: 5px;
                background-color: #f8f9fa;
            }
        """)
        self.photo_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.photo_label.setText("Fotoƒüraf se√ßilmedi\n\nüì∑ Fotoƒüraf eklemek i√ßin tƒ±klayƒ±n")
        
        # Fotoƒüraf se√ßme butonu
        btn_photo_layout = QHBoxLayout()
        btn_select_photo = QPushButton("üì∑ Fotoƒüraf Se√ß")
        btn_select_photo.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 8px 15px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        btn_select_photo.clicked.connect(self.select_photo)
        
        btn_clear_photo = QPushButton("üóëÔ∏è Temizle")
        btn_clear_photo.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 8px 15px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
        """)
        btn_clear_photo.clicked.connect(self.clear_photo)
        
        btn_photo_layout.addWidget(btn_select_photo)
        btn_photo_layout.addWidget(btn_clear_photo)
        
        photo_layout.addWidget(self.photo_label)
        photo_layout.addLayout(btn_photo_layout)
        
        # Form'a ekle
        layout.addRow("Plaka:", self.plaka)
        layout.addRow("Marka:", self.marka)
        layout.addRow("Model:", self.model)
        layout.addRow("Yƒ±l:", self.yil)
        layout.addRow("≈ûasi No:", self.sasi)
        layout.addRow("Ruhsat Seri No:", self.ruhsat_seri_no)
        layout.addRow("Yakƒ±t Tipi:", self.yakit_tipi)
        layout.addRow("Ara√ß Tipi:", self.arac_tipi)
        layout.addRow("Son KM:", self.son_km)
        layout.addRow("Durum:", self.durum)
        layout.addRow("Sigorta Biti≈ü:", self.sigorta)
        layout.addRow("Kasko Var mƒ±?:", self.kasko_var)
        layout.addRow("", kasko_info)  # A√ßƒ±klama satƒ±rƒ±
        layout.addRow("Kasko Biti≈ü:", self.kasko)
        layout.addRow("Muayene Tarihi:", self.muayene)
        layout.addRow("Birim:", self.birim)
        layout.addRow("Hizmet Ki≈üisi:", self.hizmet_kisi)
        layout.addRow(photo_group)
        
        # Butonlar
        btn_layout = QHBoxLayout()
        btn_save = QPushButton("Kaydet")
        btn_save.clicked.connect(self.save_vehicle)
        btn_cancel = QPushButton("ƒ∞ptal")
        btn_cancel.clicked.connect(self.reject)
        
        btn_layout.addWidget(btn_save)
        btn_layout.addWidget(btn_cancel)
        layout.addRow(btn_layout)
    
    def kasko_durum_kontrol(self, text):
        """Kasko durum kontrol√º"""
        self.kasko.setEnabled(text == "Var")
    
    def select_photo(self):
        """Fotoƒüraf se√ß"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, "Ara√ß Fotoƒürafƒ± Se√ß", "", 
            "Resim Dosyalarƒ± (*.jpg *.jpeg *.png *.bmp *.gif);;T√ºm Dosyalar (*)"
        )
        
        if file_path:
            try:
                # Fotoƒürafƒ± y√ºkle ve boyutlandƒ±r
                pixmap = QPixmap(file_path)
                if not pixmap.isNull():
                    # Fotoƒürafƒ± label boyutuna sƒ±ƒüdƒ±r
                    scaled_pixmap = pixmap.scaled(
                        self.photo_label.size(), 
                        Qt.AspectRatioMode.KeepAspectRatio, 
                        Qt.TransformationMode.SmoothTransformation
                    )
                    self.photo_label.setPixmap(scaled_pixmap)
                    self.photo_label.setStyleSheet("""
                        QLabel {
                            border: 2px solid #27ae60;
                            border-radius: 5px;
                            background-color: white;
                        }
                    """)
                    # Fotoƒüraf yolunu sakla
                    self.selected_photo_path = file_path
                else:
                    QMessageBox.warning(self, "Hata", "Fotoƒüraf y√ºklenemedi.")
            except Exception as e:
                QMessageBox.critical(self, "Hata", f"Fotoƒüraf y√ºkleme hatasƒ±: {str(e)}")
    
    def clear_photo(self):
        """Fotoƒürafƒ± temizle"""
        self.photo_label.clear()
        self.photo_label.setText("Fotoƒüraf se√ßilmedi\n\nüì∑ Fotoƒüraf eklemek i√ßin tƒ±klayƒ±n")
        self.photo_label.setStyleSheet("""
            QLabel {
                border: 2px dashed #bdc3c7;
                border-radius: 5px;
                background-color: #f8f9fa;
            }
        """)
        self.selected_photo_path = None
    
    def load_vehicle_data(self, vehicle_data):
        """Ara√ß verilerini y√ºkle"""
        self.plaka.setText(str(vehicle_data.get('Plaka', '')))
        self.marka.setText(str(vehicle_data.get('Marka', '')))
        self.model.setText(str(vehicle_data.get('Model', '')))
        self.yil.setText(str(vehicle_data.get('Yƒ±l', '')))
        self.sasi.setText(str(vehicle_data.get('≈ûasi No', '')))
        self.ruhsat_seri_no.setText(str(vehicle_data.get('Ruhsat Seri No', '')))
        self.yakit_tipi.setCurrentText(str(vehicle_data.get('Yakƒ±t Tipi', 'Benzin')))
        self.arac_tipi.setCurrentText(str(vehicle_data.get('Ara√ß Tipi', 'Binek')))
        self.son_km.setText(str(vehicle_data.get('Son KM', '')))
        self.durum.setCurrentText(str(vehicle_data.get('Durum', 'Aktif')))
        
        # Tarihleri y√ºkle
        try:
            sigorta_date = QDate.fromString(str(vehicle_data.get('Sigorta Biti≈ü', '')), "dd.MM.yyyy")
            if sigorta_date.isValid():
                self.sigorta.setDate(sigorta_date)
        except:
            pass
        
        self.kasko_var.setCurrentText(str(vehicle_data.get('Kasko Var mƒ±?', 'Yok')))
        
        try:
            kasko_date = QDate.fromString(str(vehicle_data.get('Kasko Biti≈ü', '')), "dd.MM.yyyy")
            if kasko_date.isValid():
                self.kasko.setDate(kasko_date)
        except:
            pass
        
        try:
            muayene_date = QDate.fromString(str(vehicle_data.get('Muayene Tarihi', '')), "dd.MM.yyyy")
            if muayene_date.isValid():
                self.muayene.setDate(muayene_date)
        except:
            pass
        
        # Birim ve hizmet bilgilerini y√ºkle
        self.birim.setText(str(vehicle_data.get('Birim', '')))
        self.hizmet_kisi.setText(str(vehicle_data.get('Hizmet Ki≈üisi', '')))
        
        # Fotoƒürafƒ± y√ºkle
        photo_path = vehicle_data.get('Fotoƒüraf Yolu', '')
        plaka = vehicle_data.get('Plaka', '').strip()
        
        # √ñnce veri tabanƒ±ndaki fotoƒüraf yolunu kontrol et
        if isinstance(photo_path, str) and photo_path and os.path.exists(photo_path):
            try:
                pixmap = QPixmap(photo_path)
                if not pixmap.isNull():
                    scaled_pixmap = pixmap.scaled(
                        self.photo_label.size(), 
                        Qt.AspectRatioMode.KeepAspectRatio, 
                        Qt.TransformationMode.SmoothTransformation
                    )
                    self.photo_label.setPixmap(scaled_pixmap)
                    self.photo_label.setStyleSheet("""
                        QLabel {
                            border: 2px solid #27ae60;
                            border-radius: 5px;
                            background-color: white;
                        }
                    """)
                    self.selected_photo_path = photo_path
                    return
            except Exception as e:
                print(f"Fotoƒüraf y√ºkleme hatasƒ±: {e}")
        
        # Veri tabanƒ±nda fotoƒüraf yolu yoksa, plaka ile e≈üle≈üen dosyayƒ± ara
        if plaka:
            photo_dir = "veri/arac_fotograflari"
            possible_extensions = ['.png', '.jpg', '.jpeg']
            
            for ext in possible_extensions:
                possible_path = os.path.join(photo_dir, f"{plaka}{ext}")
                if os.path.exists(possible_path):
                    try:
                        pixmap = QPixmap(possible_path)
                        if not pixmap.isNull():
                            scaled_pixmap = pixmap.scaled(
                                self.photo_label.size(), 
                                Qt.AspectRatioMode.KeepAspectRatio, 
                                Qt.TransformationMode.SmoothTransformation
                            )
                            self.photo_label.setPixmap(scaled_pixmap)
                            self.photo_label.setStyleSheet("""
                                QLabel {
                                    border: 2px solid #27ae60;
                                    border-radius: 5px;
                                    background-color: white;
                                }
                            """)
                            self.selected_photo_path = possible_path
                            return
                    except Exception as e:
                        print(f"Otomatik fotoƒüraf y√ºkleme hatasƒ±: {e}")
        
        # Hi√ßbir fotoƒüraf bulunamazsa varsayƒ±lan g√∂r√ºn√ºm√º g√∂ster
        self.photo_label.clear()
        self.photo_label.setText("Fotoƒüraf se√ßilmedi\n\nüì∑ Fotoƒüraf eklemek i√ßin tƒ±klayƒ±n")
        self.photo_label.setStyleSheet("""
            QLabel {
                border: 2px dashed #bdc3c7;
                border-radius: 5px;
                background-color: #f8f9fa;
            }
        """)
        self.selected_photo_path = None
    
    def save_vehicle(self):
        """Ara√ß kaydet"""
        if not self.plaka.text().strip():
            QMessageBox.warning(self, "Uyarƒ±", "Plaka alanƒ± zorunludur.")
            return

        # Fotoƒüraf yolu belirleme
        foto_path = ""
        if self.selected_photo_path:  # Kullanƒ±cƒ± yeni fotoƒüraf se√ßtiyse
            foto_path = save_vehicle_photo(self.selected_photo_path, self.plaka.text().strip())
        elif self.vehicle_data and self.vehicle_data.get('Fotoƒüraf Yolu', ''):
            foto_path = self.vehicle_data.get('Fotoƒüraf Yolu', '')
        else:
            foto_path = ""

        try:
            vehicles = self.data_manager.load_data('araclar')
            
            # Yeni ara√ß verisi
            new_vehicle = {
                'ID': len(vehicles) + 1 if not vehicles.empty else 1,
                'Plaka': self.plaka.text().strip(),
                'Marka': self.marka.text().strip(),
                'Model': self.model.text().strip(),
                'Yƒ±l': self.yil.text().strip(),
                '≈ûasi No': self.sasi.text().strip(),
                'Ruhsat Seri No': self.ruhsat_seri_no.text().strip(),
                'Yakƒ±t Tipi': self.yakit_tipi.currentText(),
                'Ara√ß Tipi': self.arac_tipi.currentText(),
                'Son KM': self.son_km.text().strip(),
                'Durum': self.durum.currentText(),
                'Sigorta Biti≈ü': self.sigorta.date().toString("dd.MM.yyyy"),
                'Kasko Var mƒ±?': self.kasko_var.currentText(),
                'Kasko Biti≈ü': self.kasko.date().toString("dd.MM.yyyy") if self.kasko_var.currentText() == "Var" else "",
                'Muayene Tarihi': self.muayene.date().toString("dd.MM.yyyy"),
                'Birim': self.birim.text().strip(),
                'Hizmet Ki≈üisi': self.hizmet_kisi.text().strip(),
                'Fotoƒüraf Yolu': foto_path,
                'Evrak Yolu': "",
                'KM Ge√ßmi≈üi': "",
                'Olu≈üturma Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'G√ºncelleme Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            if self.vehicle_data:
                # D√ºzenleme modu
                vehicles = vehicles[vehicles['Plaka'] != self.vehicle_data['Plaka']]
            
            # Yeni veriyi ekle
            new_df = pd.DataFrame([new_vehicle])
            vehicles = pd.concat([vehicles, new_df], ignore_index=True)
            
            # Kaydet
            if self.data_manager.save_data('araclar', vehicles):
                # --- Kasko/Muayene/Sigorta giderlerini otomatik ekle ---
                giderler = self.data_manager.load_data('giderler')
                plaka = self.plaka.text().strip()
                # Sigorta
                sigorta_bitis = self.sigorta.date().toString("dd.MM.yyyy")
                if sigorta_bitis:
                    mevcut = giderler[(giderler['Ara√ß Plakasƒ±'] == plaka) & (giderler['Gider T√ºr√º'] == 'Sigorta') & (giderler['Biti≈ü'] == sigorta_bitis)]
                    if mevcut.empty:
                        yeni = {'Ara√ß Plakasƒ±': plaka, 'Gider T√ºr√º': 'Sigorta', 'Ba≈ülangƒ±√ß': '', 'Biti≈ü': sigorta_bitis, '≈ûirket': '', 'Tutar': ''}
                        giderler = pd.concat([giderler, pd.DataFrame([yeni])], ignore_index=True)
                # Kasko
                if self.kasko_var.currentText() == 'Var':
                    kasko_bitis = self.kasko.date().toString("dd.MM.yyyy")
                    if kasko_bitis:
                        mevcut = giderler[(giderler['Ara√ß Plakasƒ±'] == plaka) & (giderler['Gider T√ºr√º'] == 'Kasko') & (giderler['Biti≈ü'] == kasko_bitis)]
                        if mevcut.empty:
                            yeni = {'Ara√ß Plakasƒ±': plaka, 'Gider T√ºr√º': 'Kasko', 'Ba≈ülangƒ±√ß': '', 'Biti≈ü': kasko_bitis, '≈ûirket': '', 'Tutar': ''}
                            giderler = pd.concat([giderler, pd.DataFrame([yeni])], ignore_index=True)
                # Muayene
                muayene_bitis = self.muayene.date().toString("dd.MM.yyyy")
                if muayene_bitis:
                    mevcut = giderler[(giderler['Ara√ß Plakasƒ±'] == plaka) & (giderler['Gider T√ºr√º'] == 'Muayene') & (giderler['Biti≈ü'] == muayene_bitis)]
                    if mevcut.empty:
                        yeni = {'Ara√ß Plakasƒ±': plaka, 'Gider T√ºr√º': 'Muayene', 'Ba≈ülangƒ±√ß': '', 'Biti≈ü': muayene_bitis, '≈ûirket': '', 'Tutar': ''}
                        giderler = pd.concat([giderler, pd.DataFrame([yeni])], ignore_index=True)
                self.data_manager.save_data('giderler', giderler)
                # --- Son ---
                QMessageBox.information(self, "Ba≈üarƒ±lƒ±", 
                    "Ara√ß g√ºncellendi." if self.vehicle_data else "Ara√ß eklendi.")
                self.accept()
            else:
                QMessageBox.critical(self, "Hata", "Kaydetme hatasƒ±.")
                
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Kaydetme hatasƒ±: {str(e)}")

class DriversPanel(QWidget):
    def __init__(self, data_manager):
        super().__init__()
        self.data_manager = data_manager
        self.init_ui()
        self.load_drivers()
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)
        
        # Ba≈ülƒ±k ve butonlar
        header_layout = QHBoxLayout()
        
        title = QLabel("S√ºr√ºc√º Y√∂netimi")
        title.setStyleSheet("font-size: 24px; font-weight: bold; color: #2c3e50;")
        header_layout.addWidget(title)
        
        header_layout.addStretch()
        
        # Butonlar
        btn_add = QPushButton("‚ûï S√ºr√ºc√º Ekle")
        btn_add.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        btn_add.clicked.connect(self.add_driver)
        
        btn_edit = QPushButton("‚úèÔ∏è D√ºzenle")
        btn_edit.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        btn_edit.clicked.connect(self.edit_driver)
        
        btn_delete = QPushButton("üóëÔ∏è Sil")
        btn_delete.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
        """)
        btn_delete.clicked.connect(self.delete_driver)
        
        header_layout.addWidget(btn_add)
        header_layout.addWidget(btn_edit)
        header_layout.addWidget(btn_delete)
        
        layout.addLayout(header_layout)
        
        # Tablo
        self.drivers_table = QTableWidget()
        self.drivers_table.setColumnCount(7)
        self.drivers_table.setHorizontalHeaderLabels([
            "Ad Soyad", "TC Kimlik", "Telefon", "Ehliyet Sƒ±nƒ±fƒ±", 
            "Ehliyet Tarihi", "Atanan Ara√ß", "Durum"
        ])
        self.drivers_table.horizontalHeader().setStretchLastSection(True)
        self.drivers_table.setAlternatingRowColors(True)
        self.drivers_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.drivers_table.setSelectionMode(QAbstractItemView.SingleSelection)
        
        # Satƒ±r numaralarƒ±nƒ± gizle
        self.drivers_table.verticalHeader().setVisible(False)
        
        layout.addWidget(self.drivers_table)
    
    def load_drivers(self):
        """S√ºr√ºc√ºleri y√ºkle"""
        try:
            drivers = self.data_manager.load_data('suruculer')
            self.drivers_table.setRowCount(0)  # √ñnce tabloyu temizle
            self.drivers_table.setRowCount(len(drivers))
            
            for row, (_, driver) in enumerate(drivers.iterrows()):
                self.drivers_table.setItem(row, 0, QTableWidgetItem(str(driver.get('Ad Soyad', ''))))
                self.drivers_table.setItem(row, 1, QTableWidgetItem(str(driver.get('TC Kimlik', ''))))
                self.drivers_table.setItem(row, 2, QTableWidgetItem(str(driver.get('Telefon', ''))))
                self.drivers_table.setItem(row, 3, QTableWidgetItem(str(driver.get('Ehliyet Sƒ±nƒ±fƒ±', ''))))
                self.drivers_table.setItem(row, 4, QTableWidgetItem(str(driver.get('Ehliyet Tarihi', ''))))
                self.drivers_table.setItem(row, 5, QTableWidgetItem(str(driver.get('Atanan Ara√ß', ''))))
                self.drivers_table.setItem(row, 6, QTableWidgetItem(str(driver.get('Durum', ''))))
        except Exception as e:
            print(f"S√ºr√ºc√º y√ºkleme hatasƒ±: {e}")
    
    def add_driver(self):
        """S√ºr√ºc√º ekle"""
        dialog = DriverDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            self.load_drivers()
    
    def edit_driver(self):
        """S√ºr√ºc√º d√ºzenle"""
        current_row = self.drivers_table.currentRow()
        if current_row >= 0:
            tc_kimlik = self.drivers_table.item(current_row, 1).text()
            drivers = self.data_manager.load_data('suruculer')
            driver = drivers[drivers['TC Kimlik'] == tc_kimlik]
            if not driver.empty:
                dialog = DriverDialog(self, driver.iloc[0].to_dict())
                if dialog.exec_() == QDialog.Accepted:
                    self.load_drivers()
        else:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen d√ºzenlenecek s√ºr√ºc√ºy√º se√ßin.")
    
    def delete_driver(self):
        """S√ºr√ºc√º sil"""
        current_row = self.drivers_table.currentRow()
        if current_row >= 0:
            tc_kimlik = self.drivers_table.item(current_row, 1).text()
            ad_soyad = self.drivers_table.item(current_row, 0).text()
            reply = QMessageBox.question(self, "Onay", 
                f"'{ad_soyad}' isimli s√ºr√ºc√ºy√º silmek istediƒüinizden emin misiniz?",
                QMessageBox.Yes | QMessageBox.No)
            
            if reply == QMessageBox.Yes:
                try:
                    drivers = self.data_manager.load_data('suruculer')
                    drivers = drivers[drivers['TC Kimlik'].astype(str) != str(tc_kimlik)]
                    success = self.data_manager.save_data('suruculer', drivers)
                    if success:
                        self.load_drivers()
                        QMessageBox.information(self, "Ba≈üarƒ±lƒ±", "S√ºr√ºc√º silindi.")
                    else:
                        QMessageBox.critical(self, "Hata", "Dosya kaydedilemedi! (Excel dosyasƒ± a√ßƒ±k olabilir veya ba≈üka bir hata olu≈ütu.)")
                except Exception as e:
                    QMessageBox.critical(self, "Hata", f"S√ºr√ºc√º silme hatasƒ±: {str(e)}")
        else:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen silinecek s√ºr√ºc√ºy√º se√ßin.")

class DriverDialog(QDialog):
    """S√ºr√ºc√º ekleme/d√ºzenleme dialog"""
    
    def __init__(self, parent=None, driver_data=None):
        super().__init__(parent)
        self.driver_data = driver_data
        self.data_manager = parent.data_manager if parent else DataManager()
        self.init_ui()
        if driver_data:
            self.load_driver_data(driver_data)
    
    def init_ui(self):
        self.setWindowTitle("S√ºr√ºc√º Ekle" if not self.driver_data else "S√ºr√ºc√º D√ºzenle")
        self.setMinimumWidth(500)
        self.setModal(True)
        
        layout = QFormLayout(self)
        layout.setSpacing(15)
        
        # Form alanlarƒ±
        self.ad_soyad = QLineEdit()
        self.tc_kimlik = QLineEdit()
        self.telefon = QLineEdit()
        
        self.ehliyet_sinifi = QComboBox()
        self.ehliyet_sinifi.addItems(["B", "C", "D", "E", "F", "G", "H"])
        
        self.ehliyet_tarihi = QDateEdit()
        self.ehliyet_tarihi.setCalendarPopup(True)
        self.ehliyet_tarihi.setDate(QDate.currentDate())
        
        self.atanan_arac = QComboBox()
        self.load_available_vehicles()
        
        self.durum = QComboBox()
        self.durum.addItems(["Aktif", "Pasif", "ƒ∞zinli", "ƒ∞≈üten Ayrƒ±ldƒ±"])
        
        # Form'a ekle
        layout.addRow("Ad Soyad:", self.ad_soyad)
        layout.addRow("TC Kimlik:", self.tc_kimlik)
        layout.addRow("Telefon:", self.telefon)
        layout.addRow("Ehliyet Sƒ±nƒ±fƒ±:", self.ehliyet_sinifi)
        layout.addRow("Ehliyet Tarihi:", self.ehliyet_tarihi)
        layout.addRow("Atanan Ara√ß:", self.atanan_arac)
        layout.addRow("Durum:", self.durum)
        
        # Butonlar
        btn_layout = QHBoxLayout()
        btn_save = QPushButton("Kaydet")
        btn_save.clicked.connect(self.save_driver)
        btn_cancel = QPushButton("ƒ∞ptal")
        btn_cancel.clicked.connect(self.reject)
        
        btn_layout.addWidget(btn_save)
        btn_layout.addWidget(btn_cancel)
        layout.addRow(btn_layout)
    
    def load_available_vehicles(self):
        """Mevcut ara√ßlarƒ± y√ºkle"""
        try:
            vehicles = self.data_manager.load_data('araclar')
            self.atanan_arac.clear()
            self.atanan_arac.addItem("Atanmamƒ±≈ü")
            
            if not vehicles.empty:
                for _, vehicle in vehicles.iterrows():
                    if vehicle.get('Durum') == 'Aktif':
                        plaka = vehicle.get('Plaka', '')
                        marka = vehicle.get('Marka', '')
                        model = vehicle.get('Model', '')
                        self.atanan_arac.addItem(f"{plaka} - {marka} {model}")
        except Exception as e:
            print(f"Ara√ß y√ºkleme hatasƒ±: {e}")
    
    def load_driver_data(self, driver_data):
        """S√ºr√ºc√º verilerini y√ºkle"""
        self.ad_soyad.setText(str(driver_data.get('Ad Soyad', '')))
        self.tc_kimlik.setText(str(driver_data.get('TC Kimlik', '')))
        self.telefon.setText(str(driver_data.get('Telefon', '')))
        self.ehliyet_sinifi.setCurrentText(str(driver_data.get('Ehliyet Sƒ±nƒ±fƒ±', 'B')))
        
        # Tarihleri y√ºkle
        try:
            ehliyet_date = QDate.fromString(str(driver_data.get('Ehliyet Tarihi', '')), "dd.MM.yyyy")
            if ehliyet_date.isValid():
                self.ehliyet_tarihi.setDate(ehliyet_date)
        except:
            pass
        
        self.atanan_arac.setCurrentText(str(driver_data.get('Atanan Ara√ß', 'Atanmamƒ±≈ü')))
        self.durum.setCurrentText(str(driver_data.get('Durum', 'Aktif')))
    
    def save_driver(self):
        """S√ºr√ºc√º kaydet"""
        if not self.ad_soyad.text().strip():
            QMessageBox.warning(self, "Uyarƒ±", "Ad Soyad alanƒ± zorunludur.")
            return
        
        if not self.tc_kimlik.text().strip():
            QMessageBox.warning(self, "Uyarƒ±", "TC Kimlik alanƒ± zorunludur.")
            return
        
        try:
            drivers = self.data_manager.load_data('suruculer')
            
            # Yeni s√ºr√ºc√º verisi
            new_driver = {
                'ID': len(drivers) + 1 if not drivers.empty else 1,
                'Ad Soyad': self.ad_soyad.text().strip(),
                'TC Kimlik': self.tc_kimlik.text().strip(),
                'Telefon': self.telefon.text().strip(),
                'Ehliyet Sƒ±nƒ±fƒ±': self.ehliyet_sinifi.currentText(),
                'Ehliyet Tarihi': self.ehliyet_tarihi.date().toString("dd.MM.yyyy"),
                'Atanan Ara√ß': self.atanan_arac.currentText(),
                'Atama Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'Durum': self.durum.currentText(),
                'Olu≈üturma Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'G√ºncelleme Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            if self.driver_data:
                # D√ºzenleme modu
                drivers = drivers[drivers['TC Kimlik'] != self.driver_data['TC Kimlik']]
            
            # Yeni veriyi ekle
            new_df = pd.DataFrame([new_driver])
            drivers = pd.concat([drivers, new_df], ignore_index=True)
            
            # Kaydet
            if self.data_manager.save_data('suruculer', drivers):
                QMessageBox.information(self, "Ba≈üarƒ±lƒ±", 
                    "S√ºr√ºc√º g√ºncellendi." if self.driver_data else "S√ºr√ºc√º eklendi.")
                self.accept()
            else:
                QMessageBox.critical(self, "Hata", "Kaydetme hatasƒ±.")
                
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Kaydetme hatasƒ±: {str(e)}")

class MaintenancePanel(QWidget):
    def __init__(self, data_manager):
        super().__init__()
        self.data_manager = data_manager
        self.init_ui()
        self.load_maintenance()
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)
        header_layout = QHBoxLayout()
        title = QLabel("Bakƒ±m & Onarƒ±mlar")
        title.setStyleSheet("font-size: 24px; font-weight: bold; color: #2c3e50;")
        header_layout.addWidget(title)
        header_layout.addStretch()
        btn_add = QPushButton("‚ûï Bakƒ±m Ekle")
        btn_add.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        btn_add.clicked.connect(self.add_maintenance)
        btn_edit = QPushButton("‚úèÔ∏è D√ºzenle")
        btn_edit.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        btn_edit.clicked.connect(self.edit_maintenance)
        btn_delete = QPushButton("üóëÔ∏è Sil")
        btn_delete.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
        """)
        btn_delete.clicked.connect(self.delete_maintenance)
        btn_export = QPushButton("üì§ Excel'e Aktar")
        btn_export.setStyleSheet("""
            QPushButton {
                background-color: #f1c40f;
                color: #2c3e50;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #f39c12;
            }
        """)
        btn_export.clicked.connect(lambda: export_table_to_excel(self.model, self.proxy_model, self))
        header_layout.addWidget(btn_add)
        header_layout.addWidget(btn_edit)
        header_layout.addWidget(btn_delete)
        header_layout.addWidget(btn_export)
        layout.addLayout(header_layout)
        self.search_box = QLineEdit()
        self.search_box.setPlaceholderText("Bakƒ±mlarda ara...")
        self.search_box.textChanged.connect(self.filter_maintenance)
        layout.addWidget(self.search_box)
        self.table_view = QTableView()
        self.model = QStandardItemModel()
        self.proxy_model = QSortFilterProxyModel()
        self.proxy_model.setSourceModel(self.model)
        self.proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)
        self.table_view.setModel(self.proxy_model)
        self.table_view.setSortingEnabled(True)
        self.table_view.setSelectionBehavior(QTableView.SelectRows)
        self.table_view.setSelectionMode(QTableView.SingleSelection)
        self.table_view.horizontalHeader().setStretchLastSection(True)
        
        # Satƒ±r numaralarƒ±nƒ± gizle
        self.table_view.verticalHeader().setVisible(False)
        
        layout.addWidget(self.table_view)
    def load_maintenance(self):
        try:
            maintenance = self.data_manager.load_data('bakimlar')
            columns = [
                "Ara√ß Plakasƒ±", "Bakƒ±m Tarihi", "Bakƒ±ma Girdiƒüi KM", "ƒ∞≈ülem T√ºr√º", "Servis Adƒ±", "Tutar", "A√ßƒ±klama"
            ]
            self.model.clear()
            self.model.setHorizontalHeaderLabels(columns)
            for _, record in maintenance.iterrows():
                row = [
                    QStandardItem(str(record.get("Ara√ß Plakasƒ±", ''))),
                    QStandardItem(str(record.get("Bakƒ±m Tarihi", ''))),
                    QStandardItem(str(record.get("KM", ''))),
                    QStandardItem(str(record.get("ƒ∞≈ülem T√ºr√º", ''))),
                    QStandardItem(str(record.get("Servis Adƒ±", ''))),
                    QStandardItem(str(record.get("Tutar", ''))),
                    QStandardItem(str(record.get("A√ßƒ±klama", '')))
                ]
                self.model.appendRow(row)
        except Exception as e:
            print(f"Bakƒ±m y√ºkleme hatasƒ±: {e}")
    def filter_maintenance(self, text):
        self.proxy_model.setFilterWildcard(text)
    def add_maintenance(self):
        dialog = MaintenanceDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            self.load_maintenance()
    def edit_maintenance(self):
        index = self.table_view.currentIndex()
        if index.isValid():
            row = self.proxy_model.mapToSource(index).row()
            plaka = self.model.item(row, 0).text()
            tarih = self.model.item(row, 1).text()
            maintenance = self.data_manager.load_data('bakimlar')
            maintenance_record = maintenance[(maintenance['Ara√ß Plakasƒ±'] == plaka) & (maintenance['Bakƒ±m Tarihi'] == tarih)]
            if not maintenance_record.empty:
                dialog = MaintenanceDialog(self, maintenance_record.iloc[0].to_dict())
                if dialog.exec_() == QDialog.Accepted:
                    self.load_maintenance()
        else:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen d√ºzenlenecek bakƒ±m kaydƒ±nƒ± se√ßin.")
    def delete_maintenance(self):
        index = self.table_view.currentIndex()
        if index.isValid():
            row = self.proxy_model.mapToSource(index).row()
            plaka = self.model.item(row, 0).text()
            tarih = self.model.item(row, 1).text()
            reply = QMessageBox.question(self, "Onay", f"'{plaka}' plakalƒ± aracƒ±n '{tarih}' tarihli bakƒ±m kaydƒ±nƒ± silmek istediƒüinizden emin misiniz?", QMessageBox.Yes | QMessageBox.No)
            if reply == QMessageBox.Yes:
                try:
                    maintenance = self.data_manager.load_data('bakimlar')
                    maintenance = maintenance[~((maintenance['Ara√ß Plakasƒ±'] == plaka) & (maintenance['Bakƒ±m Tarihi'] == tarih))]
                    self.data_manager.save_data('bakimlar', maintenance)
                    self.load_maintenance()
                    QMessageBox.information(self, "Ba≈üarƒ±lƒ±", "Bakƒ±m kaydƒ± silindi.")
                except Exception as e:
                    QMessageBox.critical(self, "Hata", f"Bakƒ±m silme hatasƒ±: {str(e)}")
        else:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen silinecek bakƒ±m kaydƒ±nƒ± se√ßin.")

class MaintenanceDialog(QDialog):
    """Bakƒ±m ekleme/d√ºzenleme dialog"""
    
    def __init__(self, parent=None, maintenance_data=None):
        super().__init__(parent)
        self.maintenance_data = maintenance_data
        self.data_manager = parent.data_manager if parent else DataManager()
        self.init_ui()
        if maintenance_data:
            self.load_maintenance_data(maintenance_data)
    
    def init_ui(self):
        self.setWindowTitle("Bakƒ±m Ekle" if not self.maintenance_data else "Bakƒ±m D√ºzenle")
        self.setMinimumWidth(500)
        self.setModal(True)
        
        layout = QFormLayout(self)
        layout.setSpacing(15)
        
        # Form alanlarƒ±
        self.arac_plakasi = QComboBox()
        self.load_vehicles()
        
        self.bakim_tarihi = QDateEdit()
        self.bakim_tarihi.setCalendarPopup(True)
        self.bakim_tarihi.setDate(QDate.currentDate())
        
        self.km = QLineEdit()
        
        self.islem_turu = QComboBox()
        self.islem_turu.addItems([
            "Yaƒü Deƒüi≈üimi", "Fren Bakƒ±mƒ±", "Lastik Deƒüi≈üimi", "Motor Bakƒ±mƒ±",
            "Elektrik Sistemi", "Klima Bakƒ±mƒ±", "Kaporta Boya", "Diƒüer"
        ])
        
        self.servis_adi = QLineEdit()
        
        self.tutar = QLineEdit()
        self.tutar.setPlaceholderText("0.00")
        
        self.aciklama = QTextEdit()
        self.aciklama.setMaximumHeight(100)
        
        # Form'a ekle
        layout.addRow("Ara√ß Plakasƒ±:", self.arac_plakasi)
        layout.addRow("Bakƒ±m Tarihi:", self.bakim_tarihi)
        layout.addRow("KM:", self.km)
        layout.addRow("ƒ∞≈ülem T√ºr√º:", self.islem_turu)
        layout.addRow("Servis Adƒ±:", self.servis_adi)
        layout.addRow("Tutar:", self.tutar)
        layout.addRow("A√ßƒ±klama:", self.aciklama)
        
        # Butonlar
        btn_layout = QHBoxLayout()
        btn_save = QPushButton("Kaydet")
        btn_save.clicked.connect(self.save_maintenance)
        btn_cancel = QPushButton("ƒ∞ptal")
        btn_cancel.clicked.connect(self.reject)
        
        btn_layout.addWidget(btn_save)
        btn_layout.addWidget(btn_cancel)
        layout.addRow(btn_layout)
    
    def load_vehicles(self):
        """Mevcut ara√ßlarƒ± y√ºkle"""
        try:
            vehicles = self.data_manager.load_data('araclar')
            self.arac_plakasi.clear()
            
            if not vehicles.empty:
                for _, vehicle in vehicles.iterrows():
                    plaka = vehicle.get('Plaka', '')
                    marka = vehicle.get('Marka', '')
                    model = vehicle.get('Model', '')
                    self.arac_plakasi.addItem(f"{plaka} - {marka} {model}")
        except Exception as e:
            print(f"Ara√ß y√ºkleme hatasƒ±: {e}")
    
    def load_maintenance_data(self, maintenance_data):
        """Bakƒ±m verilerini y√ºkle"""
        # Ara√ß plakasƒ±nƒ± ayarla
        arac_text = f"{maintenance_data.get('Ara√ß Plakasƒ±', '')} - "
        vehicles = self.data_manager.load_data('araclar')
        if not vehicles.empty:
            vehicle = vehicles[vehicles['Plaka'] == maintenance_data.get('Ara√ß Plakasƒ±', '')]
            if not vehicle.empty:
                marka = vehicle.iloc[0].get('Marka', '')
                model = vehicle.iloc[0].get('Model', '')
                arac_text += f"{marka} {model}"
        
        # ComboBox'ta ara√ß se√ß
        index = self.arac_plakasi.findText(arac_text)
        if index >= 0:
            self.arac_plakasi.setCurrentIndex(index)
        
        # Tarihi y√ºkle
        try:
            bakim_date = QDate.fromString(str(maintenance_data.get('Bakƒ±m Tarihi', '')), "dd.MM.yyyy")
            if bakim_date.isValid():
                self.bakim_tarihi.setDate(bakim_date)
        except:
            pass
        
        # Diƒüer alanlarƒ± y√ºkle
        self.km.setText(str(maintenance_data.get('KM', '')))
        
        # ƒ∞≈ülem t√ºr√ºn√º ayarla
        islem_index = self.islem_turu.findText(str(maintenance_data.get('ƒ∞≈ülem T√ºr√º', '')))
        if islem_index >= 0:
            self.islem_turu.setCurrentIndex(islem_index)
        
        self.servis_adi.setText(str(maintenance_data.get('Servis Adƒ±', '')))
        self.tutar.setText(str(maintenance_data.get('Tutar', '')))
        self.aciklama.setPlainText(str(maintenance_data.get('A√ßƒ±klama', '')))
    
    def save_maintenance(self):
        """Bakƒ±m kaydet"""
        if not self.arac_plakasi.currentText():
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen bir ara√ß se√ßin.")
            return
        
        try:
            maintenance = self.data_manager.load_data('bakimlar')
            
            # Ara√ß plakasƒ±nƒ± ayƒ±r
            arac_text = self.arac_plakasi.currentText()
            plaka = arac_text.split(' - ')[0] if ' - ' in arac_text else arac_text
            
            # Yeni bakƒ±m verisi
            new_maintenance = {
                'ID': len(maintenance) + 1 if not maintenance.empty else 1,
                'Ara√ß Plakasƒ±': plaka,
                'Bakƒ±m Tarihi': self.bakim_tarihi.date().toString("dd.MM.yyyy"),
                'KM': self.km.text().strip(),
                'ƒ∞≈ülem T√ºr√º': self.islem_turu.currentText(),
                'Servis Adƒ±': self.servis_adi.text().strip(),
                'Tutar': self.tutar.text().strip(),
                'A√ßƒ±klama': self.aciklama.toPlainText().strip(),
                'Fatura Dosyasƒ±': "",
                'Olu≈üturma Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            if self.maintenance_data:
                # D√ºzenleme modu - eski kaydƒ± sil
                maintenance = maintenance[
                    ~((maintenance['Ara√ß Plakasƒ±'] == self.maintenance_data['Ara√ß Plakasƒ±']) & 
                      (maintenance['Bakƒ±m Tarihi'] == self.maintenance_data['Bakƒ±m Tarihi']) &
                      (maintenance['ƒ∞≈ülem T√ºr√º'] == self.maintenance_data['ƒ∞≈ülem T√ºr√º']))
                ]
            
            # Yeni veriyi ekle
            new_df = pd.DataFrame([new_maintenance])
            maintenance = pd.concat([maintenance, new_df], ignore_index=True)
            
            # Kaydet
            if self.data_manager.save_data('bakimlar', maintenance):
                QMessageBox.information(self, "Ba≈üarƒ±lƒ±", 
                    "Bakƒ±m kaydƒ± g√ºncellendi." if self.maintenance_data else "Bakƒ±m kaydƒ± eklendi.")
                self.accept()
            else:
                QMessageBox.critical(self, "Hata", "Kaydetme hatasƒ±.")
                
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Kaydetme hatasƒ±: {str(e)}")

class Yakƒ±tlarPanel(QWidget):
    def __init__(self, data_manager):
        super().__init__()
        self.data_manager = data_manager
        self.init_ui()
        self.load_yakitlar()
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)
        header_layout = QHBoxLayout()
        title = QLabel("Yakƒ±tlar")
        title.setStyleSheet("font-size: 24px; font-weight: bold; color: #2c3e50;")
        header_layout.addWidget(title)
        header_layout.addStretch()
        btn_add = QPushButton("‚ûï Yakƒ±t Ekle")
        btn_add.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        btn_add.clicked.connect(self.add_yakit)
        btn_edit = QPushButton("‚úèÔ∏è D√ºzenle")
        btn_edit.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        btn_edit.clicked.connect(self.edit_yakit)
        btn_delete = QPushButton("üóëÔ∏è Sil")
        btn_delete.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
        """)
        btn_delete.clicked.connect(self.delete_yakit)
        btn_export = QPushButton("üì§ Excel'e Aktar")
        btn_export.setStyleSheet("""
            QPushButton {
                background-color: #f1c40f;
                color: #2c3e50;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #f39c12;
            }
        """)
        btn_export.clicked.connect(lambda: export_table_to_excel(self.model, self.proxy_model, self))
        
        # Excel import butonu
        btn_import = QPushButton("üì• Excel'den Y√ºkle")
        btn_import.setStyleSheet("""
            QPushButton {
                background-color: #9b59b6;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #8e44ad;
            }
        """)
        btn_import.clicked.connect(self.import_fuel_excel)
        
        header_layout.addWidget(btn_add)
        header_layout.addWidget(btn_edit)
        header_layout.addWidget(btn_delete)
        header_layout.addWidget(btn_export)
        header_layout.addWidget(btn_import)
        layout.addLayout(header_layout)
        self.search_box = QLineEdit()
        self.search_box.setPlaceholderText("Yakƒ±tlarda ara...")
        self.search_box.textChanged.connect(self.filter_yakitlar)
        layout.addWidget(self.search_box)
        self.table_view = QTableView()
        self.model = QStandardItemModel()
        self.proxy_model = QSortFilterProxyModel()
        self.proxy_model.setSourceModel(self.model)
        self.proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)
        self.table_view.setModel(self.proxy_model)
        self.table_view.setSortingEnabled(True)
        self.table_view.setSelectionBehavior(QTableView.SelectRows)
        self.table_view.setSelectionMode(QTableView.SingleSelection)
        self.table_view.horizontalHeader().setStretchLastSection(True)
        
        # Satƒ±r numaralarƒ±nƒ± gizle
        self.table_view.verticalHeader().setVisible(False)
        
        layout.addWidget(self.table_view)
    def load_yakitlar(self):
        try:
            yakitlar = self.data_manager.load_data('yakitlar')
            columns = [
                "Ara√ß Plakasƒ±", "Yakƒ±t Tipi", "Tarih", "Litre", "Tutar", "Bayi", "A√ßƒ±klama"
            ]
            self.model.clear()
            self.model.setHorizontalHeaderLabels(columns)
            
            def tr_money(val):
                try:
                    val = float(str(val).replace(",", ".").replace("‚Ç∫", "").replace("TL", ""))
                    return f"{val:,.2f} ‚Ç∫".replace(",", "X").replace(".", ",").replace("X", ".")
                except:
                    return str(val)
            
            for _, yakit in yakitlar.iterrows():
                row = []
                for col in columns:
                    if col == "Tutar":
                        row.append(QStandardItem(tr_money(yakit.get("Tutar", 0))))
                    else:
                        row.append(QStandardItem(str(yakit.get(col, ''))))
                self.model.appendRow(row)
        except Exception as e:
            print(f"Yakƒ±t y√ºkleme hatasƒ±: {e}")
    def filter_yakitlar(self, text):
        self.proxy_model.setFilterWildcard(text)
    def add_yakit(self):
        dialog = YakitDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            self.load_yakitlar()
    def edit_yakit(self):
        index = self.table_view.currentIndex()
        if index.isValid():
            row = self.proxy_model.mapToSource(index).row()
            plaka = self.model.item(row, 0).text()
            tarih = self.model.item(row, 2).text()
            yakitlar = self.data_manager.load_data('yakitlar')
            yakit = yakitlar[(yakitlar['Ara√ß Plakasƒ±'] == plaka) & (yakitlar['Tarih'] == tarih)]
            if not yakit.empty:
                dialog = YakitDialog(self, yakit.iloc[0].to_dict())
                if dialog.exec_() == QDialog.Accepted:
                    self.load_yakitlar()
        else:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen d√ºzenlenecek yakƒ±t kaydƒ±nƒ± se√ßin.")
    def delete_yakit(self):
        index = self.table_view.currentIndex()
        if index.isValid():
            row = self.proxy_model.mapToSource(index).row()
            plaka = self.model.item(row, 0).text()
            tarih = self.model.item(row, 2).text()
            reply = QMessageBox.question(self, "Onay", f"'{plaka}' plakalƒ± aracƒ±n '{tarih}' tarihli yakƒ±t kaydƒ±nƒ± silmek istediƒüinizden emin misiniz?", QMessageBox.Yes | QMessageBox.No)
            if reply == QMessageBox.Yes:
                try:
                    yakitlar = self.data_manager.load_data('yakitlar')
                    yakitlar = yakitlar[~((yakitlar['Ara√ß Plakasƒ±'] == plaka) & (yakitlar['Tarih'] == tarih))]
                    self.data_manager.save_data('yakitlar', yakitlar)
                    self.load_yakitlar()
                    QMessageBox.information(self, "Ba≈üarƒ±lƒ±", "Yakƒ±t kaydƒ± silindi.")
                except Exception as e:
                    QMessageBox.critical(self, "Hata", f"Yakƒ±t silme hatasƒ±: {str(e)}")
        else:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen silinecek yakƒ±t kaydƒ±nƒ± se√ßin.")
    
    def import_fuel_excel(self):
        """Excel'den yakƒ±t verilerini y√ºkle"""
        try:
            # √ñnce ≈üablon indirme se√ßeneƒüi sun
            reply = QMessageBox.question(self, "Yakƒ±t Veri Y√ºkleme", 
                "Yakƒ±t verilerini y√ºklemek i√ßin:\n\n"
                "1Ô∏è‚É£ **≈ûablon ƒ∞ndir**: Bo≈ü Excel ≈üablonu indirip doldurun\n"
                "2Ô∏è‚É£ **Dosya Se√ß**: Dolu Excel dosyasƒ±nƒ± se√ßin\n\n"
                "≈ûablon indirmek ister misiniz?",
                QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel)
            
            if reply == QMessageBox.Yes:
                self.download_fuel_template()
                return
            elif reply == QMessageBox.Cancel:
                return
            
            # Dosya se√ß
            file_path, _ = QFileDialog.getOpenFileName(
                self, "Yakƒ±t Excel Dosyasƒ± Se√ß", "", 
                "Excel Dosyalarƒ± (*.xlsx *.xls)"
            )
            
            if not file_path:
                return
            
            # Excel dosyasƒ±nƒ± oku
            df = pd.read_excel(file_path)
            
            # S√ºtun isimlerini kontrol et ve normalize et
            column_mapping = {
                'Plaka': 'Ara√ß Plakasƒ±',
                'Ara√ß Plakasƒ±': 'Ara√ß Plakasƒ±',
                'Yakƒ±t Tipi': 'Yakƒ±t Tipi',
                'Tarih': 'Tarih',
                'Litre': 'Litre',
                'Tutar': 'Tutar',
                'Bayi': 'Bayi',
                'ƒ∞stasyon': 'Bayi',
                'A√ßƒ±klama': 'A√ßƒ±klama',
                'Not': 'A√ßƒ±klama'
            }
            
            # S√ºtun isimlerini normalize et
            df.columns = [column_mapping.get(col, col) for col in df.columns]
            
            # Gerekli s√ºtunlarƒ± kontrol et
            required_columns = ['Ara√ß Plakasƒ±', 'Tarih', 'Litre', 'Tutar']
            missing_columns = [col for col in required_columns if col not in df.columns]
            
            if missing_columns:
                QMessageBox.critical(self, "Hata", 
                    f"Excel dosyasƒ±nda gerekli s√ºtunlar eksik:\n{', '.join(missing_columns)}\n\n"
                    f"Beklenen s√ºtunlar: {', '.join(required_columns)}")
                return
            
            # Veri temizleme ve formatlama
            processed_data = []
            
            for _, row in df.iterrows():
                try:
                    # Plaka kontrol√º
                    plaka = str(row.get('Ara√ß Plakasƒ±', '')).strip()
                    if not plaka or plaka.lower() in ['nan', 'none', '']:
                        continue
                    
                    # Tarih formatƒ±nƒ± kontrol et ve normalize et
                    tarih = row.get('Tarih', '')
                    if pd.isna(tarih):
                        continue
                    
                    # Tarih formatƒ±nƒ± kontrol et
                    if isinstance(tarih, str):
                        # String tarih formatlarƒ±nƒ± kontrol et
                        tarih_formats = ['%d.%m.%Y', '%d/%m/%Y', '%Y-%m-%d', '%d-%m-%Y']
                        parsed_date = None
                        for fmt in tarih_formats:
                            try:
                                parsed_date = datetime.strptime(tarih, fmt)
                                break
                            except:
                                continue
                        
                        if parsed_date:
                            tarih = parsed_date.strftime('%d.%m.%Y')
                        else:
                            continue  # Tarih parse edilemezse satƒ±rƒ± atla
                    elif isinstance(tarih, datetime):
                        tarih = tarih.strftime('%d.%m.%Y')
                    else:
                        continue
                    
                    # Litre kontrol√º
                    litre = row.get('Litre', 0)
                    if pd.isna(litre):
                        litre = 0
                    try:
                        litre = float(str(litre).replace(',', '.'))
                    except:
                        litre = 0
                    
                    # Tutar kontrol√º ve formatlama
                    tutar = row.get('Tutar', 0)
                    if pd.isna(tutar):
                        tutar = 0
                    
                    # Tutar formatƒ±nƒ± temizle (‚Ç∫, TL, virg√ºl, nokta)
                    if isinstance(tutar, str):
                        tutar = str(tutar).replace('‚Ç∫', '').replace('TL', '').replace(' ', '')
                        tutar = tutar.replace(',', '.')
                    
                    try:
                        tutar = float(tutar)
                    except:
                        tutar = 0
                    
                    # Diƒüer alanlar
                    yakit_tipi = str(row.get('Yakƒ±t Tipi', 'Benzin')).strip()
                    if not yakit_tipi or yakit_tipi.lower() in ['nan', 'none']:
                        yakit_tipi = 'Benzin'
                    
                    bayi = str(row.get('Bayi', '')).strip()
                    if not bayi or bayi.lower() in ['nan', 'none']:
                        bayi = ''
                    
                    aciklama = str(row.get('A√ßƒ±klama', '')).strip()
                    if not aciklama or aciklama.lower() in ['nan', 'none']:
                        aciklama = ''
                    
                    # Yeni kayƒ±t olu≈ütur
                    new_record = {
                        'ID': len(processed_data) + 1,
                        'Ara√ß Plakasƒ±': plaka,
                        'Yakƒ±t Tipi': yakit_tipi,
                        'Tarih': tarih,
                        'Litre': litre,
                        'Tutar': tutar,
                        'Bayi': bayi,
                        'A√ßƒ±klama': aciklama,
                        'Olu≈üturma Tarihi': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    }
                    
                    processed_data.append(new_record)
                    
                except Exception as e:
                    print(f"Satƒ±r i≈üleme hatasƒ±: {e}")
                    continue
            
            if not processed_data:
                QMessageBox.warning(self, "Uyarƒ±", "ƒ∞≈ülenebilir veri bulunamadƒ±.")
                return
            
            # Mevcut yakƒ±t verilerini y√ºkle
            existing_fuel = self.data_manager.load_data('yakitlar')
            
            # Yeni verileri ekle
            new_df = pd.DataFrame(processed_data)
            combined_fuel = pd.concat([existing_fuel, new_df], ignore_index=True)
            
            # Verileri kaydet
            self.data_manager.save_data('yakitlar', combined_fuel)
            
            # Tabloyu yenile
            self.load_yakitlar()
            
            QMessageBox.information(self, "Ba≈üarƒ±lƒ±", 
                f"{len(processed_data)} adet yakƒ±t kaydƒ± ba≈üarƒ±yla y√ºklendi.\n\n"
                f"Toplam kayƒ±t sayƒ±sƒ±: {len(combined_fuel)}")
            
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Excel y√ºkleme hatasƒ±: {str(e)}")
    
    def download_fuel_template(self):
        """Yakƒ±t veri ≈üablonu indir"""
        try:
            # Kayƒ±t klas√∂r√º se√ß
            folder = QFileDialog.getExistingDirectory(self, "≈ûablon Kayƒ±t Klas√∂r√º Se√ß")
            if not folder:
                return
            
            # ≈ûablon dosya adƒ±
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"Yakit_Veri_Sablonu_{timestamp}.xlsx"
            filepath = os.path.join(folder, filename)
            
            # ≈ûablon verisi olu≈ütur
            template_data = {
                'Ara√ß Plakasƒ±': ['55ABC123', '55DEF456', '55GHI789', '', ''],
                'Yakƒ±t Tipi': ['Benzin', 'Dizel', 'LPG', '', ''],
                'Tarih': ['23.08.2025', '24.08.2025', '25.08.2025', '', ''],
                'Litre': [45.5, 52.0, 38.5, '', ''],
                'Tutar': [1250.50, 1450.00, 1050.75, '', ''],
                'Bayi': ['Shell', 'BP', 'Petrol Ofisi', '', ''],
                'A√ßƒ±klama': ['Tam doldurma', 'Yarƒ± doldurma', 'Acil yakƒ±t', '', '']
            }
            
            # DataFrame olu≈ütur
            df = pd.DataFrame(template_data)
            
            # Excel dosyasƒ± olu≈ütur
            with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
                # Ana veri sayfasƒ±
                df.to_excel(writer, sheet_name='Yakƒ±t Verileri', index=False)
                
                # Talimat sayfasƒ±
                instructions = {
                    'S√ºtun': [
                        'Ara√ß Plakasƒ±',
                        'Yakƒ±t Tipi', 
                        'Tarih',
                        'Litre',
                        'Tutar',
                        'Bayi',
                        'A√ßƒ±klama'
                    ],
                    'A√ßƒ±klama': [
                        'Ara√ß plakasƒ± (zorunlu)',
                        'Benzin, Dizel, LPG, Elektrik, Hibrit, Diƒüer',
                        'Tarih formatƒ±: dd.mm.yyyy (zorunlu)',
                        'Yakƒ±t miktarƒ± litre (zorunlu)',
                        'Tutar TL (zorunlu)',
                        'ƒ∞stasyon/bayi adƒ± (opsiyonel)',
                        'Ek a√ßƒ±klama (opsiyonel)'
                    ],
                    '√ñrnek': [
                        '55ABC123',
                        'Benzin',
                        '23.08.2025',
                        '45.5',
                        '1250.50',
                        'Shell',
                        'Tam doldurma'
                    ]
                }
                
                instruction_df = pd.DataFrame(instructions)
                instruction_df.to_excel(writer, sheet_name='Kullanƒ±m Talimatlarƒ±', index=False)
                
                # Excel dosyasƒ±nƒ± formatla
                workbook = writer.book
                
                # Ana sayfa formatlamasƒ±
                worksheet = writer.sheets['Yakƒ±t Verileri']
                
                # Ba≈ülƒ±k satƒ±rƒ±nƒ± kalƒ±n yap
                for col in range(1, len(df.columns) + 1):
                    cell = worksheet.cell(row=1, column=col)
                    cell.font = openpyxl.styles.Font(bold=True)
                    cell.fill = openpyxl.styles.PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")
                
                # S√ºtun geni≈üliklerini ayarla
                column_widths = [15, 12, 12, 10, 12, 15, 20]
                for i, width in enumerate(column_widths):
                    worksheet.column_dimensions[openpyxl.utils.get_column_letter(i + 1)].width = width
                
                # Talimat sayfasƒ± formatlamasƒ±
                instruction_worksheet = writer.sheets['Kullanƒ±m Talimatlarƒ±']
                
                # Ba≈ülƒ±k ekle
                instruction_worksheet.insert_rows(1)
                instruction_worksheet['A1'] = "üìã YAKIT VERƒ∞ ≈ûABLONU KULLANIM TALƒ∞MATLARI"
                instruction_worksheet['A1'].font = openpyxl.styles.Font(bold=True, size=14)
                instruction_worksheet.merge_cells('A1:C1')
                
                # Alt ba≈ülƒ±k
                instruction_worksheet.insert_rows(2)
                instruction_worksheet['A2'] = "Bu ≈üablonu doldurduktan sonra 'Yakƒ±tlar' men√ºs√ºnden 'Excel'den Y√ºkle' butonunu kullanarak verileri sisteme aktarabilirsiniz."
                instruction_worksheet['A2'].font = openpyxl.styles.Font(size=10, color="666666")
                instruction_worksheet.merge_cells('A2:C2')
                
                # S√ºtun geni≈üliklerini ayarla
                instruction_worksheet.column_dimensions['A'].width = 20
                instruction_worksheet.column_dimensions['B'].width = 40
                instruction_worksheet.column_dimensions['C'].width = 25
            
            QMessageBox.information(self, "Ba≈üarƒ±lƒ±", 
                f"Yakƒ±t veri ≈üablonu ba≈üarƒ±yla olu≈üturuldu!\n\n"
                f"Dosya: {filename}\n"
                f"Konum: {folder}\n\n"
                "≈ûablonu doldurduktan sonra tekrar 'Excel'den Y√ºkle' butonunu kullanƒ±n.")
            
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"≈ûablon olu≈üturma hatasƒ±: {str(e)}")

# Yakƒ±t ekleme/d√ºzenleme dialog
class YakitDialog(QDialog):
    def __init__(self, parent=None, yakit_data=None):
        super().__init__(parent)
        self.yakit_data = yakit_data
        self.data_manager = parent.data_manager if parent else DataManager()
        self.init_ui()
        if yakit_data:
            self.load_yakit_data(yakit_data)
    
    def init_ui(self):
        self.setWindowTitle("Yakƒ±t Ekle" if not self.yakit_data else "Yakƒ±t D√ºzenle")
        self.setMinimumWidth(500)
        self.setModal(True)
        layout = QFormLayout(self)
        layout.setSpacing(15)
        self.arac_plakasi = QComboBox()
        self.load_vehicles()
        self.yakit_tipi = QComboBox()
        self.yakit_tipi.addItems(["Benzin", "Dizel", "LPG", "Elektrik", "Hibrit", "Diƒüer"])
        self.tarih = QDateEdit()
        self.tarih.setCalendarPopup(True)
        self.tarih.setDate(QDate.currentDate())
        self.litre = QLineEdit()
        self.litre.setPlaceholderText("0.00")
        self.tutar = QLineEdit()
        self.tutar.setPlaceholderText("0.00")
        self.bayi = QLineEdit()
        self.bayi.setPlaceholderText("Bayi/ƒ∞stasyon Adƒ±")
        self.aciklama = QTextEdit()
        self.aciklama.setMaximumHeight(100)
        layout.addRow("Ara√ß Plakasƒ±:", self.arac_plakasi)
        layout.addRow("Yakƒ±t Tipi:", self.yakit_tipi)
        layout.addRow("Tarih:", self.tarih)
        layout.addRow("Litre:", self.litre)
        layout.addRow("Tutar:", self.tutar)
        layout.addRow("Bayi:", self.bayi)
        layout.addRow("A√ßƒ±klama:", self.aciklama)
        btn_layout = QHBoxLayout()
        btn_save = QPushButton("Kaydet")
        btn_save.clicked.connect(self.save_yakit)
        btn_cancel = QPushButton("ƒ∞ptal")
        btn_cancel.clicked.connect(self.reject)
        btn_layout.addWidget(btn_save)
        btn_layout.addWidget(btn_cancel)
        layout.addRow(btn_layout)
    def load_vehicles(self):
        try:
            vehicles = self.data_manager.load_data('araclar')
            self.arac_plakasi.clear()
            if not vehicles.empty:
                for _, vehicle in vehicles.iterrows():
                    plaka = vehicle.get('Plaka', '')
                    marka = vehicle.get('Marka', '')
                    model = vehicle.get('Model', '')
                    self.arac_plakasi.addItem(f"{plaka} - {marka} {model}")
        except Exception as e:
            print(f"Ara√ß y√ºkleme hatasƒ±: {e}")
    def load_yakit_data(self, yakit_data):
        self.arac_plakasi.setCurrentText(str(yakit_data.get('Ara√ß Plakasƒ±', '')))
        self.yakit_tipi.setCurrentText(str(yakit_data.get('Yakƒ±t Tipi', 'Benzin')))
        try:
            tarih = QDate.fromString(str(yakit_data.get('Tarih', '')), "yyyy-MM-dd")
            if tarih.isValid():
                self.tarih.setDate(tarih)
        except:
            pass
        self.litre.setText(str(yakit_data.get('Litre', '')))
        self.tutar.setText(str(yakit_data.get('Tutar', '')))
        self.bayi.setText(str(yakit_data.get('Bayi', '')))
        self.aciklama.setPlainText(str(yakit_data.get('A√ßƒ±klama', '')))
    def save_yakit(self):
        if not self.arac_plakasi.currentText():
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen bir ara√ß se√ßin.")
            return
        if not self.litre.text().strip():
            QMessageBox.warning(self, "Uyarƒ±", "Litre alanƒ± zorunludur.")
            return
        if not self.tutar.text().strip():
            QMessageBox.warning(self, "Uyarƒ±", "Tutar alanƒ± zorunludur.")
            return
        try:
            yakitlar = self.data_manager.load_data('yakitlar')
            arac_text = self.arac_plakasi.currentText()
            plaka = arac_text.split(' - ')[0] if ' - ' in arac_text else arac_text
            new_yakit = {
                'ID': len(yakitlar) + 1 if not yakitlar.empty else 1,
                'Ara√ß Plakasƒ±': plaka,
                'Yakƒ±t Tipi': self.yakit_tipi.currentText(),
                'Tarih': self.tarih.date().toString("yyyy-MM-dd"),
                'Litre': self.litre.text().strip(),
                'Tutar': self.tutar.text().strip(),
                'Bayi': self.bayi.text().strip(),
                'A√ßƒ±klama': self.aciklama.toPlainText().strip(),
                'Olu≈üturma Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            if self.yakit_data:
                yakitlar = yakitlar[~((yakitlar['Ara√ß Plakasƒ±'] == self.yakit_data['Ara√ß Plakasƒ±']) & (yakitlar['Tarih'] == self.yakit_data['Tarih']))]
            new_df = pd.DataFrame([new_yakit])
            yakitlar = pd.concat([yakitlar, new_df], ignore_index=True)
            if self.data_manager.save_data('yakitlar', yakitlar):
                QMessageBox.information(self, "Ba≈üarƒ±lƒ±", "Yakƒ±t kaydƒ± eklendi.")
                self.accept()
            else:
                QMessageBox.critical(self, "Hata", "Kaydetme hatasƒ±.")
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Kaydetme hatasƒ±: {str(e)}")

class ExpensesPanel(QWidget):
    def __init__(self, data_manager):
        super().__init__()
        self.data_manager = data_manager
        self.init_ui()
        self.load_expenses()
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)
        
        # Ba≈ülƒ±k ve butonlar
        header_layout = QHBoxLayout()
        
        title = QLabel("Yakƒ±t & Giderler")
        title.setStyleSheet("font-size: 24px; font-weight: bold; color: #2c3e50;")
        header_layout.addWidget(title)
        
        header_layout.addStretch()
        
        # Butonlar
        btn_add = QPushButton("‚ûï Gider Ekle")
        btn_add.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        btn_add.clicked.connect(self.add_expense)
        
        btn_edit = QPushButton("‚úèÔ∏è D√ºzenle")
        btn_edit.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        btn_edit.clicked.connect(self.edit_expense)
        
        btn_delete = QPushButton("üóëÔ∏è Sil")
        btn_delete.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
        """)
        btn_delete.clicked.connect(self.delete_expense)
        
        header_layout.addWidget(btn_add)
        header_layout.addWidget(btn_edit)
        header_layout.addWidget(btn_delete)
        
        layout.addLayout(header_layout)
        
        # Tablo
        self.expenses_table = QTableWidget()
        self.expenses_table.setColumnCount(6)
        self.expenses_table.setHorizontalHeaderLabels([
            "Ara√ß Plakasƒ±", "Gider T√ºr√º", "Tarih", "Tutar", "A√ßƒ±klama", "Fi≈ü"
        ])
        self.expenses_table.horizontalHeader().setStretchLastSection(True)
        self.expenses_table.setAlternatingRowColors(True)
        self.expenses_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.expenses_table.setSelectionMode(QAbstractItemView.SingleSelection)
        
        # Satƒ±r numaralarƒ±nƒ± gizle
        self.expenses_table.verticalHeader().setVisible(False)
        
        layout.addWidget(self.expenses_table)
    
    def load_expenses(self):
        """Giderleri y√ºkle"""
        try:
            expenses = self.data_manager.load_data('giderler')
            self.expenses_table.setRowCount(len(expenses))
            
            for row, (_, expense) in enumerate(expenses.iterrows()):
                self.expenses_table.setItem(row, 0, QTableWidgetItem(str(expense.get('Ara√ß Plakasƒ±', ''))))
                self.expenses_table.setItem(row, 1, QTableWidgetItem(str(expense.get('Gider T√ºr√º', ''))))
                self.expenses_table.setItem(row, 2, QTableWidgetItem(str(expense.get('Tarih', ''))))
                self.expenses_table.setItem(row, 3, QTableWidgetItem(str(expense.get('Tutar', ''))))
                self.expenses_table.setItem(row, 4, QTableWidgetItem(str(expense.get('A√ßƒ±klama', ''))))
                self.expenses_table.setItem(row, 5, QTableWidgetItem(str(expense.get('Fi≈ü Dosyasƒ±', ''))))
        except Exception as e:
            print(f"Gider y√ºkleme hatasƒ±: {e}")
    
    def add_expense(self):
        """Gider ekle"""
        dialog = ExpenseDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            self.load_expenses()
    
    def edit_expense(self):
        """Gider d√ºzenle"""
        current_row = self.expenses_table.currentRow()
        if current_row >= 0:
            QMessageBox.information(self, "Bilgi", "Gider d√ºzenleme √∂zelliƒüi geli≈ütiriliyor...")
        else:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen d√ºzenlenecek gideri se√ßin.")
    
    def delete_expense(self):
        """Gider sil"""
        current_row = self.expenses_table.currentRow()
        if current_row >= 0:
            plaka = self.expenses_table.item(current_row, 0).text()
            gider_turu = self.expenses_table.item(current_row, 1).text()
            tarih = self.expenses_table.item(current_row, 2).text()
            reply = QMessageBox.question(self, "Onay", 
                f"'{plaka}' plakalƒ± aracƒ±n '{gider_turu}' giderini silmek istediƒüinizden emin misiniz?",
                QMessageBox.Yes | QMessageBox.No)
            
            if reply == QMessageBox.Yes:
                try:
                    expenses = self.data_manager.load_data('giderler')
                    # Gider kaydƒ±nƒ± sil
                    expenses = expenses[
                        ~((expenses['Ara√ß Plakasƒ±'] == plaka) & 
                          (expenses['Gider T√ºr√º'] == gider_turu) &
                          (expenses['Tarih'] == tarih))
                    ]
                    self.data_manager.save_data('giderler', expenses)
                    self.load_expenses()
                    QMessageBox.information(self, "Ba≈üarƒ±lƒ±", "Gider silindi.")
                except Exception as e:
                    QMessageBox.critical(self, "Hata", f"Gider silme hatasƒ±: {str(e)}")
        else:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen silinecek gideri se√ßin.")

class TrafficPanel(QWidget):
    def __init__(self, data_manager):
        super().__init__()
        self.data_manager = data_manager
        self.init_ui()
        self.load_traffic_data()
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)
        
        # Ba≈ülƒ±k
        title = QLabel("üö® Trafik Cezalarƒ± & Kazalar")
        title.setStyleSheet("font-size: 24px; font-weight: bold; color: #2c3e50;")
        layout.addWidget(title)
        
        # Tab widget olu≈ütur
        self.tab_widget = QTabWidget()
        
        # Cezalar tab'ƒ±
        self.create_penalties_tab()
        
        # Kazalar tab'ƒ±
        self.create_accidents_tab()
        
        layout.addWidget(self.tab_widget)
    
    def create_penalties_tab(self):
        """Cezalar tab'ƒ± olu≈ütur"""
        penalties_widget = QWidget()
        layout = QVBoxLayout(penalties_widget)
        
        # Ba≈ülƒ±k ve butonlar
        header_layout = QHBoxLayout()
        
        title = QLabel("üìã Trafik Cezalarƒ±")
        title.setStyleSheet("font-size: 18px; font-weight: bold; color: #e74c3c;")
        header_layout.addWidget(title)
        
        header_layout.addStretch()
        
        # Butonlar
        btn_add = QPushButton("‚ûï Ceza Ekle")
        btn_add.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
        """)
        btn_add.clicked.connect(self.add_penalty)
        
        btn_edit = QPushButton("‚úèÔ∏è D√ºzenle")
        btn_edit.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        btn_edit.clicked.connect(self.edit_penalty)
        
        btn_delete = QPushButton("üóëÔ∏è Sil")
        btn_delete.setStyleSheet("""
            QPushButton {
                background-color: #95a5a6;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #7f8c8d;
            }
        """)
        btn_delete.clicked.connect(self.delete_penalty)
        
        header_layout.addWidget(btn_add)
        header_layout.addWidget(btn_edit)
        header_layout.addWidget(btn_delete)
        
        layout.addLayout(header_layout)
        
        # Tablo
        self.penalties_table = QTableWidget()
        self.penalties_table.setColumnCount(8)
        self.penalties_table.setHorizontalHeaderLabels([
            "Ara√ß Plakasƒ±", "S√ºr√ºc√º", "Ceza Tarihi", "Ceza T√ºr√º", 
            "Ceza Tutarƒ±", "Ceza Yeri", "√ñdeme Durumu", "Ceza Nedeni"
        ])
        self.penalties_table.horizontalHeader().setStretchLastSection(True)
        self.penalties_table.setAlternatingRowColors(True)
        self.penalties_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.penalties_table.setSelectionMode(QAbstractItemView.SingleSelection)
        
        # Satƒ±r numaralarƒ±nƒ± gizle
        self.penalties_table.verticalHeader().setVisible(False)
        
        layout.addWidget(self.penalties_table)
        
        self.tab_widget.addTab(penalties_widget, "üö® Cezalar")
    
    def create_accidents_tab(self):
        """Kazalar tab'ƒ± olu≈ütur"""
        accidents_widget = QWidget()
        layout = QVBoxLayout(accidents_widget)
        
        # Ba≈ülƒ±k ve butonlar
        header_layout = QHBoxLayout()
        
        title = QLabel("üöó Kazalar")
        title.setStyleSheet("font-size: 18px; font-weight: bold; color: #e67e22;")
        header_layout.addWidget(title)
        
        header_layout.addStretch()
        
        # Butonlar
        btn_add = QPushButton("‚ûï Kaza Ekle")
        btn_add.setStyleSheet("""
            QPushButton {
                background-color: #e67e22;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #d35400;
            }
        """)
        btn_add.clicked.connect(self.add_accident)
        
        btn_edit = QPushButton("‚úèÔ∏è D√ºzenle")
        btn_edit.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        btn_edit.clicked.connect(self.edit_accident)
        
        btn_delete = QPushButton("üóëÔ∏è Sil")
        btn_delete.setStyleSheet("""
            QPushButton {
                background-color: #95a5a6;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #7f8c8d;
            }
        """)
        btn_delete.clicked.connect(self.delete_accident)
        
        header_layout.addWidget(btn_add)
        header_layout.addWidget(btn_edit)
        header_layout.addWidget(btn_delete)
        
        layout.addLayout(header_layout)
        
        # Tablo
        self.accidents_table = QTableWidget()
        self.accidents_table.setColumnCount(8)
        self.accidents_table.setHorizontalHeaderLabels([
            "Ara√ß Plakasƒ±", "S√ºr√ºc√º", "Kaza Tarihi", "Kaza Yeri", 
            "Kaza T√ºr√º", "Hasar Durumu", "Hasar Tutarƒ±", "Sigorta ≈ûirketi"
        ])
        self.accidents_table.horizontalHeader().setStretchLastSection(True)
        self.accidents_table.setAlternatingRowColors(True)
        
        # Satƒ±r numaralarƒ±nƒ± gizle
        self.accidents_table.verticalHeader().setVisible(False)
        self.accidents_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.accidents_table.setSelectionMode(QAbstractItemView.SingleSelection)
        
        layout.addWidget(self.accidents_table)
        
        self.tab_widget.addTab(accidents_widget, "üöó Kazalar")
    
    def load_traffic_data(self):
        """Trafik verilerini y√ºkle"""
        self.load_penalties()
        self.load_accidents()
    
    def load_penalties(self):
        """Cezalarƒ± y√ºkle"""
        try:
            penalties = self.data_manager.load_data('cezalar')
            self.penalties_table.setRowCount(len(penalties))
            
            for row, (_, penalty) in enumerate(penalties.iterrows()):
                self.penalties_table.setItem(row, 0, QTableWidgetItem(str(penalty.get('Ara√ß Plakasƒ±', ''))))
                self.penalties_table.setItem(row, 1, QTableWidgetItem(str(penalty.get('S√ºr√ºc√º', ''))))
                self.penalties_table.setItem(row, 2, QTableWidgetItem(str(penalty.get('Ceza Tarihi', ''))))
                self.penalties_table.setItem(row, 3, QTableWidgetItem(str(penalty.get('Ceza T√ºr√º', ''))))
                self.penalties_table.setItem(row, 4, QTableWidgetItem(str(penalty.get('Ceza Tutarƒ±', ''))))
                self.penalties_table.setItem(row, 5, QTableWidgetItem(str(penalty.get('Ceza Yeri', ''))))
                self.penalties_table.setItem(row, 6, QTableWidgetItem(str(penalty.get('√ñdeme Durumu', ''))))
                self.penalties_table.setItem(row, 7, QTableWidgetItem(str(penalty.get('Ceza Nedeni', ''))))
        except Exception as e:
            print(f"Ceza y√ºkleme hatasƒ±: {e}")
    
    def load_accidents(self):
        """Kazalarƒ± y√ºkle"""
        try:
            accidents = self.data_manager.load_data('kazalar')
            self.accidents_table.setRowCount(len(accidents))
            
            for row, (_, accident) in enumerate(accidents.iterrows()):
                self.accidents_table.setItem(row, 0, QTableWidgetItem(str(accident.get('Ara√ß Plakasƒ±', ''))))
                self.accidents_table.setItem(row, 1, QTableWidgetItem(str(accident.get('S√ºr√ºc√º', ''))))
                self.accidents_table.setItem(row, 2, QTableWidgetItem(str(accident.get('Kaza Tarihi', ''))))
                self.accidents_table.setItem(row, 3, QTableWidgetItem(str(accident.get('Kaza Yeri', ''))))
                self.accidents_table.setItem(row, 4, QTableWidgetItem(str(accident.get('Kaza T√ºr√º', ''))))
                self.accidents_table.setItem(row, 5, QTableWidgetItem(str(accident.get('Hasar Durumu', ''))))
                self.accidents_table.setItem(row, 6, QTableWidgetItem(str(accident.get('Hasar Tutarƒ±', ''))))
                self.accidents_table.setItem(row, 7, QTableWidgetItem(str(accident.get('Sigorta ≈ûirketi', ''))))
        except Exception as e:
            print(f"Kaza y√ºkleme hatasƒ±: {e}")
    
    def add_penalty(self):
        """Ceza ekle"""
        dialog = PenaltyDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            self.load_penalties()
    
    def edit_penalty(self):
        """Ceza d√ºzenle"""
        current_row = self.penalties_table.currentRow()
        if current_row >= 0:
            QMessageBox.information(self, "Bilgi", "Ceza d√ºzenleme √∂zelliƒüi geli≈ütiriliyor...")
        else:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen d√ºzenlenecek cezayƒ± se√ßin.")
    
    def delete_penalty(self):
        """Ceza sil"""
        current_row = self.penalties_table.currentRow()
        if current_row >= 0:
            plaka = self.penalties_table.item(current_row, 0).text()
            ceza_tarihi = self.penalties_table.item(current_row, 2).text()
            reply = QMessageBox.question(self, "Onay", 
                f"'{plaka}' plakalƒ± aracƒ±n '{ceza_tarihi}' tarihli cezasƒ±nƒ± silmek istediƒüinizden emin misiniz?",
                QMessageBox.Yes | QMessageBox.No)
            
            if reply == QMessageBox.Yes:
                try:
                    penalties = self.data_manager.load_data('cezalar')
                    penalties = penalties[
                        ~((penalties['Ara√ß Plakasƒ±'] == plaka) & 
                          (penalties['Ceza Tarihi'] == ceza_tarihi))
                    ]
                    self.data_manager.save_data('cezalar', penalties)
                    self.load_penalties()
                    QMessageBox.information(self, "Ba≈üarƒ±lƒ±", "Ceza silindi.")
                except Exception as e:
                    QMessageBox.critical(self, "Hata", f"Ceza silme hatasƒ±: {str(e)}")
        else:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen silinecek cezayƒ± se√ßin.")
    
    def add_accident(self):
        """Kaza ekle"""
        dialog = AccidentDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            self.load_accidents()
    
    def edit_accident(self):
        """Kaza d√ºzenle"""
        current_row = self.accidents_table.currentRow()
        if current_row >= 0:
            QMessageBox.information(self, "Bilgi", "Kaza d√ºzenleme √∂zelliƒüi geli≈ütiriliyor...")
        else:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen d√ºzenlenecek kazayƒ± se√ßin.")
    
    def delete_accident(self):
        """Kaza sil"""
        current_row = self.accidents_table.currentRow()
        if current_row >= 0:
            plaka = self.accidents_table.item(current_row, 0).text()
            kaza_tarihi = self.accidents_table.item(current_row, 2).text()
            reply = QMessageBox.question(self, "Onay", 
                f"'{plaka}' plakalƒ± aracƒ±n '{kaza_tarihi}' tarihli kaza kaydƒ±nƒ± silmek istediƒüinizden emin misiniz?",
                QMessageBox.Yes | QMessageBox.No)
            
            if reply == QMessageBox.Yes:
                try:
                    accidents = self.data_manager.load_data('kazalar')
                    accidents = accidents[
                        ~((accidents['Ara√ß Plakasƒ±'] == plaka) & 
                          (accidents['Kaza Tarihi'] == kaza_tarihi))
                    ]
                    self.data_manager.save_data('kazalar', accidents)
                    self.load_accidents()
                    QMessageBox.information(self, "Ba≈üarƒ±lƒ±", "Kaza kaydƒ± silindi.")
                except Exception as e:
                    QMessageBox.critical(self, "Hata", f"Kaza silme hatasƒ±: {str(e)}")
        else:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen silinecek kaza kaydƒ±nƒ± se√ßin.")

class PenaltyDialog(QDialog):
    """Ceza ekleme dialog"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.data_manager = parent.data_manager if parent else DataManager()
        self.init_ui()
    
    def init_ui(self):
        self.setWindowTitle("Ceza Ekle")
        self.setMinimumWidth(500)
        self.setModal(True)
        
        layout = QFormLayout(self)
        layout.setSpacing(15)
        
        # Form alanlarƒ±
        self.arac_plakasi = QComboBox()
        self.load_vehicles()
        
        self.surucu = QComboBox()
        self.load_drivers()
        
        self.ceza_tarihi = QDateEdit()
        self.ceza_tarihi.setCalendarPopup(True)
        self.ceza_tarihi.setDate(QDate.currentDate())
        
        self.ceza_turu = QComboBox()
        self.ceza_turu.addItems([
            "Hƒ±z ƒ∞hlali", "Kƒ±rmƒ±zƒ± I≈üƒ±k ƒ∞hlali", "Park ƒ∞hlali", "Emniyet Kemeri",
            "Cep Telefonu", "Alkoll√º Ara√ß Kullanma", "Trafik ƒ∞≈üareti ƒ∞hlali", "Diƒüer"
        ])
        
        self.ceza_tutari = QLineEdit()
        self.ceza_tutari.setPlaceholderText("0.00")
        
        self.ceza_yeri = QLineEdit()
        self.ceza_yeri.setPlaceholderText("√ñrn: ƒ∞stanbul, Kadƒ±k√∂y")
        
        self.ceza_nedeni = QTextEdit()
        self.ceza_nedeni.setMaximumHeight(100)
        self.ceza_nedeni.setPlaceholderText("Ceza nedenini detaylƒ± a√ßƒ±klayƒ±n...")
        
        self.odeme_durumu = QComboBox()
        self.odeme_durumu.addItems(["√ñdenmedi", "√ñdendi", "ƒ∞ndirimli √ñdendi"])
        
        self.odeme_tarihi = QDateEdit()
        self.odeme_tarihi.setCalendarPopup(True)
        self.odeme_tarihi.setDate(QDate.currentDate())
        self.odeme_tarihi.setEnabled(False)
        self.odeme_durumu.currentTextChanged.connect(self.odeme_durum_kontrol)
        
        # Form'a ekle
        layout.addRow("Ara√ß Plakasƒ±:", self.arac_plakasi)
        layout.addRow("S√ºr√ºc√º:", self.surucu)
        layout.addRow("Ceza Tarihi:", self.ceza_tarihi)
        layout.addRow("Ceza T√ºr√º:", self.ceza_turu)
        layout.addRow("Ceza Tutarƒ±:", self.ceza_tutari)
        layout.addRow("Ceza Yeri:", self.ceza_yeri)
        layout.addRow("Ceza Nedeni:", self.ceza_nedeni)
        layout.addRow("√ñdeme Durumu:", self.odeme_durumu)
        layout.addRow("√ñdeme Tarihi:", self.odeme_tarihi)
        
        # Butonlar
        btn_layout = QHBoxLayout()
        btn_save = QPushButton("Kaydet")
        btn_save.clicked.connect(self.save_penalty)
        btn_cancel = QPushButton("ƒ∞ptal")
        btn_cancel.clicked.connect(self.reject)
        
        btn_layout.addWidget(btn_save)
        btn_layout.addWidget(btn_cancel)
        layout.addRow(btn_layout)
    
    def load_vehicles(self):
        """Mevcut ara√ßlarƒ± y√ºkle"""
        try:
            vehicles = self.data_manager.load_data('araclar')
            self.arac_plakasi.clear()
            
            if not vehicles.empty:
                for _, vehicle in vehicles.iterrows():
                    plaka = vehicle.get('Plaka', '')
                    marka = vehicle.get('Marka', '')
                    model = vehicle.get('Model', '')
                    self.arac_plakasi.addItem(f"{plaka} - {marka} {model}")
        except Exception as e:
            print(f"Ara√ß y√ºkleme hatasƒ±: {e}")
    
    def load_drivers(self):
        """Mevcut s√ºr√ºc√ºleri y√ºkle"""
        try:
            drivers = self.data_manager.load_data('suruculer')
            self.surucu.clear()
            
            if not drivers.empty:
                for _, driver in drivers.iterrows():
                    ad_soyad = driver.get('Ad Soyad', '')
                    tc_kimlik = driver.get('TC Kimlik', '')
                    self.surucu.addItem(f"{ad_soyad} - {tc_kimlik}")
        except Exception as e:
            print(f"S√ºr√ºc√º y√ºkleme hatasƒ±: {e}")
    
    def odeme_durum_kontrol(self, text):
        """√ñdeme durum kontrol√º"""
        self.odeme_tarihi.setEnabled(text == "√ñdendi" or text == "ƒ∞ndirimli √ñdendi")
    
    def save_penalty(self):
        """Ceza kaydet"""
        if not self.arac_plakasi.currentText():
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen bir ara√ß se√ßin.")
            return
        
        try:
            penalties = self.data_manager.load_data('cezalar')
            
            # Ara√ß plakasƒ±nƒ± ayƒ±r
            arac_text = self.arac_plakasi.currentText()
            plaka = arac_text.split(' - ')[0] if ' - ' in arac_text else arac_text
            
            # S√ºr√ºc√º adƒ±nƒ± ayƒ±r
            surucu_text = self.surucu.currentText()
            surucu = surucu_text.split(' - ')[0] if ' - ' in surucu_text else surucu_text
            
            # Yeni ceza verisi
            new_penalty = {
                'ID': len(penalties) + 1 if not penalties.empty else 1,
                'Ara√ß Plakasƒ±': plaka,
                'S√ºr√ºc√º': surucu,
                'Ceza Tarihi': self.ceza_tarihi.date().toString("dd.MM.yyyy"),
                'Ceza T√ºr√º': self.ceza_turu.currentText(),
                'Ceza Tutarƒ±': self.ceza_tutari.text().strip(),
                'Ceza Yeri': self.ceza_yeri.text().strip(),
                'Ceza Nedeni': self.ceza_nedeni.toPlainText().strip(),
                '√ñdeme Durumu': self.odeme_durumu.currentText(),
                '√ñdeme Tarihi': self.odeme_tarihi.date().toString("yyyy-MM-dd") if self.odeme_durumu.currentText() in ["√ñdendi", "ƒ∞ndirimli √ñdendi"] else "",
                'Ceza Dosyasƒ±': "",
                'Olu≈üturma Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            # Yeni veriyi ekle
            new_df = pd.DataFrame([new_penalty])
            penalties = pd.concat([penalties, new_df], ignore_index=True)
            
            # Kaydet
            if self.data_manager.save_data('cezalar', penalties):
                QMessageBox.information(self, "Ba≈üarƒ±lƒ±", "Ceza kaydƒ± eklendi.")
                self.accept()
            else:
                QMessageBox.critical(self, "Hata", "Kaydetme hatasƒ±.")
                
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Kaydetme hatasƒ±: {str(e)}")

class AccidentDialog(QDialog):
    """Kaza ekleme dialog"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.data_manager = parent.data_manager if parent else DataManager()
        self.init_ui()
    
    def init_ui(self):
        self.setWindowTitle("Kaza Ekle")
        self.setMinimumWidth(500)
        self.setModal(True)
        
        layout = QFormLayout(self)
        layout.setSpacing(15)
        
        # Form alanlarƒ±
        self.arac_plakasi = QComboBox()
        self.load_vehicles()
        
        self.surucu = QComboBox()
        self.load_drivers()
        
        self.kaza_tarihi = QDateEdit()
        self.kaza_tarihi.setCalendarPopup(True)
        self.kaza_tarihi.setDate(QDate.currentDate())
        
        self.kaza_yeri = QLineEdit()
        self.kaza_yeri.setPlaceholderText("√ñrn: ƒ∞stanbul, Kadƒ±k√∂y")
        
        self.kaza_turu = QComboBox()
        self.kaza_turu.addItems([
            "√áarpƒ±≈üma", "Devrilme", "Yaya Kazasƒ±", "Hayvan Kazasƒ±", 
            "√áukur Kazasƒ±", "Hava Ko≈üullarƒ±", "Fren Arƒ±zasƒ±", "Diƒüer"
        ])
        
        self.hasar_durumu = QComboBox()
        self.hasar_durumu.addItems([
            "Hafif Hasar", "Orta Hasar", "Aƒüƒ±r Hasar", "Total Kayƒ±p"
        ])
        
        self.hasar_tutari = QLineEdit()
        self.hasar_tutari.setPlaceholderText("0.00")
        
        self.sigorta_sirketi = QLineEdit()
        self.sigorta_sirketi.setPlaceholderText("√ñrn: Anadolu Sigorta")
        
        self.sigorta_dosya_no = QLineEdit()
        self.sigorta_dosya_no.setPlaceholderText("Sigorta dosya numarasƒ±")
        
        self.kaza_aciklamasi = QTextEdit()
        self.kaza_aciklamasi.setMaximumHeight(100)
        self.kaza_aciklamasi.setPlaceholderText("Kaza detaylarƒ±nƒ± a√ßƒ±klayƒ±n...")
        
        # Fotoƒüraf b√∂l√ºm√º
        photo_group = QGroupBox("üì∑ Kaza Fotoƒürafƒ±")
        photo_layout = QVBoxLayout(photo_group)
        
        self.photo_label = QLabel("Fotoƒüraf se√ßilmedi")
        self.photo_label.setMinimumSize(200, 150)
        self.photo_label.setMaximumSize(300, 200)
        self.photo_label.setStyleSheet("""
            QLabel {
                border: 2px dashed #bdc3c7;
                border-radius: 5px;
                background-color: #f8f9fa;
                color: #6c757d;
                font-size: 12px;
            }
        """)
        self.photo_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        photo_btn_layout = QHBoxLayout()
        btn_select_photo = QPushButton("üìÅ Fotoƒüraf Se√ß")
        btn_select_photo.clicked.connect(self.select_photo)
        btn_clear_photo = QPushButton("üóëÔ∏è Temizle")
        btn_clear_photo.clicked.connect(self.clear_photo)
        
        photo_btn_layout.addWidget(btn_select_photo)
        photo_btn_layout.addWidget(btn_clear_photo)
        
        photo_layout.addWidget(self.photo_label)
        photo_layout.addLayout(photo_btn_layout)
        
        self.selected_photo_path = ""
        
        # Form'a ekle
        layout.addRow("Ara√ß Plakasƒ±:", self.arac_plakasi)
        layout.addRow("S√ºr√ºc√º:", self.surucu)
        layout.addRow("Kaza Tarihi:", self.kaza_tarihi)
        layout.addRow("Kaza Yeri:", self.kaza_yeri)
        layout.addRow("Kaza T√ºr√º:", self.kaza_turu)
        layout.addRow("Hasar Durumu:", self.hasar_durumu)
        layout.addRow("Hasar Tutarƒ±:", self.hasar_tutari)
        layout.addRow("Sigorta ≈ûirketi:", self.sigorta_sirketi)
        layout.addRow("Sigorta Dosya No:", self.sigorta_dosya_no)
        layout.addRow("Kaza A√ßƒ±klamasƒ±:", self.kaza_aciklamasi)
        layout.addRow(photo_group)
        
        # Butonlar
        btn_layout = QHBoxLayout()
        btn_save = QPushButton("Kaydet")
        btn_save.clicked.connect(self.save_accident)
        btn_cancel = QPushButton("ƒ∞ptal")
        btn_cancel.clicked.connect(self.reject)
        
        btn_layout.addWidget(btn_save)
        btn_layout.addWidget(btn_cancel)
        layout.addRow(btn_layout)
    
    def load_vehicles(self):
        """Mevcut ara√ßlarƒ± y√ºkle"""
        try:
            vehicles = self.data_manager.load_data('araclar')
            self.arac_plakasi.clear()
            
            if not vehicles.empty:
                for _, vehicle in vehicles.iterrows():
                    plaka = vehicle.get('Plaka', '')
                    marka = vehicle.get('Marka', '')
                    model = vehicle.get('Model', '')
                    self.arac_plakasi.addItem(f"{plaka} - {marka} {model}")
        except Exception as e:
            print(f"Ara√ß y√ºkleme hatasƒ±: {e}")
    
    def load_drivers(self):
        """Mevcut s√ºr√ºc√ºleri y√ºkle"""
        try:
            drivers = self.data_manager.load_data('suruculer')
            self.surucu.clear()
            
            if not drivers.empty:
                for _, driver in drivers.iterrows():
                    ad_soyad = driver.get('Ad Soyad', '')
                    tc_kimlik = driver.get('TC Kimlik', '')
                    self.surucu.addItem(f"{ad_soyad} - {tc_kimlik}")
        except Exception as e:
            print(f"S√ºr√ºc√º y√ºkleme hatasƒ±: {e}")
    
    def select_photo(self):
        """Fotoƒüraf se√ß"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, "Kaza Fotoƒürafƒ± Se√ß", "", 
            "Resim Dosyalarƒ± (*.jpg *.jpeg *.png *.bmp *.gif);;T√ºm Dosyalar (*)"
        )
        
        if file_path:
            try:
                pixmap = QPixmap(file_path)
                if not pixmap.isNull():
                    scaled_pixmap = pixmap.scaled(
                        self.photo_label.size(), 
                        Qt.AspectRatioMode.KeepAspectRatio, 
                        Qt.TransformationMode.SmoothTransformation
                    )
                    self.photo_label.setPixmap(scaled_pixmap)
                    self.photo_label.setStyleSheet("""
                        QLabel {
                            border: 2px solid #27ae60;
                            border-radius: 5px;
                            background-color: white;
                        }
                    """)
                    self.selected_photo_path = file_path
                else:
                    QMessageBox.warning(self, "Hata", "Se√ßilen dosya ge√ßerli bir resim deƒüil.")
            except Exception as e:
                QMessageBox.critical(self, "Hata", f"Fotoƒüraf y√ºkleme hatasƒ±: {str(e)}")
    
    def clear_photo(self):
        """Fotoƒürafƒ± temizle"""
        self.photo_label.clear()
        self.photo_label.setText("Fotoƒüraf se√ßilmedi")
        self.photo_label.setStyleSheet("""
            QLabel {
                border: 2px dashed #bdc3c7;
                border-radius: 5px;
                background-color: #f8f9fa;
                color: #6c757d;
                font-size: 12px;
            }
        """)
        self.selected_photo_path = ""
    
    def save_accident(self):
        """Kaza kaydet"""
        if not self.arac_plakasi.currentText():
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen bir ara√ß se√ßin.")
            return
        
        try:
            accidents = self.data_manager.load_data('kazalar')
            
            # Ara√ß plakasƒ±nƒ± ayƒ±r
            arac_text = self.arac_plakasi.currentText()
            plaka = arac_text.split(' - ')[0] if ' - ' in arac_text else arac_text
            
            # S√ºr√ºc√º adƒ±nƒ± ayƒ±r
            surucu_text = self.surucu.currentText()
            surucu = surucu_text.split(' - ')[0] if ' - ' in surucu_text else surucu_text
            
            # Yeni kaza verisi
            new_accident = {
                'ID': len(accidents) + 1 if not accidents.empty else 1,
                'Ara√ß Plakasƒ±': plaka,
                'S√ºr√ºc√º': surucu,
                'Kaza Tarihi': self.kaza_tarihi.date().toString("yyyy-MM-dd"),
                'Kaza Yeri': self.kaza_yeri.text().strip(),
                'Kaza T√ºr√º': self.kaza_turu.currentText(),
                'Hasar Durumu': self.hasar_durumu.currentText(),
                'Hasar Tutarƒ±': self.hasar_tutari.text().strip(),
                'Sigorta ≈ûirketi': self.sigorta_sirketi.text().strip(),
                'Sigorta Dosya No': self.sigorta_dosya_no.text().strip(),
                'Kaza A√ßƒ±klamasƒ±': self.kaza_aciklamasi.toPlainText().strip(),
                'Kaza Dosyasƒ±': self.selected_photo_path if self.selected_photo_path else "",
                'Olu≈üturma Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            # Yeni veriyi ekle
            new_df = pd.DataFrame([new_accident])
            accidents = pd.concat([accidents, new_df], ignore_index=True)
            
            # Kaydet
            if self.data_manager.save_data('kazalar', accidents):
                QMessageBox.information(self, "Ba≈üarƒ±lƒ±", "Kaza kaydƒ± eklendi.")
                self.accept()
            else:
                QMessageBox.critical(self, "Hata", "Kaydetme hatasƒ±.")
                
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Kaydetme hatasƒ±: {str(e)}")

class ExpenseDialog(QDialog):
    """Gider ekleme dialog"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.data_manager = parent.data_manager if parent else DataManager()
        self.init_ui()
    
    def init_ui(self):
        self.setWindowTitle("Gider Ekle")
        self.setMinimumWidth(500)
        self.setModal(True)
        
        layout = QFormLayout(self)
        layout.setSpacing(15)
        
        # Form alanlarƒ±
        self.arac_plakasi = QComboBox()
        self.load_vehicles()
        
        self.gider_turu = QComboBox()
        self.gider_turu.addItems([
            "Yakƒ±t", "Otoyol", "Otopark", "Temizlik", "Yƒ±kama", "Diƒüer"
        ])
        
        self.tarih = QDateEdit()
        self.tarih.setCalendarPopup(True)
        self.tarih.setDate(QDate.currentDate())
        
        self.tutar = QLineEdit()
        self.tutar.setPlaceholderText("0.00")
        
        self.aciklama = QTextEdit()
        self.aciklama.setMaximumHeight(100)
        
        # Form'a ekle
        layout.addRow("Ara√ß Plakasƒ±:", self.arac_plakasi)
        layout.addRow("Gider T√ºr√º:", self.gider_turu)
        layout.addRow("Tarih:", self.tarih)
        layout.addRow("Tutar:", self.tutar)
        layout.addRow("A√ßƒ±klama:", self.aciklama)
        
        # Butonlar
        btn_layout = QHBoxLayout()
        btn_save = QPushButton("Kaydet")
        btn_save.clicked.connect(self.save_expense)
        btn_cancel = QPushButton("ƒ∞ptal")
        btn_cancel.clicked.connect(self.reject)
        
        btn_layout.addWidget(btn_save)
        btn_layout.addWidget(btn_cancel)
        layout.addRow(btn_layout)
    
    def load_vehicles(self):
        """Mevcut ara√ßlarƒ± y√ºkle"""
        try:
            vehicles = self.data_manager.load_data('araclar')
            self.arac_plakasi.clear()
            
            if not vehicles.empty:
                for _, vehicle in vehicles.iterrows():
                    plaka = vehicle.get('Plaka', '')
                    marka = vehicle.get('Marka', '')
                    model = vehicle.get('Model', '')
                    self.arac_plakasi.addItem(f"{plaka} - {marka} {model}")
        except Exception as e:
            print(f"Ara√ß y√ºkleme hatasƒ±: {e}")
    
    def save_expense(self):
        """Gider kaydet"""
        if not self.arac_plakasi.currentText():
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen bir ara√ß se√ßin.")
            return
        
        try:
            expenses = self.data_manager.load_data('giderler')
            
            # Ara√ß plakasƒ±nƒ± ayƒ±r
            arac_text = self.arac_plakasi.currentText()
            plaka = arac_text.split(' - ')[0] if ' - ' in arac_text else arac_text
            
            # Yeni gider verisi
            new_expense = {
                'ID': len(expenses) + 1 if not expenses.empty else 1,
                'Ara√ß Plakasƒ±': plaka,
                'Gider T√ºr√º': self.gider_turu.currentText(),
                'Tarih': self.tarih.date().toString("yyyy-MM-dd"),
                'Tutar': self.tutar.text().strip(),
                'A√ßƒ±klama': self.aciklama.toPlainText().strip(),
                'Fi≈ü Dosyasƒ±': "",
                'Olu≈üturma Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            # Yeni veriyi ekle
            new_df = pd.DataFrame([new_expense])
            expenses = pd.concat([expenses, new_df], ignore_index=True)
            
            # Kaydet
            if self.data_manager.save_data('giderler', expenses):
                QMessageBox.information(self, "Ba≈üarƒ±lƒ±", "Gider eklendi.")
                self.accept()
            else:
                QMessageBox.critical(self, "Hata", "Kaydetme hatasƒ±.")
                
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Kaydetme hatasƒ±: {str(e)}")
            

class ReportsPanel(QWidget):
    def __init__(self, data_manager):
        super().__init__()
        self.data_manager = data_manager
        self.init_ui()
        self.load_reports()

    @staticmethod
    def tr_money(val):
        try:
            return f"{float(val):,.2f} TL".replace(",", "_").replace(".", ",").replace("_", ".")
        except:
            return str(val)
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        # Ba≈ülƒ±k
        title = QLabel("Raporlar & ƒ∞statistikler")
        title.setStyleSheet("font-size: 24px; font-weight: bold; color: #2c3e50;")
        layout.addWidget(title)
        # Rapor se√ßenekleri
        report_group = QGroupBox("Rapor T√ºrleri")
        report_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
            }
        """)
        
        report_layout = QGridLayout(report_group)
        
        # Rapor butonlarƒ±
        btn_vehicle_info_report = QPushButton("üìÑ Ara√ß Bilgi Formu")
        btn_vehicle_info_report.setStyleSheet("""
            QPushButton {
                background-color: #8e44ad;
                color: white;
                border: none;
                padding: 15px;
                border-radius: 5px;
                font-weight: bold;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #6c3483;
            }
        """)
        btn_vehicle_info_report.clicked.connect(self.create_vehicle_info_report)
        report_layout.addWidget(btn_vehicle_info_report, 1, 1)  # Uygun bir yere ekleyin
        
        btn_vehicle_report = QPushButton("üöó Ara√ß Raporu")
        btn_vehicle_report.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 15px;
                border-radius: 5px;
                font-weight: bold;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        btn_vehicle_report.clicked.connect(self.generate_vehicle_report)
        
        btn_maintenance_report = QPushButton("üîß Bakƒ±m Raporu")
        btn_maintenance_report.setStyleSheet("""
            QPushButton {
                background-color: #e67e22;
                color: white;
                border: none;
                padding: 15px;
                border-radius: 5px;
                font-weight: bold;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #d35400;
            }
        """)
        btn_maintenance_report.clicked.connect(self.generate_maintenance_report)
        
        btn_expense_report = QPushButton("üí∞ Gider Raporu")
        btn_expense_report.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 15px;
                border-radius: 5px;
                font-weight: bold;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        btn_expense_report.clicked.connect(self.generate_expense_report)
        
        # Butonlarƒ± layout'a ekle
        report_layout.addWidget(btn_vehicle_report, 0, 0)
        report_layout.addWidget(btn_maintenance_report, 0, 1)
        report_layout.addWidget(btn_expense_report, 1, 0)
        report_group.setLayout(report_layout)
        layout.addWidget(report_group)
        
        # ƒ∞statistikler
        stats_group = QGroupBox("√ñzet ƒ∞statistikler")
        stats_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
            }
        """)
        
        stats_layout = QVBoxLayout(stats_group)
        
        self.stats_text = QTextEdit()
        self.stats_text.setMaximumHeight(200)
        self.stats_text.setReadOnly(True)
        stats_layout.addWidget(self.stats_text)
        
        layout.addWidget(stats_group)
    
    def load_reports(self):
        """Rapor istatistiklerini y√ºkle"""
        try:
            # Ara√ß sayƒ±sƒ±
            vehicles = self.data_manager.load_data('araclar')
            vehicle_count = len(vehicles) if not vehicles.empty else 0
            
            # Bakƒ±m sayƒ±sƒ±
            maintenance = self.data_manager.load_data('bakimlar')
            maintenance_count = len(maintenance) if not maintenance.empty else 0
            
            # Gider sayƒ±sƒ±
            expenses = self.data_manager.load_data('giderler')
            expense_count = len(expenses) if not expenses.empty else 0
            
            # S√ºr√ºc√º sayƒ±sƒ±
            drivers = self.data_manager.load_data('suruculer')
            driver_count = len(drivers) if not drivers.empty else 0
            
            # Toplam gider
            total_expense = 0
            if not expenses.empty:
                for _, expense in expenses.iterrows():
                    amount = expense.get('Tutar', '0')
                    try:
                        total_expense += float(amount)
                    except:
                        pass
            
            # ƒ∞statistik metni olu≈ütur
            stats_text = f"""
üìä √ñZET ƒ∞STATƒ∞STƒ∞KLER

üöó Toplam Ara√ß: {vehicle_count}
üë®‚Äçüíº Toplam S√ºr√ºc√º: {driver_count}
üîß Toplam Bakƒ±m: {maintenance_count}
üí∞ Toplam Gider: {total_expense:.2f} ‚Ç∫
üìã Toplam Gider Kaydƒ±: {expense_count}

üí° Raporlar panelinden detaylƒ± raporlar olu≈üturabilirsiniz.
            """
            
            self.stats_text.setText(stats_text.strip())
            
        except Exception as e:
            self.stats_text.setText(f"ƒ∞statistik y√ºkleme hatasƒ±: {str(e)}")
    
    def create_vehicle_info_report(self):
        from PyQt5.QtWidgets import QInputDialog, QMessageBox, QFileDialog
        import os
        import pandas as pd
        import math
        from datetime import datetime

        plaka, ok = QInputDialog.getText(self, "Plaka Girin", "Raporunu almak istediƒüiniz plakayƒ± girin:")
        if not ok or not plaka:
            return

        # Ara√ß verisini bul
        vehicles = self.data_manager.load_data('araclar')
        arac = vehicles[vehicles['Plaka'].astype(str).str.strip().str.upper() == plaka.strip().upper()]
        if arac.empty:
            QMessageBox.warning(self, "Uyarƒ±", f"{plaka} plakalƒ± ara√ß bulunamadƒ±.")
            return
        arac = arac.iloc[0]

        # Fotoƒüraf yolu
        foto_path = arac.get('Evrak Yolu', '') or arac.get('Fotoƒüraf Yolu', '')
        if not isinstance(foto_path, str) or not foto_path or (isinstance(foto_path, float) and math.isnan(foto_path)) or not os.path.exists(str(foto_path)):
            foto_path = "araba_icon.png"

        # Bakƒ±m verilerini al
        bakimlar = self.data_manager.load_data('bakimlar')
        giderler = self.data_manager.load_data('giderler')
        
        # Bu araca ait bakƒ±m ve giderleri filtrele
        arac_bakimlar = bakimlar[bakimlar['Ara√ß Plakasƒ±'].astype(str).str.strip().str.upper() == plaka.strip().upper()]
        arac_giderler = giderler[giderler['Ara√ß Plakasƒ±'].astype(str).str.strip().str.upper() == plaka.strip().upper()]

        # Dinamik yƒ±l hesaplama - Ara√ßƒ±n filoda olduƒüu yƒ±llarƒ± bul
        current_year = datetime.now().year
        all_years = set()
        
        # Bakƒ±m tarihlerinden yƒ±llarƒ± √ßƒ±kar
        for tarih in arac_bakimlar['Bakƒ±m Tarihi'].astype(str):
            try:
                if tarih and tarih != 'nan':
                    year = int(tarih[:4])  # ƒ∞lk 4 karakter yƒ±l
                    all_years.add(year)
            except:
                pass
        
        # Gider tarihlerinden yƒ±llarƒ± √ßƒ±kar
        for tarih in arac_giderler['Tarih'].astype(str):
            try:
                if tarih and tarih != 'nan':
                    year = int(tarih[:4])  # ƒ∞lk 4 karakter yƒ±l
                    all_years.add(year)
            except:
                pass
        
        # Ara√ß yƒ±lƒ±ndan g√ºn√ºm√ºze kadar olan yƒ±llarƒ± ekle
        try:
            arac_yili = int(str(arac.get('Yƒ±l', current_year))[:4])
            for year in range(arac_yili, current_year + 1):
                all_years.add(year)
        except:
            pass
        
        # En az son 3 yƒ±l olsun
        if len(all_years) < 3:
            for year in range(current_year-2, current_year+1):
                all_years.add(year)
        
        # Yƒ±llarƒ± sƒ±rala
        years_list = sorted(list(all_years))
        yearly_summary = {}
        
        for year in years_list:
            yearly_summary[year] = {
                'bakim_sayisi': 0,
                'bakim_tutari': 0,
                'gider_sayisi': 0,
                'gider_tutari': 0
            }
            
            # O yƒ±lƒ±n bakƒ±mlarƒ±
            year_bakimlar = arac_bakimlar[arac_bakimlar['Bakƒ±m Tarihi'].astype(str).str.contains(str(year))]
            yearly_summary[year]['bakim_sayisi'] = len(year_bakimlar)
            yearly_summary[year]['bakim_tutari'] = year_bakimlar['Tutar'].astype(float).sum() if not year_bakimlar.empty else 0
            
            # O yƒ±lƒ±n giderleri
            year_giderler = arac_giderler[arac_giderler['Tarih'].astype(str).str.contains(str(year))]
            yearly_summary[year]['gider_sayisi'] = len(year_giderler)
            yearly_summary[year]['gider_tutari'] = year_giderler['Tutar'].astype(float).sum() if not year_giderler.empty else 0
        
        # Sadece veri i√ßeren yƒ±llarƒ± filtrele
        years_with_data = []
        for year in years_list:
            summary = yearly_summary[year]
            if summary['bakim_sayisi'] > 0 or summary['gider_sayisi'] > 0:
                years_with_data.append(year)
        
        # Eƒüer hi√ß veri yoksa, en az son 3 yƒ±lƒ± g√∂ster
        if not years_with_data:
            current_year = datetime.now().year
            for year in range(current_year-2, current_year+1):
                years_with_data.append(year)
                if year not in yearly_summary:
                    yearly_summary[year] = {
                        'bakim_sayisi': 0,
                        'bakim_tutari': 0,
                        'gider_sayisi': 0,
                        'gider_tutari': 0
                    }

        # Format se√ßimi - Butonlu dialog
        format_choice = self.show_format_selection_dialog()
        if not format_choice:
            return

        # Rapor verilerini hazƒ±rla
        rapor_data = []
        
        # 1. Ara√ß Bilgileri - Ba≈ülƒ±k satƒ±rƒ± kaldƒ±rƒ±ldƒ±
        # Fotoƒüraf varsa icon, yoksa bo≈ü
        foto_icon = "üöó" if foto_path and foto_path != "araba_icon.png" and os.path.exists(foto_path) else "üöó"
        
        # Son g√ºncel KM bilgilerini al ve kar≈üƒ±la≈ütƒ±r
        son_km_araclar = arac.get('Son KM', '')
        son_km_araclar = "" if str(son_km_araclar).lower() == "nan" else son_km_araclar
        
        # Bakƒ±mlar tablosundan son g√ºncel KM bilgisini al
        arac_bakimlar = bakimlar[bakimlar['Ara√ß Plakasƒ±'].astype(str).str.strip().str.upper() == plaka.strip().upper()]
        son_km_bakimlar = 0
        if not arac_bakimlar.empty:
            # KM alanƒ±ndaki deƒüerleri sayƒ±sal deƒüerlere √ßevir ve en y√ºksek olanƒ± al
            km_values = arac_bakimlar['KM'].dropna()
            if not km_values.empty:
                try:
                    # Sayƒ±sal olmayan deƒüerleri filtrele
                    numeric_km_values = []
                    for km_val in km_values:
                        try:
                            numeric_km = float(str(km_val).replace(',', '').replace(' ', ''))
                            numeric_km_values.append(numeric_km)
                        except:
                            continue
                    
                    if numeric_km_values:
                        son_km_bakimlar = max(numeric_km_values)
                except:
                    son_km_bakimlar = 0
        
        # ƒ∞ki KM deƒüerini kar≈üƒ±la≈ütƒ±r ve en b√ºy√ºk olanƒ± al
        guncel_km = 0
        try:
            if son_km_araclar and str(son_km_araclar).replace(',', '').replace(' ', '').replace('.', '').isdigit():
                km_araclar = float(str(son_km_araclar).replace(',', '').replace(' ', ''))
                guncel_km = max(guncel_km, km_araclar)
        except:
            pass
        
        guncel_km = max(guncel_km, son_km_bakimlar)
        
        # G√ºncel KM deƒüerini formatla
        if guncel_km > 0:
            guncel_km_str = f"{guncel_km:,.0f}".replace(",", ".")
        else:
            guncel_km_str = "KM bilgisi bulunamadƒ±"
        
        for key, label in [
            ('Plaka', 'PLAKA'),
            ('Marka', 'MARKA'),
            ('Model', 'MODEL'),
            ('Yƒ±l', 'YIL'),
            ('≈ûasi No', '≈ûASƒ∞ NO'),
            ('Sigorta Biti≈ü', 'Sƒ∞GORTA Bƒ∞Tƒ∞≈û'),
            ('Kasko Biti≈ü', 'KASKO Bƒ∞Tƒ∞≈û'),
            ('Muayene Biti≈ü', 'MUAYENE Bƒ∞Tƒ∞≈û'),
            ('Birim', 'Bƒ∞Rƒ∞M'),
            ('≈ûof√∂r', '≈ûOF√ñR'),
            ('Hizmet', 'Hƒ∞ZMET')
        ]:
            value = arac.get(key, '')
            value = "" if str(value).lower() == "nan" else value
            rapor_data.append(["", label, value])
        
        # G√ºncel KM bilgisini ekle
        rapor_data.append(["", "G√úNCEL KM", guncel_km_str])
        
        # 2. Bo≈ü satƒ±r
        rapor_data.append(["", "", ""])
        
        # 3. Yƒ±llƒ±k Bakƒ±m ve Gider √ñzeti - Kompakt Tablo
        rapor_data.append(["", "YILLIK BAKIM VE Gƒ∞DER √ñZETƒ∞", ""])
        
        # Tablo ba≈ülƒ±ƒüƒ± - Bo≈ü s√ºtun kaldƒ±rƒ±ldƒ±, gider sayƒ±sƒ± ve gider tutarƒ± s√ºtunlarƒ± kaldƒ±rƒ±ldƒ±
        rapor_data.append(["Yƒ±l", "Bakƒ±m Sayƒ±sƒ±", "Bakƒ±m Tutarƒ±", "Toplam Tutar"])
        
        # T√ºrk√ße para birimi formatƒ± i√ßin yardƒ±mcƒ± fonksiyon
        def tr_money(val):
            try:
                return f"{val:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".") + " TL"
            except:
                return f"{val} TL"
        
        # Yƒ±llƒ±k veriler - Bo≈ü s√ºtun kaldƒ±rƒ±ldƒ±, gider sayƒ±sƒ± ve gider tutarƒ± s√ºtunlarƒ± kaldƒ±rƒ±ldƒ±
        # 0 deƒüerli yƒ±llar gizlendi
        for year in years_with_data:
            summary = yearly_summary[year]
            # Sadece bakƒ±m sayƒ±sƒ± 0'dan b√ºy√ºk olan yƒ±llarƒ± g√∂ster
            if summary['bakim_sayisi'] > 0:
                rapor_data.append([
                    f"{year}",
                    f"{summary['bakim_sayisi']}",
                    tr_money(summary['bakim_tutari']),
                    tr_money(summary['bakim_tutari'])  # Toplam tutar artƒ±k sadece bakƒ±m tutarƒ±
                ])
        
        # Toplam satƒ±rƒ± - Sadece g√∂sterilen yƒ±llar i√ßin hesaplama (0 deƒüerli yƒ±llar hari√ß)
        total_bakim_sayisi = sum(yearly_summary[year]['bakim_sayisi'] for year in years_with_data if yearly_summary[year]['bakim_sayisi'] > 0)
        total_bakim_tutari = sum(yearly_summary[year]['bakim_tutari'] for year in years_with_data if yearly_summary[year]['bakim_sayisi'] > 0)
        
        # Sadece veri varsa toplam satƒ±rƒ±nƒ± ekle - Bo≈ü satƒ±r kaldƒ±rƒ±ldƒ±
        if total_bakim_sayisi > 0:
            rapor_data.append([
                "TOPLAM",
                f"{total_bakim_sayisi}",
                tr_money(total_bakim_tutari),
                tr_money(total_bakim_tutari)  # Toplam tutar artƒ±k sadece bakƒ±m tutarƒ±
            ])

        # DataFrame olu≈ütur - Dinamik s√ºtun sayƒ±sƒ±
        max_cols = max(len(row) for row in rapor_data)
        columns = [f"S√ºtun_{i+1}" for i in range(max_cols)]
        df = pd.DataFrame(rapor_data, columns=columns)  # type: ignore

        success_count = 0
        total_formats = 1 if format_choice != "T√ºm√º" else 2

        # Word olu≈ütur
        if format_choice in ["Word (.docx)", "T√ºm√º"]:
            try:
                from docx import Document
                from docx.shared import Inches, Pt, Cm, RGBColor
                from docx.enum.text import WD_ALIGN_PARAGRAPH
                from docx.oxml import parse_xml
                import os
                import pandas as pd
                file_path, _ = QFileDialog.getSaveFileName(self, "Word Olarak Kaydet", f"{plaka}_bilgi_formu.docx", "Word Dosyasƒ± (*.docx)")
                if file_path:
                    doc = Document()
                    section = doc.sections[0]
                    section.left_margin = Cm(1)
                    section.right_margin = Cm(1)
                    section.top_margin = Cm(1)
                    section.bottom_margin = Cm(1)
                    plaka = plaka.upper()
                    # Fotoƒüraf
                    foto_path = os.path.join("veri", "arac_fotograflari", f"{plaka}.jpg")
                    if not os.path.exists(foto_path):
                        foto_path = os.path.join("veri", "arac_fotograflari", f"{plaka}.png")
                    if not os.path.exists(foto_path):
                        foto_path = "araba_icon.png"
                    if os.path.exists(foto_path):
                        try:
                            doc.add_picture(foto_path, width=Inches(2.0))
                            last_paragraph = doc.paragraphs[-1]
                            last_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
                        except Exception as e:
                            print("Word fotoƒüraf ekleme hatasƒ±:", repr(e))
                    # Ba≈ülƒ±k
                    title = doc.add_heading(f'{plaka} PLAKALI ARA√á Bƒ∞LGƒ∞ FORMU', 0)
                    title.alignment = WD_ALIGN_PARAGRAPH.CENTER
                    doc.add_paragraph("")
                    # Ara√ß Bilgileri Tablosu (4 s√ºtun, PDF ile aynƒ± geni≈ülik ve font)
                    arac_bilgi_pairs = []
                    for row in rapor_data:
                        if len(row) > 1 and row[1] == "YILLIK BAKIM VE Gƒ∞DER √ñZETƒ∞":
                            break
                        if len(row) >= 3:
                            baslik = row[1]
                            deger = row[2]
                            if baslik in ["KASKO Bƒ∞Tƒ∞≈û", "Sƒ∞GORTA Bƒ∞Tƒ∞≈û", "MUAYENE Bƒ∞Tƒ∞≈û"] and deger:
                                try:
                                    tarih = pd.to_datetime(deger, dayfirst=True)
                                    deger = tarih.strftime("%d.%m.%Y")
                                except:
                                    pass
                            arac_bilgi_pairs.append((baslik, deger))
                    rows_4sutun = []
                    for i in range(0, len(arac_bilgi_pairs), 2):
                        left = arac_bilgi_pairs[i]
                        right = arac_bilgi_pairs[i+1] if i+1 < len(arac_bilgi_pairs) else ("", "")
                        rows_4sutun.append([left[0], left[1], right[0], right[1]])
                    table1 = doc.add_table(rows=len(rows_4sutun), cols=4)
                    table1.style = 'Table Grid'
                    table1.allow_autofit = False
                    for i, row_data in enumerate(rows_4sutun):
                        for j in range(4):
                            val = row_data[j] if j < len(row_data) else ""
                            cell = table1.cell(i, j)
                            cell.text = str(val)
                            for paragraph in cell.paragraphs:
                                paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
                                for run in paragraph.runs:
                                    run.font.name = 'Calibri'
                                    run.font.size = Pt(10)
                            cell._tc.get_or_add_tcPr().append(
                                parse_xml(r'<w:tcW xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main" w:w="2692" w:type="dxa"/>')
                            )
                    doc.add_paragraph("")
                    # Yƒ±llƒ±k √ñzet Tablosu (4 s√ºtun, ba≈ülƒ±k renkli, PDF ile aynƒ±)
                    yillik_ozet_rows = []
                    yillik_ozet_basladi = False
                    for row in rapor_data:
                        if len(row) > 1 and row[1] == "YILLIK BAKIM VE Gƒ∞DER √ñZETƒ∞":
                            yillik_ozet_basladi = True
                            continue
                        if yillik_ozet_basladi:
                            yillik_ozet_rows.append(row)
                    table2 = doc.add_table(rows=len(yillik_ozet_rows), cols=4)
                    table2.style = 'Table Grid'
                    table2.allow_autofit = False
                    for i, row_data in enumerate(yillik_ozet_rows):
                        for j in range(4):
                            val = row_data[j] if j < len(row_data) else ""
                            cell = table2.cell(i, j)
                            cell.text = str(val)
                            for paragraph in cell.paragraphs:
                                paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
                                for run in paragraph.runs:
                                    run.font.name = 'Calibri'
                                    run.font.size = Pt(10)
                            cell._tc.get_or_add_tcPr().append(
                                parse_xml(r'<w:tcW xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main" w:w="2692" w:type="dxa"/>')
                            )
                        # Ba≈ülƒ±k satƒ±rƒ±nƒ± renkli ve kalƒ±n yap
                        if i == 0:
                            for cell in table2.rows[i].cells:
                                cell_par = cell.paragraphs[0]
                                for run in cell_par.runs:
                                    run.bold = True
                                    run.font.size = Pt(11)
                                    run.font.color.rgb = RGBColor(255,255,255)  # Beyaz
                                cell._tc.get_or_add_tcPr().append(
                                    parse_xml(r'<w:shd xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main" w:fill="A23B72"/>')
                                )
                        # Toplam satƒ±rƒ±nƒ± renkli ve kalƒ±n yap
                        if row_data[0] == "TOPLAM":
                            for cell in table2.rows[i].cells:
                                cell_par = cell.paragraphs[0]
                                for run in cell_par.runs:
                                    run.bold = True
                                    run.font.size = Pt(11)
                                    run.font.color.rgb = RGBColor(255,255,255)  # Beyaz
                                cell._tc.get_or_add_tcPr().append(
                                    parse_xml(r'<w:shd xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main" w:fill="F18F01"/>')
                                )
                    doc.save(file_path)
                    success_count += 1
            except ImportError:
                QMessageBox.warning(self, "K√ºt√ºphane Hatasƒ±", "Word olu≈üturmak i√ßin python-docx k√ºt√ºphanesi gerekli. L√ºtfen 'pip install python-docx' komutunu √ßalƒ±≈ütƒ±rƒ±n.")
            except Exception as e:
                QMessageBox.warning(self, "Word Hatasƒ±", f"Word dosyasƒ± olu≈üturulamadƒ±: {str(e)}")


        # PDF olu≈ütur
        if format_choice in ["PDF (.pdf)", "T√ºm√º"]:
            try:
                from reportlab.lib.pagesizes import A4
                from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
                from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
                from reportlab.lib.units import inch, cm
                from reportlab.lib import colors
                from reportlab.pdfbase import pdfmetrics
                from reportlab.pdfbase.ttfonts import TTFont
                from reportlab.pdfbase.pdfmetrics import stringWidth
                
                
                # T√ºrk√ße karakter desteƒüi i√ßin font y√ºkleme
                try:
                    # Windows'ta varsayƒ±lan fontlarƒ± dene
                    font_paths = [
                        "C:/Windows/Fonts/arial.ttf",
                        "C:/Windows/Fonts/calibri.ttf", 
                        "C:/Windows/Fonts/tahoma.ttf",
                        "C:/Windows/Fonts/verdana.ttf"
                    ]
                    
                    turkish_font = None
                    for font_path in font_paths:
                        if os.path.exists(font_path):
                            try:
                                pdfmetrics.registerFont(TTFont('TurkishFont', font_path))
                                turkish_font = 'TurkishFont'
                                break
                            except:
                                continue
                    
                    # Font bulunamazsa varsayƒ±lan font kullan
                    if not turkish_font:
                        turkish_font = 'Helvetica'
                except:
                    turkish_font = 'Helvetica'
                
                file_path, _ = QFileDialog.getSaveFileName(self, "PDF Olarak Kaydet", f"{plaka}_bilgi_formu.pdf", "PDF Dosyasƒ± (*.pdf)")
                if file_path:
                    # A4 boyutu ayarlarƒ±
                    doc = SimpleDocTemplate(file_path, pagesize=(A4),
                                            leftMargin=1*cm, rightMargin=1*cm,
                                            topMargin=1*cm, bottomMargin=1*cm)
                    story = []
                    
                    # Fotoƒüraf yolu belirle
                    foto_path = os.path.join("veri", "arac_fotograflari", f"{plaka}.jpg")
                    if not os.path.exists(foto_path):
                        foto_path = os.path.join("veri", "arac_fotograflari", f"{plaka}.png")
                    if not os.path.exists(foto_path):
                        foto_path = "araba_icon.png"

                    # Fotoƒürafƒ± ekle
                    if os.path.exists(foto_path):
                        try:
                            img = Image(foto_path, width=150, height=150)
                            img.hAlign = 'CENTER'
                            story.append(img)
                            story.append(Spacer(1, 10))
                        except Exception as e:
                            print("PDF fotoƒüraf ekleme hatasƒ±:", e)
                    # Ba≈ülƒ±k
                    styles = getSampleStyleSheet()
                    title_style = ParagraphStyle(
                        'CustomTitle',
                        parent=styles['Heading1'],
                        fontSize=18,
                        spaceAfter=20,
                        alignment=1,  # Center
                        fontName=turkish_font
                    )
                    title = Paragraph(f'{plaka} PLAKALI ARA√á Bƒ∞LGƒ∞ FORMU', title_style)
                    story.append(title)

                    
                    # Ara√ß fotoƒürafƒ±nƒ± ba≈ülƒ±ƒüƒ±n altƒ±na ekle
                    foto_path = os.path.join("veri", "arac_fotograflari", f"{plaka}.jpg")
                    if not os.path.exists(foto_path):
                        foto_path = os.path.join("veri", "arac_fotograflari", f"{plaka}.png")
                    if not os.path.exists(foto_path):
                        foto_path = "araba_icon.png"
                    
                    
                    # ƒ∞ki ayrƒ± tablo olu≈ütur - Ara√ß bilgileri ve yƒ±llƒ±k √∂zet i√ßin
                    story.append(Spacer(1, 10))
                    
                    # 1. Ara√ß Bilgileri Tablosu (3 s√ºtunlu)
                    arac_bilgileri_data = []
                    yillik_ozet_data = []
                    current_section = "arac_bilgileri"
                    
                    for row in rapor_data:
                        if len(row) >= 2 and row[1] == "YILLIK BAKIM VE Gƒ∞DER √ñZETƒ∞":
                            current_section = "yillik_ozet"
                            continue
                        
                        if current_section == "arac_bilgileri":
                            if len(row) >= 3:
                                arac_bilgileri_data.append([row[0], row[1], row[2]])
                            elif len(row) == 2:
                                arac_bilgileri_data.append([row[0], row[1], ""])
                            elif len(row) == 1:
                                arac_bilgileri_data.append([row[0], "", ""])
                        elif current_section == "yillik_ozet":
                            if len(row) >= 4:
                                # 4 s√ºtunlu veriyi al (bo≈ü s√ºtun kaldƒ±rƒ±ldƒ±, gider sayƒ±sƒ± ve gider tutarƒ± s√ºtunlarƒ± kaldƒ±rƒ±ldƒ±)
                                yillik_ozet_data.append(row[:4])
                            elif len(row) >= 2:
                                # 2 s√ºtunlu satƒ±rlarƒ± 4 s√ºtuna geni≈ület
                                expanded_row = [""] * 4
                                for i, val in enumerate(row):
                                    if i < 4:
                                        expanded_row[i] = val
                                yillik_ozet_data.append(expanded_row)
                    
                     # --- 5 S√ºtunlu Ara√ß Bilgileri Tablosu ---
                    # Bilgi ba≈ülƒ±klarƒ± ve deƒüerleri hazƒ±rlanƒ±yor
                    from reportlab.platypus import Paragraph
                    from reportlab.lib.styles import ParagraphStyle
                    cell_style = ParagraphStyle('cell', fontName=turkish_font, fontSize=9)
                    bilgi_listesi = []
                    for row in arac_bilgileri_data:
                        if len(row) >= 3:
                            baslik = row[1]
                            deger = row[2]
                            if baslik in ["KASKO Bƒ∞Tƒ∞≈û", "Sƒ∞GORTA Bƒ∞Tƒ∞≈û", "MUAYENE Bƒ∞Tƒ∞≈û"] and deger:
                                try:
                                    tarih = str(deger).split()[0]
                                    if '-' in tarih:
                                        yil, ay, gun = tarih.split('-')
                                        deger = f"{gun}.{ay}.{yil}"
                                    elif '/' in tarih:
                                        gun, ay, yil = tarih.split('/')
                                        deger = f"{gun}.{ay}.{yil}"
                                    else:
                                        deger = tarih
                                except:
                                    pass
                            bilgi_listesi.append((baslik, deger))
                    rows = []
                    for i in range(0, len(bilgi_listesi), 2):
                        b1, v1 = bilgi_listesi[i]
                        if i+1 < len(bilgi_listesi):
                            b2, v2 = bilgi_listesi[i+1]
                        else:
                            b2, v2 = "", ""
                        # Metinleri Paragraph ile sƒ±ƒüdƒ±r - 4 s√ºtunlu yapƒ±
                        row = [Paragraph(str(b1), cell_style), Paragraph(str(v1), cell_style), Paragraph(str(b2), cell_style), Paragraph(str(v2), cell_style)]
                        rows.append(row)
                    # A4 sayfasƒ± kullanƒ±labilir geni≈ülik: 21cm - 2cm kenar bo≈üluklarƒ± = 19cm
                    col_widths = [4.75*cm, 4.75*cm, 4.75*cm, 4.75*cm]  # Toplam 19 cm (sayfa geni≈üliƒüine g√∂re)
                    table = Table(rows, colWidths=col_widths, hAlign='CENTER')
                    table_style = TableStyle([
                        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
                        ('FONTNAME', (0, 0), (-1, -1), turkish_font),
                        ('FONTSIZE', (0, 0), (-1, -1), 9),
                        ('BACKGROUND', (0, 0), (0, len(rows)-1), colors.HexColor('#F7F7F7')),
                        ('BACKGROUND', (2, 0), (2, len(rows)-1), colors.HexColor('#F7F7F7')),
                        ('BACKGROUND', (1, 0), (1, len(rows)-1), colors.white),
                        ('BACKGROUND', (3, 0), (3, len(rows)-1), colors.white),
                    ])
                    table.setStyle(table_style)
                    story.append(table)
                    story.append(Spacer(1, 20))

                    # --- Eski tabloyu kaldƒ±rdƒ±k, yeni tablo yukarƒ±da eklendi ---
                    
                    # 2. Yƒ±llƒ±k √ñzet Tablosu (4 s√ºtunlu - Bo≈ü s√ºtun kaldƒ±rƒ±ldƒ±, gider sayƒ±sƒ± ve gider tutarƒ± s√ºtunlarƒ± kaldƒ±rƒ±ldƒ±)
                    if yillik_ozet_data:
                        yillik_col_widths = [4.75*cm, 4.75*cm, 4.75*cm, 4.75*cm]  # 4 s√ºtun - Toplam 19 cm (sayfa geni≈üliƒüine g√∂re)
                        yillik_table = Table(yillik_ozet_data, colWidths=yillik_col_widths)
                        
                        # Yƒ±llƒ±k √∂zet tablo stilleri - D√ºzg√ºn hizalanmƒ±≈ü kenarlƒ±klar
                        yillik_table_style = TableStyle([
                            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                            ('GRID', (0, 0), (-1, -1), 1, colors.black),
                            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
                            ('TOPPADDING', (0, 0), (-1, -1), 8),
                            ('LEFTPADDING', (0, 0), (-1, -1), 6),
                            ('RIGHTPADDING', (0, 0), (-1, -1), 6),
                            ('FONTNAME', (0, 0), (-1, -1), turkish_font),
                            ('FONTSIZE', (0, 0), (-1, -1), 9),
                            ('FONTNAME', (0, 0), (-1, 0), turkish_font),  # Ba≈ülƒ±k satƒ±rƒ±
                            ('FONTSIZE', (0, 0), (-1, 0), 10),
                            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#A23B72')),  # Ba≈ülƒ±k arka planƒ±
                            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),  # Ba≈ülƒ±k yazƒ± rengi
                            ('FONTNAME', (0, -1), (-1, -1), turkish_font),  # Toplam satƒ±rƒ±
                            ('FONTSIZE', (0, -1), (-1, -1), 10),
                            ('BACKGROUND', (0, -1), (-1, -1), colors.HexColor('#F18F01')),  # Toplam arka planƒ±
                            ('TEXTCOLOR', (0, -1), (-1, -1), colors.white),  # Toplam yazƒ± rengi
                        ])
                        
                        # √ñzel satƒ±r stilleri uygula
                        for i, row_data in enumerate(yillik_ozet_data):
                            if len(row_data) >= 2:
                                bilgi = row_data[1]
                                
                                # Ana ba≈ülƒ±k satƒ±rƒ±
                                if bilgi == "YILLIK BAKIM VE Gƒ∞DER √ñZETƒ∞":
                                    yillik_table_style.add('BACKGROUND', (0, i), (-1, i), colors.HexColor('#2E86AB'))
                                    yillik_table_style.add('TEXTCOLOR', (0, i), (-1, i), colors.white)
                                    yillik_table_style.add('FONTSIZE', (0, i), (-1, i), 11)
                                    yillik_table_style.add('FONTNAME', (0, i), (-1, i), turkish_font)
                                
                                # Tablo ba≈ülƒ±k satƒ±rƒ±
                                elif bilgi == "Yƒ±l":
                                    yillik_table_style.add('BACKGROUND', (0, i), (-1, i), colors.HexColor('#A23B72'))
                                    yillik_table_style.add('TEXTCOLOR', (0, i), (-1, i), colors.white)
                                    yillik_table_style.add('FONTSIZE', (0, i), (-1, i), 10)
                                    yillik_table_style.add('FONTNAME', (0, i), (-1, i), turkish_font)
                                
                                # Toplam satƒ±rƒ±
                                elif bilgi == "TOPLAM":
                                    yillik_table_style.add('BACKGROUND', (0, i), (-1, i), colors.HexColor('#F18F01'))
                                    yillik_table_style.add('TEXTCOLOR', (0, i), (-1, i), colors.white)
                                    yillik_table_style.add('FONTSIZE', (0, i), (-1, i), 10)
                                    yillik_table_style.add('FONTNAME', (0, i), (-1, i), turkish_font)
                                
                                # Yƒ±l veri satƒ±rlarƒ±
                                elif bilgi.isdigit():
                                    yillik_table_style.add('BACKGROUND', (0, i), (-1, i), colors.HexColor('#F7F7F7'))
                                    yillik_table_style.add('TEXTCOLOR', (0, i), (-1, i), colors.black)
                                    yillik_table_style.add('FONTSIZE', (0, i), (-1, i), 9)
                                    yillik_table_style.add('FONTNAME', (0, i), (-1, i), turkish_font)
                        
                        yillik_table.setStyle(yillik_table_style)
                        story.append(yillik_table)
                    
                    # Tablolar zaten yukarƒ±da olu≈üturuldu ve story'ye eklendi
                    doc.build(story)
                    success_count += 1
            except ImportError:
                QMessageBox.warning(self, "K√ºt√ºphane Hatasƒ±", "PDF olu≈üturmak i√ßin reportlab k√ºt√ºphanesi gerekli. L√ºtfen 'pip install reportlab' komutunu √ßalƒ±≈ütƒ±rƒ±n.")
            except Exception as e:
                QMessageBox.warning(self, "PDF Hatasƒ±", f"PDF dosyasƒ± olu≈üturulamadƒ±: {str(e)}")

        # Ba≈üarƒ± mesajƒ±
        if success_count == total_formats:
            QMessageBox.information(self, "Ba≈üarƒ±lƒ±", f"Ara√ß bilgi formu {success_count} formatƒ±nda ba≈üarƒ±yla kaydedildi.")
        elif success_count > 0:
            QMessageBox.information(self, "Kƒ±smi Ba≈üarƒ±", f"{success_count}/{total_formats} formatƒ±nda kaydedildi. Bazƒ± formatlar olu≈üturulamadƒ±.")
        else:
            QMessageBox.warning(self, "Hata", "Hi√ßbir format olu≈üturulamadƒ±.")
    
    def generate_vehicle_report(self):
        """Ara√ß raporu olu≈ütur"""
        try:
            vehicles = self.data_manager.load_data('araclar')
            if vehicles.empty:
                QMessageBox.information(self, "Bilgi", "Ara√ß verisi bulunamadƒ±.")
                return
            
            report_text = "üöó ARA√á RAPORU\n"
            report_text += "=" * 50 + "\n\n"
            
            for _, vehicle in vehicles.iterrows():
                report_text += f"Plaka: {vehicle.get('Plaka', 'N/A')}\n"
                report_text += f"Marka/Model: {vehicle.get('Marka', '')} {vehicle.get('Model', '')}\n"
                report_text += f"Yƒ±l: {vehicle.get('Yƒ±l', 'N/A')}\n"
                report_text += f"Durum: {vehicle.get('Durum', 'N/A')}\n"
                report_text += f"Son KM: {vehicle.get('Son KM', 'N/A')}\n"
                report_text += f"Muayene: {vehicle.get('Muayene Tarihi', 'N/A')}\n"
                report_text += "-" * 30 + "\n"
            
            self.show_report_dialog("Ara√ß Raporu", report_text)
            
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Rapor olu≈üturma hatasƒ±: {str(e)}")
    
    
    def tr_money(self, val):
        try:
            return f"{float(val):,.2f} TL".replace(",", "_").replace(".", ",").replace("_", ".")
        except:
            return str(val)

    def generate_maintenance_report(self):
        """Bakƒ±m raporunu ara√ßlara ve tarih aralƒ±ƒüƒ±na g√∂re tablo olarak olu≈üturur ve Word/PDF olarak kaydeder."""
        try:
            maintenance = self.data_manager.load_data('bakimlar')
            vehicles = self.data_manager.load_data('araclar')
            vehicles = vehicles[vehicles['Durum'].str.lower() == 'aktif']
            aktif_plakalar = set(vehicles['Plaka'])
            maintenance = maintenance[maintenance['Ara√ß Plakasƒ±'].isin(aktif_plakalar)]
            if maintenance.empty:
                QMessageBox.information(self, "Bilgi", "Bakƒ±m verisi bulunamadƒ±.")
                return
            if vehicles.empty:
                QMessageBox.information(self, "Bilgi", "Ara√ß verisi bulunamadƒ±.")
                return

            # Tarih s√ºtunlarƒ±nƒ± bul
            maintenance['Bakƒ±m Tarihi'] = pd.to_datetime(maintenance['Bakƒ±m Tarihi'], errors='coerce', dayfirst=True)
            maintenance = maintenance.dropna(subset=['Bakƒ±m Tarihi'])
            
            # Tarih aralƒ±ƒüƒ± se√ßim dialog'u
            date_range = self.show_date_range_selection_dialog("Bakƒ±m Raporu i√ßin Tarih Aralƒ±ƒüƒ± Se√ßimi")
            if not date_range:
                return
            
            start_date, end_date = date_range
            
            # Se√ßilen tarih aralƒ±ƒüƒ±na g√∂re filtrele
            maintenance = maintenance[
                (maintenance['Bakƒ±m Tarihi'] >= pd.Timestamp(start_date)) & 
                (maintenance['Bakƒ±m Tarihi'] <= pd.Timestamp(end_date))
            ]
            
            if maintenance.empty:
                QMessageBox.information(self, "Bilgi", "Se√ßilen tarih aralƒ±ƒüƒ±nda bakƒ±m verisi bulunamadƒ±.")
                return
                
            # Yƒ±l bilgilerini al
            maintenance['Yƒ±l'] = maintenance['Bakƒ±m Tarihi'].dt.year
            years = sorted(maintenance['Yƒ±l'].unique())

            # Ara√ß bilgilerini al
            vehicle_info = vehicles.set_index('Plaka')[['Marka', 'Model', 'Yƒ±l']]

            # Pivot tablo: satƒ±r=plaka, s√ºtun=yƒ±l, deƒüer=toplam bakƒ±m tutarƒ±
            pivot = maintenance.pivot_table(index='Ara√ß Plakasƒ±', columns='Yƒ±l', values='Tutar', aggfunc=lambda x: pd.to_numeric(x, errors='coerce').sum(), fill_value=0)
            # Ara√ß bilgilerini ekle
            pivot = pivot.merge(vehicle_info, left_index=True, right_index=True, how='left')
            # S√ºtun sƒ±rasƒ±: Marka, Model, Yƒ±l, [yƒ±llar...], Toplam
            cols = ['Marka', 'Model', 'Yƒ±l'] + list(years)
            pivot = pivot[cols]
            pivot['Toplam'] = pivot[years].sum(axis=1)
            # Sƒ±ralama
            pivot = pivot.sort_values(by='Toplam', ascending=False)
            # Sƒ±fƒ±r olmayanlar
            pivot = pivot[pivot['Toplam'] > 0]
            if pivot.empty:
                QMessageBox.information(self, "Bilgi", "Bakƒ±m gideri olan ara√ß bulunamadƒ±.")
                return

            # Tabloyu rapor formatƒ±na √ßevir
            rapor_data = []
            header = ['No', 'Plaka', 'Marka', 'Model', 'Yƒ±l'] + [str(y) for y in years] + ['Toplam']
            rapor_data.append(header)
            for idx, (plaka, row) in enumerate(pivot.iterrows(), 1):
                rapor_data.append([
                    idx,
                    plaka,
                    row['Marka'],
                    row['Model'],
                    str(row['Yƒ±l'])[:4] if pd.notna(row['Yƒ±l']) else '',
                    *[self.tr_money(row[y]) for y in years],
                    self.tr_money(row['Toplam'])
                ])
            total_row = ['GENEL TOPLAM', '', '', '', '']
            for y in years:
                total_row.append(self.tr_money(pivot[y].sum()))
            total_row.append(self.tr_money(pivot['Toplam'].sum()))
            rapor_data.append(total_row)

            # Kullanƒ±cƒ±dan format se√ßimi al
            format_choice = self.show_format_selection_dialog()
            if not format_choice:
                return
            self.create_maintenance_report_files(rapor_data, format_choice, years)
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Bakƒ±m raporu olu≈üturulamadƒ±: {str(e)}")

    def create_maintenance_report_files(self, rapor_data, format_choice, selected_years=None):
        """Bakƒ±m raporunu Word/PDF olarak kaydeder."""
        import os
        import pandas as pd
        from PyQt5.QtWidgets import QFileDialog, QMessageBox
        # Word
        if format_choice in ["Word (.docx)", "T√ºm√º"]:
            try:
                from docx import Document
                from docx.shared import Pt, Cm, RGBColor
                from docx.enum.text import WD_ALIGN_PARAGRAPH
                from docx.oxml import parse_xml
                from docx.enum.section import WD_ORIENT
                file_path, _ = QFileDialog.getSaveFileName(self, "Word Olarak Kaydet", f"bakim_raporu_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx", "Word Dosyasƒ± (*.docx)")
                if file_path:
                    doc = Document()
                    section = doc.sections[0]
                    section.orientation = WD_ORIENT.LANDSCAPE
                    new_width, new_height = section.page_height, section.page_width
                    section.page_width = new_width
                    section.page_height = new_height
                    section.left_margin = Cm(1)
                    section.right_margin = Cm(1)
                    section.top_margin = Cm(1)
                    section.bottom_margin = Cm(1)
                    # Ba≈ülƒ±k olu≈ütur
                    if selected_years:
                        years_text = ", ".join(map(str, selected_years))
                        title_text = f'Yƒ±llara G√∂re Ara√ß Bakƒ±m/Onarƒ±m Raporu ({years_text})'
                    else:
                        title_text = 'Yƒ±llara G√∂re Ara√ß Bakƒ±m/Onarƒ±m Raporu'
                    title = doc.add_heading(title_text, 0)
                    title.alignment = WD_ALIGN_PARAGRAPH.CENTER
                    doc.add_paragraph("")
                    table = doc.add_table(rows=len(rapor_data), cols=len(rapor_data[0]))
                    table.style = 'Table Grid'
                    table.allow_autofit = False
                    for i, row_data in enumerate(rapor_data):
                        for j, val in enumerate(row_data):
                            cell = table.cell(i, j)
                            cell.text = str(val)
                            for paragraph in cell.paragraphs:
                                paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
                                for run in cell.paragraphs[0].runs:
                                    run.font.name = 'Calibri'
                                    run.font.size = Pt(10)
                            cell._tc.get_or_add_tcPr().append(
                                parse_xml(r'<w:tcW xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main" w:w="2000" w:type="dxa"/>')
                            )
                        # Ba≈ülƒ±k satƒ±rƒ±
                        if i == 0:
                            for cell in table.rows[i].cells:
                                cell_par = cell.paragraphs[0]
                                for run in cell_par.runs:
                                    run.bold = True
                                    run.font.size = Pt(11)
                                    run.font.color.rgb = RGBColor(255,255,255)
                                cell._tc.get_or_add_tcPr().append(
                                    parse_xml(r'<w:shd xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main" w:fill="A23B72"/>')
                                )
                        # Genel toplam satƒ±rƒ±
                        if row_data[0] == "GENEL TOPLAM":
                            for cell in table.rows[i].cells:
                                cell_par = cell.paragraphs[0]
                                for run in cell_par.runs:
                                    run.bold = True
                                    run.font.size = Pt(11)
                                    run.font.color.rgb = RGBColor(255,255,255)
                                cell._tc.get_or_add_tcPr().append(
                                    parse_xml(r'<w:shd xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main" w:fill="F18F01"/>')
                                )
                    doc.save(file_path)
            except ImportError:
                QMessageBox.warning(self, "K√ºt√ºphane Hatasƒ±", "Word olu≈üturmak i√ßin python-docx k√ºt√ºphanesi gerekli. L√ºtfen 'pip install python-docx' komutunu √ßalƒ±≈ütƒ±rƒ±n.")
            except Exception as e:
                QMessageBox.warning(self, "Word Hatasƒ±", f"Word dosyasƒ± olu≈üturulamadƒ±: {str(e)}")
        # PDF
        if format_choice in ["PDF (.pdf)", "T√ºm√º"]:
            try:
                from reportlab.lib.pagesizes import A4, landscape
                from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
                from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
                from reportlab.lib.units import cm
                from reportlab.lib import colors
                from reportlab.pdfbase import pdfmetrics
                from reportlab.pdfbase.ttfonts import TTFont
                # T√ºrk√ße font desteƒüi
                try:
                    font_paths = [
                        "C:/Windows/Fonts/arial.ttf",
                        "C:/Windows/Fonts/calibri.ttf",
                        "C:/Windows/Fonts/tahoma.ttf",
                        "C:/Windows/Fonts/verdana.ttf"
                    ]
                    turkish_font = None
                    for font_path in font_paths:
                        if os.path.exists(font_path):
                            try:
                                pdfmetrics.registerFont(TTFont('TurkishFont', font_path))
                                turkish_font = 'TurkishFont'
                                break
                            except:
                                continue
                    if not turkish_font:
                        turkish_font = 'Helvetica'
                except:
                    turkish_font = 'Helvetica'
                file_path, _ = QFileDialog.getSaveFileName(self, "PDF Olarak Kaydet", f"bakim_raporu_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf", "PDF Dosyasƒ± (*.pdf)")
                if file_path:
                    doc = SimpleDocTemplate(file_path, pagesize=landscape(A4),
                                          leftMargin=1*cm, rightMargin=1*cm,
                                          topMargin=1*cm, bottomMargin=1*cm)
                    story = []
                    styles = getSampleStyleSheet()
                    title_style = ParagraphStyle('title', parent=styles['Heading1'], alignment=1, fontName=turkish_font, fontSize=16, textColor=colors.HexColor('#A23B72'))
                    # Ba≈ülƒ±k olu≈ütur
                    if selected_years:
                        years_text = ", ".join(map(str, selected_years))
                        title_text = f'Yƒ±llara G√∂re Ara√ß Bakƒ±m/Onarƒ±m Raporu ({years_text})'
                    else:
                        title_text = 'Yƒ±llara G√∂re Ara√ß Bakƒ±m/Onarƒ±m Raporu'
                    story.append(Paragraph(title_text, title_style))
                    story.append(Spacer(1, 12))
                    # Tablo
                    table_data = rapor_data
                    table = Table(table_data, repeatRows=1)
                    table_style = TableStyle([
                        ('BACKGROUND', (0,0), (-1,0), colors.HexColor('#A23B72')),
                        ('TEXTCOLOR', (0,0), (-1,0), colors.white),
                        ('ALIGN', (0,0), (-1,-1), 'CENTER'),
                        ('FONTNAME', (0,0), (-1,-1), turkish_font),
                        ('FONTSIZE', (0,0), (-1,-1), 9),
                        ('GRID', (0,0), (-1,-1), 0.5, colors.grey),
                        ('BACKGROUND', (0,-1), (-1,-1), colors.HexColor('#F18F01')),
                        ('TEXTCOLOR', (0,-1), (-1,-1), colors.white),
                        ('FONTNAME', (0,-1), (-1,-1), turkish_font),
                        ('FONTSIZE', (0,-1), (-1,-1), 10),
                        ('ALIGN', (0,-1), (-1,-1), 'CENTER'),
                        ('VALIGN', (0,0), (-1,-1), 'MIDDLE'),
                    ])
                    table.setStyle(table_style)
                    story.append(table)
                    doc.build(story)
            except ImportError:
                QMessageBox.warning(self, "K√ºt√ºphane Hatasƒ±", "PDF olu≈üturmak i√ßin reportlab k√ºt√ºphanesi gerekli. L√ºtfen 'pip install reportlab' komutunu √ßalƒ±≈ütƒ±rƒ±n.")
            except Exception as e:
                QMessageBox.warning(self, "PDF Hatasƒ±", f"PDF dosyasƒ± olu≈üturulamadƒ±: {str(e)}")



    
    def generate_expense_report(self):
        """Gider raporu olu≈ütur"""
        try:
            # T√ºm gider verilerini y√ºkle
            expenses = self.data_manager.load_data('giderler')
            maintenance = self.data_manager.load_data('bakimlar')
            fuel = self.data_manager.load_data('yakitlar')
            
            if expenses.empty and maintenance.empty and fuel.empty:
                QMessageBox.information(self, "Bilgi", "Gider verisi bulunamadƒ±.")
                return
            
            # Tarih s√ºtunlarƒ±nƒ± datetime'a √ßevir
            if not expenses.empty and 'Tarih' in expenses.columns:
                expenses['Tarih'] = pd.to_datetime(expenses['Tarih'], errors='coerce')
            
            if not maintenance.empty and 'Bakƒ±m Tarihi' in maintenance.columns:
                maintenance['Bakƒ±m Tarihi'] = pd.to_datetime(maintenance['Bakƒ±m Tarihi'], errors='coerce')
            
            if not fuel.empty and 'Tarih' in fuel.columns:
                fuel['Tarih'] = pd.to_datetime(fuel['Tarih'], errors='coerce')
            
            # Tarih aralƒ±ƒüƒ± se√ßim dialog'u
            date_range = self.show_date_range_selection_dialog("Gider Raporu i√ßin Tarih Aralƒ±ƒüƒ± Se√ßimi")
            if not date_range:
                return
            
            start_date, end_date = date_range
            
            # Se√ßilen tarih aralƒ±ƒüƒ±na g√∂re filtrele
            if not expenses.empty:
                expenses = expenses[
                    (expenses['Tarih'] >= pd.Timestamp(start_date)) & 
                    (expenses['Tarih'] <= pd.Timestamp(end_date))
                ]
            
            if not maintenance.empty:
                maintenance = maintenance[
                    (maintenance['Bakƒ±m Tarihi'] >= pd.Timestamp(start_date)) & 
                    (maintenance['Bakƒ±m Tarihi'] <= pd.Timestamp(end_date))
                ]
            
            if not fuel.empty:
                fuel = fuel[
                    (fuel['Tarih'] >= pd.Timestamp(start_date)) & 
                    (fuel['Tarih'] <= pd.Timestamp(end_date))
                ]
            
            # Gider t√ºr√º se√ßim dialog'u
            expense_types = self.show_expense_type_selection_dialog()
            if not expense_types:
                return
            
            # Yƒ±l bilgilerini al
            if not expenses.empty:
                expenses['Yƒ±l'] = expenses['Tarih'].dt.year
            if not maintenance.empty:
                maintenance['Yƒ±l'] = maintenance['Bakƒ±m Tarihi'].dt.year
            if not fuel.empty:
                fuel['Yƒ±l'] = fuel['Tarih'].dt.year
            
            # Mevcut yƒ±llarƒ± topla
            available_years = set()
            if not expenses.empty:
                available_years.update(expenses['Yƒ±l'].dropna().unique())
            if not maintenance.empty:
                available_years.update(maintenance['Yƒ±l'].dropna().unique())
            if not fuel.empty:
                available_years.update(fuel['Yƒ±l'].dropna().unique())
            
            selected_years = sorted(list(available_years))
            
            # Format se√ßimi
            format_choice = self.show_format_selection_dialog()
            if not format_choice:
                return
            
            # Rapor verilerini hazƒ±rla
            rapor_data = {
                'expenses': expenses,
                'maintenance': maintenance,
                'fuel': fuel,
                'selected_years': selected_years,
                'expense_types': expense_types
            }
            
            # Rapor dosyalarƒ±nƒ± olu≈ütur
            self.create_expense_report_files(rapor_data, format_choice, selected_years)
            
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Rapor olu≈üturma hatasƒ±: {str(e)}")
    

    
    def show_report_dialog(self, title, content):
        """Rapor dialog g√∂ster"""
        dialog = QDialog(self)
        dialog.setWindowTitle(title)
        dialog.setMinimumSize(600, 400)
        dialog.setModal(True)
        
        layout = QVBoxLayout(dialog)
        
        # Rapor i√ßeriƒüi
        text_edit = QTextEdit()
        text_edit.setPlainText(content)
        text_edit.setReadOnly(True)
        layout.addWidget(text_edit)
        
        # Butonlar
        btn_layout = QHBoxLayout()
        btn_save = QPushButton("Kaydet")
        btn_save.clicked.connect(lambda: self.save_report(title, content))
        btn_close = QPushButton("Kapat")
        btn_close.clicked.connect(dialog.accept)
        
        btn_layout.addWidget(btn_save)
        btn_layout.addWidget(btn_close)
        layout.addLayout(btn_layout)
        
        dialog.exec_()
    
    def save_report(self, title, content):
        """Raporu dosyaya kaydet"""
        try:
            filename, _ = QFileDialog.getSaveFileName(
                self, "Raporu Kaydet", 
                f"{title}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                "Metin Dosyasƒ± (*.txt)"
            )
            
            if filename:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(content)
                QMessageBox.information(self, "Ba≈üarƒ±lƒ±", f"Rapor kaydedildi:\n{filename}")
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Kaydetme hatasƒ±: {str(e)}")
    
    def show_format_selection_dialog(self):
        """Format se√ßimi i√ßin butonlu dialog g√∂ster"""
        from PyQt5.QtWidgets import QDialog, QVBoxLayout, QHBoxLayout, QPushButton, QLabel
        from PyQt5.QtCore import Qt
        
        dialog = QDialog(self)
        dialog.setWindowTitle("Format Se√ßin")
        dialog.setFixedSize(500, 250)
        dialog.setModal(True)
        
        layout = QVBoxLayout(dialog)
        layout.setSpacing(20)
        
        # Ba≈ülƒ±k
        title = QLabel("Hangi formatta kaydetmek istiyorsunuz?")
        title.setStyleSheet("font-size: 16px; font-weight: bold; color: #2c3e50;")
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # Butonlar i√ßin layout
        button_layout = QHBoxLayout()
        button_layout.setSpacing(20)
        
        # Word butonu
        btn_word = QPushButton("üìÑ Word (.docx)")
        btn_word.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 8px;
                font-size: 12px;
                font-weight: bold;
                min-width: 100px;
                max-width: 100px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        btn_word.clicked.connect(lambda: self.select_format(dialog, "Word (.docx)"))
        
        # PDF butonu
        btn_pdf = QPushButton("üìã PDF (.pdf)")
        btn_pdf.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 8px;
                font-size: 12px;
                font-weight: bold;
                min-width: 100px;
                max-width: 100px;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
        """)
        btn_pdf.clicked.connect(lambda: self.select_format(dialog, "PDF (.pdf)"))
        
        # T√ºm√º butonu
        btn_all = QPushButton("üìö T√ºm√º")
        btn_all.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 8px;
                font-size: 12px;
                font-weight: bold;
                min-width: 100px;
                max-width: 100px;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        btn_all.clicked.connect(lambda: self.select_format(dialog, "T√ºm√º"))
        
        # ƒ∞ptal butonu
        btn_cancel = QPushButton("‚ùå ƒ∞ptal")
        btn_cancel.setStyleSheet("""
            QPushButton {
                background-color: #95a5a6;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 8px;
                font-size: 12px;
                font-weight: bold;
                min-width: 100px;
                max-width: 100px;
            }
            QPushButton:hover {
                background-color: #7f8c8d;
            }
        """)
        btn_cancel.clicked.connect(dialog.reject)
        
        button_layout.addWidget(btn_word)
        button_layout.addWidget(btn_pdf)
        button_layout.addWidget(btn_all)
        button_layout.addWidget(btn_cancel)
        
        layout.addLayout(button_layout)
        
        # Dialog'u g√∂ster ve sonucu d√∂nd√ºr
        result = dialog.exec_()
        if result == QDialog.Accepted:
            return getattr(dialog, 'selected_format', None)
        return None
    
    def select_format(self, dialog, format_choice):
        """Format se√ßimi yapƒ±ldƒ±ƒüƒ±nda √ßaƒürƒ±lƒ±r"""
        dialog.selected_format = format_choice
        dialog.accept()
    
    def show_date_range_selection_dialog(self, title="Tarih Aralƒ±ƒüƒ± Se√ßimi"):
        """√ñzel tarih aralƒ±ƒüƒ± se√ßimi dialog'u"""
        dialog = QDialog(self)
        dialog.setWindowTitle(title)
        dialog.setModal(True)
        dialog.setMinimumWidth(400)
        
        layout = QVBoxLayout(dialog)
        
        # Ba≈ülƒ±k
        title_label = QLabel("Hangi tarihler arasƒ± rapor almak istiyorsunuz?")
        title_label.setStyleSheet("""
            font-size: 14px;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 10px;
        """)
        layout.addWidget(title_label)
        
        # Tarih se√ßimi
        date_layout = QHBoxLayout()
        
        # Ba≈ülangƒ±√ß tarihi
        start_layout = QVBoxLayout()
        start_label = QLabel("Ba≈ülangƒ±√ß Tarihi:")
        start_label.setStyleSheet("font-weight: bold; color: #34495e;")
        self.start_date_edit = QDateEdit()
        self.start_date_edit.setCalendarPopup(True)
        self.start_date_edit.setDate(QDate.currentDate().addYears(-1))  # Varsayƒ±lan 1 yƒ±l √∂nce
        self.start_date_edit.setStyleSheet("""
            QDateEdit {
                padding: 8px;
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                font-size: 12px;
            }
            QDateEdit:focus {
                border-color: #3498db;
            }
        """)
        start_layout.addWidget(start_label)
        start_layout.addWidget(self.start_date_edit)
        
        # Biti≈ü tarihi
        end_layout = QVBoxLayout()
        end_label = QLabel("Biti≈ü Tarihi:")
        end_label.setStyleSheet("font-weight: bold; color: #34495e;")
        self.end_date_edit = QDateEdit()
        self.end_date_edit.setCalendarPopup(True)
        self.end_date_edit.setDate(QDate.currentDate())  # Varsayƒ±lan bug√ºn
        self.end_date_edit.setStyleSheet("""
            QDateEdit {
                padding: 8px;
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                font-size: 12px;
            }
            QDateEdit:focus {
                border-color: #3498db;
            }
        """)
        end_layout.addWidget(end_label)
        end_layout.addWidget(self.end_date_edit)
        
        date_layout.addLayout(start_layout)
        date_layout.addLayout(end_layout)
        layout.addLayout(date_layout)
        
        # Hƒ±zlƒ± se√ßim butonlarƒ±
        quick_layout = QHBoxLayout()
        
        btn_last_month = QPushButton("Son 1 Ay")
        btn_last_month.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 8px 12px;
                border-radius: 4px;
                font-size: 11px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        btn_last_month.clicked.connect(lambda: self.set_date_range(-1, 0))
        
        btn_last_3_months = QPushButton("Son 3 Ay")
        btn_last_3_months.setStyleSheet("""
            QPushButton {
                background-color: #e67e22;
                color: white;
                border: none;
                padding: 8px 12px;
                border-radius: 4px;
                font-size: 11px;
            }
            QPushButton:hover {
                background-color: #d35400;
            }
        """)
        btn_last_3_months.clicked.connect(lambda: self.set_date_range(-3, 0))
        
        btn_last_6_months = QPushButton("Son 6 Ay")
        btn_last_6_months.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 8px 12px;
                border-radius: 4px;
                font-size: 11px;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        btn_last_6_months.clicked.connect(lambda: self.set_date_range(-6, 0))
        
        btn_last_year = QPushButton("Son 1 Yƒ±l")
        btn_last_year.setStyleSheet("""
            QPushButton {
                background-color: #9b59b6;
                color: white;
                border: none;
                padding: 8px 12px;
                border-radius: 4px;
                font-size: 11px;
            }
            QPushButton:hover {
                background-color: #8e44ad;
            }
        """)
        btn_last_year.clicked.connect(lambda: self.set_date_range(-12, 0))
        
        quick_layout.addWidget(btn_last_month)
        quick_layout.addWidget(btn_last_3_months)
        quick_layout.addWidget(btn_last_6_months)
        quick_layout.addWidget(btn_last_year)
        layout.addLayout(quick_layout)
        
        # Butonlar
        button_layout = QHBoxLayout()
        
        btn_ok = QPushButton("Tamam")
        btn_ok.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        btn_ok.clicked.connect(dialog.accept)
        
        btn_cancel = QPushButton("ƒ∞ptal")
        btn_cancel.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
        """)
        btn_cancel.clicked.connect(dialog.reject)
        
        button_layout.addWidget(btn_ok)
        button_layout.addWidget(btn_cancel)
        layout.addLayout(button_layout)
        
        # Dialog'u √ßalƒ±≈ütƒ±r
        if dialog.exec_() == QDialog.Accepted:
            start_date = self.start_date_edit.date().toPyDate()
            end_date = self.end_date_edit.date().toPyDate()
            return start_date, end_date
        else:
            return None
    
    def set_date_range(self, months_start, months_end):
        """Hƒ±zlƒ± tarih aralƒ±ƒüƒ± ayarla"""
        current_date = QDate.currentDate()
        start_date = current_date.addMonths(months_start)
        end_date = current_date.addMonths(months_end)
        
        self.start_date_edit.setDate(start_date)
        self.end_date_edit.setDate(end_date)
    
    def show_year_selection_dialog(self, available_years):
        """Yƒ±l se√ßim dialog'u g√∂sterir"""
        dialog = QDialog(self)
        dialog.setWindowTitle("Yƒ±l Se√ßimi")
        dialog.setModal(True)
        dialog.setFixedSize(400, 350)
        
        layout = QVBoxLayout(dialog)
        
        # Ba≈ülƒ±k
        title_label = QLabel("Bakƒ±m Raporu i√ßin Yƒ±l Se√ßimi")
        title_label.setStyleSheet("font-size: 14px; font-weight: bold; margin-bottom: 10px;")
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title_label)
        
        # A√ßƒ±klama
        desc_label = QLabel("Rapora dahil edilecek yƒ±llarƒ± se√ßin:")
        desc_label.setStyleSheet("font-size: 12px; margin-bottom: 10px;")
        layout.addWidget(desc_label)
        
        # Scroll area i√ßinde checkbox'lar
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setMaximumHeight(200)
        scroll_area.setStyleSheet("""
            QScrollArea {
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                background-color: white;
            }
            QScrollBar:vertical {
                background-color: #ecf0f1;
                width: 12px;
                border-radius: 6px;
            }
            QScrollBar::handle:vertical {
                background-color: #bdc3c7;
                border-radius: 6px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background-color: #95a5a6;
            }
        """)
        
        # Checkbox'lar i√ßin widget
        checkbox_widget = QWidget()
        checkbox_layout = QVBoxLayout(checkbox_widget)
        checkbox_layout.setSpacing(8)
        checkbox_layout.setContentsMargins(10, 10, 10, 10)
        
        # Onay kutucuklarƒ±nƒ± olu≈ütur
        self.year_checkboxes = {}
        for year in available_years:
            checkbox = QCheckBox(str(year))
            checkbox.setChecked(True)  # Varsayƒ±lan olarak se√ßili
            checkbox.setStyleSheet("""
                QCheckBox {
                    font-size: 13px;
                    spacing: 8px;
                }
                QCheckBox::indicator {
                    width: 16px;
                    height: 16px;
                }
                QCheckBox::indicator:unchecked {
                    border: 1px solid #95a5a6;
                    background-color: white;
                    border-radius: 2px;
                }
                QCheckBox::indicator:checked {
                    border: 1px solid #2c3e50;
                    background-color: #2c3e50;
                    border-radius: 2px;
                }
                QCheckBox::indicator:hover {
                    border: 1px solid #3498db;
                }
            """)
            self.year_checkboxes[year] = checkbox
            checkbox_layout.addWidget(checkbox)
        
        scroll_area.setWidget(checkbox_widget)
        layout.addWidget(scroll_area)
        
        # Butonlar
        button_layout = QHBoxLayout()
        
        select_all_btn = QPushButton("T√ºm√ºn√º Se√ß")
        select_all_btn.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        select_all_btn.clicked.connect(lambda: self.select_all_years_checkboxes())
        
        clear_all_btn = QPushButton("Se√ßimi Temizle")
        clear_all_btn.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
        """)
        clear_all_btn.clicked.connect(lambda: self.clear_all_years_checkboxes())
        
        button_layout.addWidget(select_all_btn)
        button_layout.addWidget(clear_all_btn)
        button_layout.addStretch()
        
        layout.addLayout(button_layout)
        
        # Tamam/ƒ∞ptal butonlarƒ±
        button_layout2 = QHBoxLayout()
        
        ok_btn = QPushButton("Tamam")
        ok_btn.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 8px 20px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        ok_btn.clicked.connect(dialog.accept)
        
        cancel_btn = QPushButton("ƒ∞ptal")
        cancel_btn.setStyleSheet("""
            QPushButton {
                background-color: #95a5a6;
                color: white;
                border: none;
                padding: 8px 20px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #7f8c8d;
            }
        """)
        cancel_btn.clicked.connect(dialog.reject)
        
        button_layout2.addStretch()
        button_layout2.addWidget(ok_btn)
        button_layout2.addWidget(cancel_btn)
        
        layout.addLayout(button_layout2)
        
        # Dialog'u g√∂ster
        if dialog.exec_() == QDialog.Accepted:
            selected_years = []
            for year, checkbox in self.year_checkboxes.items():
                if checkbox.isChecked():
                    selected_years.append(year)
            
            if not selected_years:
                QMessageBox.warning(self, "Uyarƒ±", "En az bir yƒ±l se√ßmelisiniz!")
                return None
            return selected_years
        return None
    
    def select_all_years_checkboxes(self):
        """T√ºm yƒ±l checkbox'larƒ±nƒ± se√ßer"""
        for checkbox in self.year_checkboxes.values():
            checkbox.setChecked(True)
    
    def clear_all_years_checkboxes(self):
        """T√ºm yƒ±l checkbox'larƒ±nƒ±n se√ßimini temizler"""
        for checkbox in self.year_checkboxes.values():
            checkbox.setChecked(False)
    
    def show_expense_type_selection_dialog(self):
        """Gider t√ºr√º se√ßim dialog'u g√∂ster"""
        dialog = QDialog(self)
        dialog.setWindowTitle("Gider T√ºr√º Se√ßimi")
        dialog.setFixedSize(500, 400)
        dialog.setModal(True)
        
        layout = QVBoxLayout(dialog)
        layout.setSpacing(20)
        
        # Ba≈ülƒ±k
        title = QLabel("Hangi gider t√ºrlerini dahil etmek istiyorsunuz?")
        title.setStyleSheet("font-size: 16px; font-weight: bold; color: #2c3e50;")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # Scroll area
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setStyleSheet("""
            QScrollArea {
                border: 2px solid #bdc3c7;
                border-radius: 8px;
                background-color: white;
            }
            QScrollBar:vertical {
                background-color: #ecf0f1;
                width: 12px;
                border-radius: 6px;
            }
            QScrollBar::handle:vertical {
                background-color: #bdc3c7;
                border-radius: 6px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background-color: #95a5a6;
            }
        """)
        
        # Checkbox'lar i√ßin widget
        checkbox_widget = QWidget()
        checkbox_layout = QVBoxLayout(checkbox_widget)
        checkbox_layout.setSpacing(10)
        
        # Gider t√ºrleri
        expense_types = {
            'genel_giderler': 'üí∞ Genel Giderler (Kasko, Muayene, Sigorta vb.)',
            'bakim_onarim': 'üîß Bakƒ±m/Onarƒ±m Giderleri',
            'yakit_giderleri': '‚õΩ Yakƒ±t Giderleri'
        }
        
        self.expense_type_checkboxes = {}
        for key, label in expense_types.items():
            checkbox = QCheckBox(label)
            checkbox.setChecked(True)  # Varsayƒ±lan olarak hepsi se√ßili
            checkbox.setStyleSheet("""
                QCheckBox {
                    font-size: 13px;
                    spacing: 8px;
                    padding: 8px 0px;
                }
                QCheckBox::indicator {
                    width: 16px;
                    height: 16px;
                }
                QCheckBox::indicator:unchecked {
                    border: 1px solid #95a5a6;
                    background-color: white;
                    border-radius: 2px;
                }
                QCheckBox::indicator:checked {
                    border: 1px solid #2c3e50;
                    background-color: #2c3e50;
                    border-radius: 2px;
                }
                QCheckBox::indicator:hover {
                    border: 1px solid #3498db;
                }
            """)
            self.expense_type_checkboxes[key] = checkbox
            checkbox_layout.addWidget(checkbox)
        
        scroll.setWidget(checkbox_widget)
        layout.addWidget(scroll)
        
        # Butonlar
        btn_layout = QHBoxLayout()
        
        btn_select_all = QPushButton("T√ºm√ºn√º Se√ß")
        btn_select_all.clicked.connect(self.select_all_expense_types)
        btn_select_all.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        
        btn_clear_all = QPushButton("Se√ßimi Temizle")
        btn_clear_all.clicked.connect(self.clear_all_expense_types)
        btn_clear_all.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
        """)
        
        btn_ok = QPushButton("Tamam")
        btn_ok.clicked.connect(dialog.accept)
        btn_ok.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        
        btn_cancel = QPushButton("ƒ∞ptal")
        btn_cancel.clicked.connect(dialog.reject)
        btn_cancel.setStyleSheet("""
            QPushButton {
                background-color: #95a5a6;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #7f8c8d;
            }
        """)
        
        btn_layout.addWidget(btn_select_all)
        btn_layout.addWidget(btn_clear_all)
        btn_layout.addStretch()
        btn_layout.addWidget(btn_ok)
        btn_layout.addWidget(btn_cancel)
        
        layout.addLayout(btn_layout)
        
        if dialog.exec_() == QDialog.Accepted:
            selected_types = []
            for key, checkbox in self.expense_type_checkboxes.items():
                if checkbox.isChecked():
                    selected_types.append(key)
            return selected_types
        else:
            return None
    
    def select_all_expense_types(self):
        """T√ºm gider t√ºr√º checkbox'larƒ±nƒ± se√ßer"""
        for checkbox in self.expense_type_checkboxes.values():
            checkbox.setChecked(True)
    
    def clear_all_expense_types(self):
        """T√ºm gider t√ºr√º checkbox'larƒ±nƒ±n se√ßimini temizler"""
        for checkbox in self.expense_type_checkboxes.values():
            checkbox.setChecked(False)
    
    def create_expense_report_files(self, rapor_data, format_choice, selected_years=None):
        """Gider raporu dosyalarƒ±nƒ± olu≈ütur"""
        try:
            expenses = rapor_data['expenses']
            maintenance = rapor_data['maintenance']
            fuel = rapor_data['fuel']
            expense_types = rapor_data['expense_types']
            
            # Ara√ß bilgilerini y√ºkle
            vehicles = self.data_manager.load_data('araclar')
            
            # Dosya kaydetme yeri se√ß
            if format_choice == 'word':
                default_filename = f"Gider_Raporu_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
                filename, _ = QFileDialog.getSaveFileName(
                    self, "Gider Raporunu Kaydet", 
                    default_filename,
                    "Word Dosyasƒ± (*.docx)"
                )
            else:  # pdf
                default_filename = f"Gider_Raporu_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
                filename, _ = QFileDialog.getSaveFileName(
                    self, "Gider Raporunu Kaydet", 
                    default_filename,
                    "PDF Dosyasƒ± (*.pdf)"
                )
            
            if not filename:
                return  # Kullanƒ±cƒ± iptal etti
            
            # Dosya yolunu al
            report_dir = os.path.dirname(filename)
            os.makedirs(report_dir, exist_ok=True)
            
            if format_choice == 'word':
                # Word raporu olu≈ütur
                from docx import Document
                from docx.shared import Inches, Pt
                from docx.enum.text import WD_ALIGN_PARAGRAPH
                
                doc = Document()
                
                # Ba≈ülƒ±k
                if selected_years:
                    years_text = ", ".join(map(str, selected_years))
                    title_text = f'Yƒ±llara G√∂re Ara√ß Gider Raporu ({years_text})'
                else:
                    title_text = 'Yƒ±llara G√∂re Ara√ß Gider Raporu'
                title = doc.add_heading(title_text, 0)
                title.alignment = WD_ALIGN_PARAGRAPH.CENTER
                
                # Rapor bilgileri
                doc.add_paragraph(f"Rapor Tarihi: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
                doc.add_paragraph(f"Dahil Edilen Gider T√ºrleri: {', '.join(expense_types)}")
                doc.add_paragraph("")
                
                # Genel giderler
                if 'genel_giderler' in expense_types and not expenses.empty:
                    doc.add_heading('üí∞ Genel Giderler', level=1)
                    total_general = 0
                    
                    for _, expense in expenses.iterrows():
                        amount = expense.get('Tutar', 0)
                        try:
                            amount = float(amount)
                            total_general += amount
                        except:
                            amount = 0
                        
                        # Ara√ß bilgilerini bul
                        vehicle_info = vehicles[vehicles['Plaka'] == expense.get('Ara√ß Plakasƒ±', '')]
                        if not vehicle_info.empty:
                            vehicle_info = vehicle_info.iloc[0]
                            vehicle_text = f"{expense.get('Ara√ß Plakasƒ±', 'N/A')} - {vehicle_info.get('Marka', '')} {vehicle_info.get('Model', '')}"
                        else:
                            vehicle_text = expense.get('Ara√ß Plakasƒ±', 'N/A')
                        
                        p = doc.add_paragraph()
                        p.add_run(f"Ara√ß: ").bold = True
                        p.add_run(f"{vehicle_text}\n")
                        p.add_run(f"Gider T√ºr√º: ").bold = True
                        p.add_run(f"{expense.get('Gider T√ºr√º', 'N/A')}\n")
                        p.add_run(f"Tarih: ").bold = True
                        p.add_run(f"{expense.get('Tarih', 'N/A')}\n")
                        p.add_run(f"Tutar: ").bold = True
                        p.add_run(f"{self.tr_money(amount)} TL\n")
                        p.add_run(f"A√ßƒ±klama: ").bold = True
                        p.add_run(f"{expense.get('A√ßƒ±klama', 'N/A')}\n")
                        doc.add_paragraph("")
                    
                    doc.add_paragraph(f"Genel Giderler Toplamƒ±: {self.tr_money(total_general)} TL")
                    doc.add_paragraph("")
                
                # Bakƒ±m/Onarƒ±m giderleri
                if 'bakim_onarim' in expense_types and not maintenance.empty:
                    doc.add_heading('üîß Bakƒ±m/Onarƒ±m Giderleri', level=1)
                    total_maintenance = 0
                    
                    for _, maint in maintenance.iterrows():
                        amount = maint.get('Maliyet', 0)
                        try:
                            amount = float(amount)
                            total_maintenance += amount
                        except:
                            amount = 0
                        
                        # Ara√ß bilgilerini bul
                        vehicle_info = vehicles[vehicles['Plaka'] == maint.get('Ara√ß Plakasƒ±', '')]
                        if not vehicle_info.empty:
                            vehicle_info = vehicle_info.iloc[0]
                            vehicle_text = f"{maint.get('Ara√ß Plakasƒ±', 'N/A')} - {vehicle_info.get('Marka', '')} {vehicle_info.get('Model', '')}"
                        else:
                            vehicle_text = maint.get('Ara√ß Plakasƒ±', 'N/A')
                        
                        p = doc.add_paragraph()
                        p.add_run(f"Ara√ß: ").bold = True
                        p.add_run(f"{vehicle_text}\n")
                        p.add_run(f"Bakƒ±m T√ºr√º: ").bold = True
                        p.add_run(f"{maint.get('Bakƒ±m T√ºr√º', 'N/A')}\n")
                        p.add_run(f"Bakƒ±m Tarihi: ").bold = True
                        p.add_run(f"{maint.get('Bakƒ±m Tarihi', 'N/A')}\n")
                        p.add_run(f"Maliyet: ").bold = True
                        p.add_run(f"{self.tr_money(amount)} TL\n")
                        p.add_run(f"A√ßƒ±klama: ").bold = True
                        p.add_run(f"{maint.get('A√ßƒ±klama', 'N/A')}\n")
                        doc.add_paragraph("")
                    
                    doc.add_paragraph(f"Bakƒ±m/Onarƒ±m Toplamƒ±: {self.tr_money(total_maintenance)} TL")
                    doc.add_paragraph("")
                
                # Yakƒ±t giderleri
                if 'yakit_giderleri' in expense_types and not fuel.empty:
                    doc.add_heading('‚õΩ Yakƒ±t Giderleri', level=1)
                    total_fuel = 0
                    
                    for _, fuel_record in fuel.iterrows():
                        amount = fuel_record.get('Tutar', 0)
                        try:
                            amount = float(amount)
                            total_fuel += amount
                        except:
                            amount = 0
                        
                        # Ara√ß bilgilerini bul
                        vehicle_info = vehicles[vehicles['Plaka'] == fuel_record.get('Ara√ß Plakasƒ±', '')]
                        if not vehicle_info.empty:
                            vehicle_info = vehicle_info.iloc[0]
                            vehicle_text = f"{fuel_record.get('Ara√ß Plakasƒ±', 'N/A')} - {vehicle_info.get('Marka', '')} {vehicle_info.get('Model', '')}"
                        else:
                            vehicle_text = fuel_record.get('Ara√ß Plakasƒ±', 'N/A')
                        
                        p = doc.add_paragraph()
                        p.add_run(f"Ara√ß: ").bold = True
                        p.add_run(f"{vehicle_text}\n")
                        p.add_run(f"Yakƒ±t T√ºr√º: ").bold = True
                        p.add_run(f"{fuel_record.get('Yakƒ±t T√ºr√º', 'N/A')}\n")
                        p.add_run(f"Tarih: ").bold = True
                        p.add_run(f"{fuel_record.get('Tarih', 'N/A')}\n")
                        p.add_run(f"Litre: ").bold = True
                        p.add_run(f"{fuel_record.get('Litre', 'N/A')} L\n")
                        p.add_run(f"Tutar: ").bold = True
                        p.add_run(f"{self.tr_money(amount)} TL\n")
                        doc.add_paragraph("")
                    
                    doc.add_paragraph(f"Yakƒ±t Giderleri Toplamƒ±: {self.tr_money(total_fuel)} TL")
                    doc.add_paragraph("")
                
                # Genel toplam
                total_all = 0
                if 'genel_giderler' in expense_types and not expenses.empty:
                    total_all += expenses['Tutar'].astype(float).sum()
                if 'bakim_onarim' in expense_types and not maintenance.empty:
                    total_all += maintenance['Maliyet'].astype(float).sum()
                if 'yakit_giderleri' in expense_types and not fuel.empty:
                    total_all += fuel['Tutar'].astype(float).sum()
                
                doc.add_heading('üìä GENEL TOPLAM', level=1)
                doc.add_paragraph(f"Se√ßilen yƒ±llar i√ßin toplam gider: {self.tr_money(total_all)} TL")
                
                # Dosyayƒ± kaydet
                doc.save(filename)
                QMessageBox.information(self, "Ba≈üarƒ±lƒ±", f"Word raporu olu≈üturuldu:\n{filename}")
                
            elif format_choice == 'pdf':
                # PDF raporu olu≈ütur
                from reportlab.lib.pagesizes import A4
                from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
                from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
                from reportlab.lib.units import inch
                from reportlab.lib import colors
                from reportlab.pdfbase import pdfmetrics
                from reportlab.pdfbase.ttfonts import TTFont
                
                # T√ºrk√ße font desteƒüi
                try:
                    pdfmetrics.registerFont(TTFont('DejaVuSans', 'DejaVuSans.ttf'))
                    font_name = 'DejaVuSans'
                except:
                    font_name = 'Helvetica'
                
                doc = SimpleDocTemplate(filename, pagesize=A4)
                story = []
                
                # Stil tanƒ±mlarƒ±
                styles = getSampleStyleSheet()
                title_style = ParagraphStyle(
                    'CustomTitle',
                    parent=styles['Heading1'],
                    fontSize=18,
                    spaceAfter=30,
                    alignment=1,  # Center
                    fontName=font_name
                )
                
                heading_style = ParagraphStyle(
                    'CustomHeading',
                    parent=styles['Heading2'],
                    fontSize=14,
                    spaceAfter=12,
                    fontName=font_name
                )
                
                normal_style = ParagraphStyle(
                    'CustomNormal',
                    parent=styles['Normal'],
                    fontSize=10,
                    spaceAfter=6,
                    fontName=font_name
                )
                
                # Ba≈ülƒ±k
                if selected_years:
                    years_text = ", ".join(map(str, selected_years))
                    title_text = f'Yƒ±llara G√∂re Ara√ß Gider Raporu ({years_text})'
                else:
                    title_text = 'Yƒ±llara G√∂re Ara√ß Gider Raporu'
                story.append(Paragraph(title_text, title_style))
                
                # Rapor bilgileri
                story.append(Paragraph(f"Rapor Tarihi: {datetime.now().strftime('%d.%m.%Y %H:%M')}", normal_style))
                story.append(Paragraph(f"Dahil Edilen Gider T√ºrleri: {', '.join(expense_types)}", normal_style))
                story.append(Spacer(1, 20))
                
                # Genel giderler
                if 'genel_giderler' in expense_types and not expenses.empty:
                    story.append(Paragraph('üí∞ Genel Giderler', heading_style))
                    total_general = 0
                    
                    for _, expense in expenses.iterrows():
                        amount = expense.get('Tutar', 0)
                        try:
                            amount = float(amount)
                            total_general += amount
                        except:
                            amount = 0
                        
                        # Ara√ß bilgilerini bul
                        vehicle_info = vehicles[vehicles['Plaka'] == expense.get('Ara√ß Plakasƒ±', '')]
                        if not vehicle_info.empty:
                            vehicle_info = vehicle_info.iloc[0]
                            vehicle_text = f"{expense.get('Ara√ß Plakasƒ±', 'N/A')} - {vehicle_info.get('Marka', '')} {vehicle_info.get('Model', '')}"
                        else:
                            vehicle_text = expense.get('Ara√ß Plakasƒ±', 'N/A')
                        
                        story.append(Paragraph(f"<b>Ara√ß:</b> {vehicle_text}", normal_style))
                        story.append(Paragraph(f"<b>Gider T√ºr√º:</b> {expense.get('Gider T√ºr√º', 'N/A')}", normal_style))
                        story.append(Paragraph(f"<b>Tarih:</b> {expense.get('Tarih', 'N/A')}", normal_style))
                        story.append(Paragraph(f"<b>Tutar:</b> {self.tr_money(amount)} TL", normal_style))
                        story.append(Paragraph(f"<b>A√ßƒ±klama:</b> {expense.get('A√ßƒ±klama', 'N/A')}", normal_style))
                        story.append(Spacer(1, 10))
                    
                    story.append(Paragraph(f"<b>Genel Giderler Toplamƒ±: {self.tr_money(total_general)} TL</b>", normal_style))
                    story.append(Spacer(1, 20))
                
                # Bakƒ±m/Onarƒ±m giderleri
                if 'bakim_onarim' in expense_types and not maintenance.empty:
                    story.append(Paragraph('üîß Bakƒ±m/Onarƒ±m Giderleri', heading_style))
                    total_maintenance = 0
                    
                    for _, maint in maintenance.iterrows():
                        amount = maint.get('Maliyet', 0)
                        try:
                            amount = float(amount)
                            total_maintenance += amount
                        except:
                            amount = 0
                        
                        # Ara√ß bilgilerini bul
                        vehicle_info = vehicles[vehicles['Plaka'] == maint.get('Ara√ß Plakasƒ±', '')]
                        if not vehicle_info.empty:
                            vehicle_info = vehicle_info.iloc[0]
                            vehicle_text = f"{maint.get('Ara√ß Plakasƒ±', 'N/A')} - {vehicle_info.get('Marka', '')} {vehicle_info.get('Model', '')}"
                        else:
                            vehicle_text = maint.get('Ara√ß Plakasƒ±', 'N/A')
                        
                        story.append(Paragraph(f"<b>Ara√ß:</b> {vehicle_text}", normal_style))
                        story.append(Paragraph(f"<b>Bakƒ±m T√ºr√º:</b> {maint.get('Bakƒ±m T√ºr√º', 'N/A')}", normal_style))
                        story.append(Paragraph(f"<b>Bakƒ±m Tarihi:</b> {maint.get('Bakƒ±m Tarihi', 'N/A')}", normal_style))
                        story.append(Paragraph(f"<b>Maliyet:</b> {self.tr_money(amount)} TL", normal_style))
                        story.append(Paragraph(f"<b>A√ßƒ±klama:</b> {maint.get('A√ßƒ±klama', 'N/A')}", normal_style))
                        story.append(Spacer(1, 10))
                    
                    story.append(Paragraph(f"<b>Bakƒ±m/Onarƒ±m Toplamƒ±: {self.tr_money(total_maintenance)} TL</b>", normal_style))
                    story.append(Spacer(1, 20))
                
                # Yakƒ±t giderleri
                if 'yakit_giderleri' in expense_types and not fuel.empty:
                    story.append(Paragraph('‚õΩ Yakƒ±t Giderleri', heading_style))
                    total_fuel = 0
                    
                    for _, fuel_record in fuel.iterrows():
                        amount = fuel_record.get('Tutar', 0)
                        try:
                            amount = float(amount)
                            total_fuel += amount
                        except:
                            amount = 0
                        
                        # Ara√ß bilgilerini bul
                        vehicle_info = vehicles[vehicles['Plaka'] == fuel_record.get('Ara√ß Plakasƒ±', '')]
                        if not vehicle_info.empty:
                            vehicle_info = vehicle_info.iloc[0]
                            vehicle_text = f"{fuel_record.get('Ara√ß Plakasƒ±', 'N/A')} - {vehicle_info.get('Marka', '')} {vehicle_info.get('Model', '')}"
                        else:
                            vehicle_text = fuel_record.get('Ara√ß Plakasƒ±', 'N/A')
                        
                        story.append(Paragraph(f"<b>Ara√ß:</b> {vehicle_text}", normal_style))
                        story.append(Paragraph(f"<b>Yakƒ±t T√ºr√º:</b> {fuel_record.get('Yakƒ±t T√ºr√º', 'N/A')}", normal_style))
                        story.append(Paragraph(f"<b>Tarih:</b> {fuel_record.get('Tarih', 'N/A')}", normal_style))
                        story.append(Paragraph(f"<b>Litre:</b> {fuel_record.get('Litre', 'N/A')} L", normal_style))
                        story.append(Paragraph(f"<b>Tutar:</b> {self.tr_money(amount)} TL", normal_style))
                        story.append(Spacer(1, 10))
                    
                    story.append(Paragraph(f"<b>Yakƒ±t Giderleri Toplamƒ±: {self.tr_money(total_fuel)} TL</b>", normal_style))
                    story.append(Spacer(1, 20))
                
                # Genel toplam
                total_all = 0
                if 'genel_giderler' in expense_types and not expenses.empty:
                    total_all += expenses['Tutar'].astype(float).sum()
                if 'bakim_onarim' in expense_types and not maintenance.empty:
                    total_all += maintenance['Maliyet'].astype(float).sum()
                if 'yakit_giderleri' in expense_types and not fuel.empty:
                    total_all += fuel['Tutar'].astype(float).sum()
                
                story.append(Paragraph('üìä GENEL TOPLAM', heading_style))
                story.append(Paragraph(f"<b>Se√ßilen yƒ±llar i√ßin toplam gider: {self.tr_money(total_all)} TL</b>", normal_style))
                
                # PDF olu≈ütur
                doc.build(story)
                QMessageBox.information(self, "Ba≈üarƒ±lƒ±", f"PDF raporu olu≈üturuldu:\n{filename}")
                
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Rapor olu≈üturma hatasƒ±: {str(e)}")

class CalendarPanel(QWidget):
    def __init__(self, data_manager):
        super().__init__()
        self.data_manager = data_manager
        self.init_ui()
        self.load_reminders()
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)
        
        # Ba≈ülƒ±k ve butonlar
        header_layout = QHBoxLayout()
        
        title = QLabel("Takvim & Hatƒ±rlatmalar")
        title.setStyleSheet("font-size: 24px; font-weight: bold; color: #2c3e50;")
        header_layout.addWidget(title)
        
        header_layout.addStretch()
        
        # Butonlar
        btn_add = QPushButton("‚ûï Hatƒ±rlatma Ekle")
        btn_add.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        btn_add.clicked.connect(self.add_reminder)
        
        btn_edit = QPushButton("‚úèÔ∏è D√ºzenle")
        btn_edit.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        btn_edit.clicked.connect(self.edit_reminder)
        
        btn_delete = QPushButton("üóëÔ∏è Sil")
        btn_delete.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
        """)
        btn_delete.clicked.connect(self.delete_reminder)
        
        header_layout.addWidget(btn_add)
        header_layout.addWidget(btn_edit)
        header_layout.addWidget(btn_delete)
        
        layout.addLayout(header_layout)
        
        # Yakla≈üan hatƒ±rlatmalar
        upcoming_group = QGroupBox("Yakla≈üan Hatƒ±rlatmalar")
        upcoming_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
            }
        """)
        
        upcoming_layout = QVBoxLayout(upcoming_group)
        
        self.upcoming_list = QListWidget()
        self.upcoming_list.setMaximumHeight(150)
        upcoming_layout.addWidget(self.upcoming_list)
        
        layout.addWidget(upcoming_group)
        
        # T√ºm hatƒ±rlatmalar
        all_group = QGroupBox("T√ºm Hatƒ±rlatmalar")
        all_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
            }
        """)
        
        all_layout = QVBoxLayout(all_group)
        
        self.reminders_table = QTableWidget()
        self.reminders_table.setColumnCount(5)
        self.reminders_table.setHorizontalHeaderLabels([
            "Ba≈ülƒ±k", "A√ßƒ±klama", "Tarih", "T√ºr", "Durum"
        ])
        self.reminders_table.horizontalHeader().setStretchLastSection(True)
        self.reminders_table.setAlternatingRowColors(True)
        self.reminders_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.reminders_table.setSelectionMode(QAbstractItemView.SingleSelection)
        
        # Satƒ±r numaralarƒ±nƒ± gizle
        self.reminders_table.verticalHeader().setVisible(False)
        
        all_layout.addWidget(self.reminders_table)
        layout.addWidget(all_group)
    
    def load_reminders(self):
        """Hatƒ±rlatmalarƒ± y√ºkle"""
        try:
            reminders = self.data_manager.load_data('hatirlatmalar')
            self.reminders_table.setRowCount(len(reminders))
            
            # Yakla≈üan hatƒ±rlatmalarƒ± temizle
            self.upcoming_list.clear()
            
            current_date = datetime.now().date()
            
            for row, (_, reminder) in enumerate(reminders.iterrows()):
                # Tablo i√ßin
                self.reminders_table.setItem(row, 0, QTableWidgetItem(str(reminder.get('Ba≈ülƒ±k', ''))))
                self.reminders_table.setItem(row, 1, QTableWidgetItem(str(reminder.get('A√ßƒ±klama', ''))))
                self.reminders_table.setItem(row, 2, QTableWidgetItem(str(reminder.get('Tarih', ''))))
                self.reminders_table.setItem(row, 3, QTableWidgetItem(str(reminder.get('T√ºr', ''))))
                self.reminders_table.setItem(row, 4, QTableWidgetItem(str(reminder.get('Durum', ''))))
                
                # Yakla≈üan hatƒ±rlatmalar i√ßin
                try:
                    reminder_date = datetime.strptime(str(reminder.get('Tarih', '')), "%Y-%m-%d").date()
                    if reminder_date >= current_date and reminder.get('Durum') != 'Tamamlandƒ±':
                        days_left = (reminder_date - current_date).days
                        item_text = f"{reminder.get('Ba≈ülƒ±k', '')} - {reminder_date.strftime('%d.%m.%Y')} ({days_left} g√ºn kaldƒ±)"
                        self.upcoming_list.addItem(item_text)
                except:
                    pass
                    
        except Exception as e:
            print(f"Hatƒ±rlatma y√ºkleme hatasƒ±: {e}")
    
    def add_reminder(self):
        """Hatƒ±rlatma ekle"""
        dialog = ReminderDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            self.load_reminders()
    
    def edit_reminder(self):
        """Hatƒ±rlatma d√ºzenle"""
        current_row = self.reminders_table.currentRow()
        if current_row >= 0:
            baslik = self.reminders_table.item(current_row, 0).text()
            reminders = self.data_manager.load_data('hatirlatmalar')
            reminder = reminders[reminders['Ba≈ülƒ±k'] == baslik]
            if not reminder.empty:
                dialog = ReminderDialog(self, reminder.iloc[0].to_dict())
                if dialog.exec_() == QDialog.Accepted:
                    self.load_reminders()
        else:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen d√ºzenlenecek hatƒ±rlatmayƒ± se√ßin.")
    
    def delete_reminder(self):
        """Hatƒ±rlatma sil"""
        current_row = self.reminders_table.currentRow()
        if current_row >= 0:
            baslik = self.reminders_table.item(current_row, 0).text()
            reply = QMessageBox.question(self, "Onay", 
                f"'{baslik}' hatƒ±rlatmasƒ±nƒ± silmek istediƒüinizden emin misiniz?",
                QMessageBox.Yes | QMessageBox.No)
            
            if reply == QMessageBox.Yes:
                try:
                    reminders = self.data_manager.load_data('hatirlatmalar')
                    reminders = reminders[reminders['Ba≈ülƒ±k'] != baslik]
                    self.data_manager.save_data('hatirlatmalar', reminders)
                    self.load_reminders()
                    QMessageBox.information(self, "Ba≈üarƒ±lƒ±", "Hatƒ±rlatma silindi.")
                except Exception as e:
                    QMessageBox.critical(self, "Hata", f"Hatƒ±rlatma silme hatasƒ±: {str(e)}")
        else:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen silinecek hatƒ±rlatmayƒ± se√ßin.")

class ReminderDialog(QDialog):
    """Hatƒ±rlatma ekleme/d√ºzenleme dialog"""
    
    def __init__(self, parent=None, reminder_data=None):
        super().__init__(parent)
        self.reminder_data = reminder_data
        self.data_manager = parent.data_manager if parent else DataManager()
        self.init_ui()
        if reminder_data:
            self.load_reminder_data(reminder_data)
    
    def init_ui(self):
        self.setWindowTitle("Hatƒ±rlatma Ekle" if not self.reminder_data else "Hatƒ±rlatma D√ºzenle")
        self.setMinimumWidth(500)
        self.setModal(True)
        
        layout = QFormLayout(self)
        layout.setSpacing(15)
        
        # Form alanlarƒ±
        self.baslik = QLineEdit()
        
        self.aciklama = QTextEdit()
        self.aciklama.setMaximumHeight(100)
        
        self.tarih = QDateEdit()
        self.tarih.setCalendarPopup(True)
        self.tarih.setDate(QDate.currentDate())
        
        self.tur = QComboBox()
        self.tur.addItems([
            "Muayene", "Sigorta", "Bakƒ±m", "Kasko", "Vergi", "Diƒüer"
        ])
        
        self.durum = QComboBox()
        self.durum.addItems(["Bekliyor", "Tamamlandƒ±", "ƒ∞ptal"])
        
        # Form'a ekle
        layout.addRow("Ba≈ülƒ±k:", self.baslik)
        layout.addRow("A√ßƒ±klama:", self.aciklama)
        layout.addRow("Tarih:", self.tarih)
        layout.addRow("T√ºr:", self.tur)
        layout.addRow("Durum:", self.durum)
        
        # Butonlar
        btn_layout = QHBoxLayout()
        btn_save = QPushButton("Kaydet")
        btn_save.clicked.connect(self.save_reminder)
        btn_cancel = QPushButton("ƒ∞ptal")
        btn_cancel.clicked.connect(self.reject)
        
        btn_layout.addWidget(btn_save)
        btn_layout.addWidget(btn_cancel)
        layout.addRow(btn_layout)
    
    def load_reminder_data(self, reminder_data):
        """Hatƒ±rlatma verilerini y√ºkle"""
        self.baslik.setText(str(reminder_data.get('Ba≈ülƒ±k', '')))
        self.aciklama.setPlainText(str(reminder_data.get('A√ßƒ±klama', '')))
        
        # Tarihi y√ºkle
        try:
            reminder_date = QDate.fromString(str(reminder_data.get('Tarih', '')), "yyyy-MM-dd")
            if reminder_date.isValid():
                self.tarih.setDate(reminder_date)
        except:
            pass
        
        self.tur.setCurrentText(str(reminder_data.get('T√ºr', 'Diƒüer')))
        self.durum.setCurrentText(str(reminder_data.get('Durum', 'Bekliyor')))
    
    def save_reminder(self):
        """Hatƒ±rlatma kaydet"""
        if not self.baslik.text().strip():
            QMessageBox.warning(self, "Uyarƒ±", "Ba≈ülƒ±k alanƒ± zorunludur.")
            return
        
        try:
            reminders = self.data_manager.load_data('hatirlatmalar')
            
            # Yeni hatƒ±rlatma verisi
            new_reminder = {
                'ID': len(reminders) + 1 if not reminders.empty else 1,
                'Ba≈ülƒ±k': self.baslik.text().strip(),
                'A√ßƒ±klama': self.aciklama.toPlainText().strip(),
                'Tarih': self.tarih.date().toString("yyyy-MM-dd"),
                'T√ºr': self.tur.currentText(),
                'Durum': self.durum.currentText(),
                'Olu≈üturma Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            if self.reminder_data:
                # D√ºzenleme modu
                reminders = reminders[reminders['Ba≈ülƒ±k'] != self.reminder_data['Ba≈ülƒ±k']]
            
            # Yeni veriyi ekle
            new_df = pd.DataFrame([new_reminder])
            reminders = pd.concat([reminders, new_df], ignore_index=True)
            
            # Kaydet
            if self.data_manager.save_data('hatirlatmalar', reminders):
                QMessageBox.information(self, "Ba≈üarƒ±lƒ±", 
                    "Hatƒ±rlatma g√ºncellendi." if self.reminder_data else "Hatƒ±rlatma eklendi.")
                self.accept()
            else:
                QMessageBox.critical(self, "Hata", "Kaydetme hatasƒ±.")
                
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Kaydetme hatasƒ±: {str(e)}")

class DocumentsPanel(QWidget):
    def __init__(self, data_manager):
        super().__init__()
        self.data_manager = data_manager
        self.init_ui()
        self.load_documents()
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)
        
        # Ba≈ülƒ±k ve butonlar
        header_layout = QHBoxLayout()
        
        title = QLabel("Belge Y√∂netimi")
        title.setStyleSheet("font-size: 24px; font-weight: bold; color: #2c3e50;")
        header_layout.addWidget(title)
        
        header_layout.addStretch()
        
        # Butonlar
        btn_add = QPushButton("üìÅ Belge Ekle")
        btn_add.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        btn_add.clicked.connect(self.add_document)
        
        btn_view = QPushButton("üëÅÔ∏è G√∂r√ºnt√ºle")
        btn_view.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        btn_view.clicked.connect(self.view_document)
        
        btn_delete = QPushButton("üóëÔ∏è Sil")
        btn_delete.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
        """)
        btn_delete.clicked.connect(self.delete_document)
        
        header_layout.addWidget(btn_add)
        header_layout.addWidget(btn_view)
        header_layout.addWidget(btn_delete)
        
        layout.addLayout(header_layout)
        
        # Belge listesi
        self.documents_table = QTableWidget()
        self.documents_table.setColumnCount(5)
        self.documents_table.setHorizontalHeaderLabels([
            "Ara√ß Plakasƒ±", "Belge T√ºr√º", "Dosya Adƒ±", "Y√ºkleme Tarihi", "A√ßƒ±klama"
        ])
        self.documents_table.horizontalHeader().setStretchLastSection(True)
        self.documents_table.setAlternatingRowColors(True)
        self.documents_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.documents_table.setSelectionMode(QAbstractItemView.SingleSelection)
        
        # Satƒ±r numaralarƒ±nƒ± gizle
        self.documents_table.verticalHeader().setVisible(False)
        
        layout.addWidget(self.documents_table)
    
    def load_documents(self):
        """Belgeleri y√ºkle"""
        try:
            documents = self.data_manager.load_data('belgeler')
            self.documents_table.setRowCount(len(documents))
            
            for row, (_, document) in enumerate(documents.iterrows()):
                self.documents_table.setItem(row, 0, QTableWidgetItem(str(document.get('Ara√ß Plakasƒ±', ''))))
                self.documents_table.setItem(row, 1, QTableWidgetItem(str(document.get('Belge T√ºr√º', ''))))
                self.documents_table.setItem(row, 2, QTableWidgetItem(str(document.get('Dosya Adƒ±', ''))))
                self.documents_table.setItem(row, 3, QTableWidgetItem(str(document.get('Y√ºkleme Tarihi', ''))))
                self.documents_table.setItem(row, 4, QTableWidgetItem(str(document.get('A√ßƒ±klama', ''))))
        except Exception as e:
            print(f"Belge y√ºkleme hatasƒ±: {e}")
    
    def add_document(self):
        """Belge ekle"""
        dialog = DocumentDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            self.load_documents()
    
    def view_document(self):
        """Belge g√∂r√ºnt√ºle"""
        current_row = self.documents_table.currentRow()
        if current_row >= 0:
            dosya_adi = self.documents_table.item(current_row, 2).text()
            dosya_yolu = self.documents_table.item(current_row, 2).text()  # Basit implementasyon
            
            if dosya_yolu and os.path.exists(dosya_yolu):
                try:
                    os.startfile(dosya_yolu)  # Windows i√ßin
                except:
                    QMessageBox.information(self, "Bilgi", f"Dosya a√ßƒ±lamadƒ±: {dosya_yolu}")
            else:
                QMessageBox.warning(self, "Uyarƒ±", "Dosya bulunamadƒ±.")
        else:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen g√∂r√ºnt√ºlenecek belgeyi se√ßin.")
    
    def delete_document(self):
        """Belge sil"""
        current_row = self.documents_table.currentRow()
        if current_row >= 0:
            dosya_adi = self.documents_table.item(current_row, 2).text()
            reply = QMessageBox.question(self, "Onay", 
                f"'{dosya_adi}' belgesini silmek istediƒüinizden emin misiniz?",
                QMessageBox.Yes | QMessageBox.No)
            
            if reply == QMessageBox.Yes:
                try:
                    documents = self.data_manager.load_data('belgeler')
                    documents = documents[documents['Dosya Adƒ±'] != dosya_adi]
                    self.data_manager.save_data('belgeler', documents)
                    self.load_documents()
                    QMessageBox.information(self, "Ba≈üarƒ±lƒ±", "Belge silindi.")
                except Exception as e:
                    QMessageBox.critical(self, "Hata", f"Belge silme hatasƒ±: {str(e)}")
        else:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen silinecek belgeyi se√ßin.")

class DocumentDialog(QDialog):
    """Belge ekleme dialog"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.data_manager = parent.data_manager if parent else DataManager()
        self.selected_file_path = ""
        self.init_ui()
    
    def init_ui(self):
        self.setWindowTitle("Belge Ekle")
        self.setMinimumWidth(500)
        self.setModal(True)
        
        layout = QFormLayout(self)
        layout.setSpacing(15)
        
        # Form alanlarƒ±
        self.arac_plakasi = QComboBox()
        self.load_vehicles()
        
        self.belge_turu = QComboBox()
        self.belge_turu.addItems([
            "Ruhsat", "Sigorta", "Muayene", "Kasko", "Fatura", "Diƒüer"
        ])
        
        # Dosya se√ßimi
        file_layout = QHBoxLayout()
        self.file_path_label = QLabel("Dosya se√ßilmedi")
        self.file_path_label.setStyleSheet("color: #7f8c8d; font-style: italic;")
        
        btn_browse = QPushButton("Dosya Se√ß")
        btn_browse.clicked.connect(self.browse_file)
        
        file_layout.addWidget(self.file_path_label)
        file_layout.addWidget(btn_browse)
        
        self.aciklama = QTextEdit()
        self.aciklama.setMaximumHeight(100)
        
        # Form'a ekle
        layout.addRow("Ara√ß Plakasƒ±:", self.arac_plakasi)
        layout.addRow("Belge T√ºr√º:", self.belge_turu)
        layout.addRow("Dosya:", file_layout)
        layout.addRow("A√ßƒ±klama:", self.aciklama)
        
        # Butonlar
        btn_layout = QHBoxLayout()
        btn_save = QPushButton("Kaydet")
        btn_save.clicked.connect(self.save_document)
        btn_cancel = QPushButton("ƒ∞ptal")
        btn_cancel.clicked.connect(self.reject)
        
        btn_layout.addWidget(btn_save)
        btn_layout.addWidget(btn_cancel)
        layout.addRow(btn_layout)
    
    def load_vehicles(self):
        """Mevcut ara√ßlarƒ± y√ºkle"""
        try:
            vehicles = self.data_manager.load_data('araclar')
            self.arac_plakasi.clear()
            
            if not vehicles.empty:
                for _, vehicle in vehicles.iterrows():
                    plaka = vehicle.get('Plaka', '')
                    marka = vehicle.get('Marka', '')
                    model = vehicle.get('Model', '')
                    self.arac_plakasi.addItem(f"{plaka} - {marka} {model}")
        except Exception as e:
            print(f"Ara√ß y√ºkleme hatasƒ±: {e}")
    
    def browse_file(self):
        """Dosya se√ß"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, "Belge Se√ß", "", 
            "T√ºm Dosyalar (*);;PDF Dosyalarƒ± (*.pdf);;Resim Dosyalarƒ± (*.jpg *.jpeg *.png);;Word Dosyalarƒ± (*.doc *.docx)"
        )
        
        if file_path:
            self.selected_file_path = file_path
            self.file_path_label.setText(os.path.basename(file_path))
            self.file_path_label.setStyleSheet("color: #2c3e50; font-weight: bold;")
    
    def save_document(self):
        """Belge kaydet"""
        if not self.arac_plakasi.currentText():
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen bir ara√ß se√ßin.")
            return
        
        if not self.selected_file_path:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen bir dosya se√ßin.")
            return
        
        try:
            documents = self.data_manager.load_data('belgeler')
            
            # Ara√ß plakasƒ±nƒ± ayƒ±r
            arac_text = self.arac_plakasi.currentText()
            plaka = arac_text.split(' - ')[0] if ' - ' in arac_text else arac_text
            
            # Belgeler klas√∂r√ºn√º olu≈ütur
            belgeler_dir = os.path.join(Config.DATA_DIR, "belgeler")
            if not os.path.exists(belgeler_dir):
                os.makedirs(belgeler_dir)
            
            # Orijinal dosya adƒ±nƒ± al
            orijinal_dosya_adi = os.path.basename(self.selected_file_path)
            dosya_uzantisi = os.path.splitext(orijinal_dosya_adi)[1]
            
            # Yeni dosya adƒ±nƒ± olu≈ütur: plaka_tarih_uzanti
            tarih_str = datetime.now().strftime("%Y%m%d_%H%M%S")
            yeni_dosya_adi = f"{plaka}_{tarih_str}{dosya_uzantisi}"
            
            # Yeni dosya yolu
            yeni_dosya_yolu = os.path.join(belgeler_dir, yeni_dosya_adi)
            
            # Dosyayƒ± belgeler klas√∂r√ºne kopyala
            import shutil
            shutil.copy2(self.selected_file_path, yeni_dosya_yolu)
            
            # Yeni belge verisi
            new_document = {
                'ID': len(documents) + 1 if not documents.empty else 1,
                'Ara√ß Plakasƒ±': plaka,
                'Belge T√ºr√º': self.belge_turu.currentText(),
                'Dosya Adƒ±': orijinal_dosya_adi,
                'Dosya Yolu': yeni_dosya_yolu,
                'Y√ºkleme Tarihi': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'A√ßƒ±klama': self.aciklama.toPlainText().strip()
            }
            
            # Yeni veriyi ekle
            new_df = pd.DataFrame([new_document])
            documents = pd.concat([documents, new_df], ignore_index=True)
            
            # Kaydet
            if self.data_manager.save_data('belgeler', documents):
                QMessageBox.information(self, "Ba≈üarƒ±lƒ±", f"Belge ba≈üarƒ±yla eklendi.\nDosya: {yeni_dosya_yolu}")
                self.accept()
            else:
                QMessageBox.critical(self, "Hata", "Kaydetme hatasƒ±.")
                
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Kaydetme hatasƒ±: {str(e)}")

class SettingsPanel(QWidget):
    def __init__(self, data_manager):
        super().__init__()
        self.data_manager = data_manager
        self.init_ui()
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)
        
        # Ba≈ülƒ±k
        title = QLabel("Ayarlar")
        title.setStyleSheet("font-size: 24px; font-weight: bold; color: #2c3e50;")
        layout.addWidget(title)
        
        # Uygulama bilgileri
        app_group = QGroupBox("Uygulama Bilgileri")
        app_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
            }
        """)
        
        app_layout = QFormLayout(app_group)
        
        app_name_label = QLabel(Config.APP_NAME)
        app_version_label = QLabel(Config.VERSION)
        app_developer_label = QLabel(Config.DEVELOPER)
        app_email_label = QLabel(Config.EMAIL)
        
        app_layout.addRow("Uygulama Adƒ±:", app_name_label)
        app_layout.addRow("Versiyon:", app_version_label)
        app_layout.addRow("Geli≈ütirici:", app_developer_label)
        app_layout.addRow("E-posta:", app_email_label)
        
        layout.addWidget(app_group)
        
        # Veri y√∂netimi
        data_group = QGroupBox("Veri Y√∂netimi")
        data_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
            }
        """)
        
        data_layout = QVBoxLayout(data_group)
        
        # Veri yedekleme
        btn_backup = QPushButton("üíæ Veri Yedekle")
        btn_backup.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 15px;
                border-radius: 5px;
                font-weight: bold;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        btn_backup.clicked.connect(self.backup_data)
        
        # Excel export
        btn_export = QPushButton("üìä Excel'e Aktar")
        btn_export.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 15px;
                border-radius: 5px;
                font-weight: bold;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        btn_export.clicked.connect(self.export_to_excel)
        
        # Excel ≈üablon indirme
        btn_templates = QPushButton("üìã Excel ≈ûablonlarƒ± ƒ∞ndir")
        btn_templates.setStyleSheet("""
            QPushButton {
                background-color: #f39c12;
                color: white;
                border: none;
                padding: 15px;
                border-radius: 5px;
                font-weight: bold;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #e67e22;
            }
        """)
        btn_templates.clicked.connect(self.download_excel_templates)
        
        data_layout.addWidget(btn_backup)
        data_layout.addWidget(btn_export)
        data_layout.addWidget(btn_templates)
        
        layout.addWidget(data_group)
        
        # Sistem bilgileri
        system_group = QGroupBox("Sistem Bilgileri")
        system_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
            }
        """)
        
        system_layout = QFormLayout(system_group)
        
        # Veri klas√∂r√º
        data_dir_label = QLabel(Config.DATA_DIR)
        system_layout.addRow("Veri Klas√∂r√º:", data_dir_label)
        
        # Yedek klas√∂r√º
        backup_dir_label = QLabel(Config.BACKUP_DIR)
        system_layout.addRow("Yedek Klas√∂r√º:", backup_dir_label)
        
        # Log klas√∂r√º
        log_dir_label = QLabel(Config.LOG_DIR)
        system_layout.addRow("Log Klas√∂r√º:", log_dir_label)
        
        layout.addWidget(system_group)
        
        # G√ºncelleme ayarlarƒ±
        update_group = QGroupBox("üîÑ G√ºncelleme Ayarlarƒ±")
        update_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
            }
        """)
        
        update_layout = QVBoxLayout(update_group)
        
        # G√ºncelleme kontrol√º
        btn_check_update = QPushButton("üîç G√ºncelleme Kontrol Et")
        btn_check_update.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 15px;
                border-radius: 5px;
                font-weight: bold;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        btn_check_update.clicked.connect(self.check_for_updates)
        
        # GitHub repository bilgisi
        repo_info = QLabel(f"Repository: {Config.GITHUB_REPO_URL}")
        repo_info.setStyleSheet("font-size: 12px; color: #7f8c8d; padding: 5px;")
        repo_info.setWordWrap(True)
        
        # G√ºncelleme durumu
        self.update_status_label = QLabel("Son kontrol: Hen√ºz kontrol edilmedi")
        self.update_status_label.setStyleSheet("font-size: 12px; color: #7f8c8d; padding: 5px;")
        
        update_layout.addWidget(btn_check_update)
        update_layout.addWidget(repo_info)
        update_layout.addWidget(self.update_status_label)
        
        layout.addWidget(update_group)
        

        
        # Alt bo≈üluk
        layout.addStretch()
    
    def backup_data(self):
        """Veri yedekle"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_dir = os.path.join(Config.BACKUP_DIR, f"yedek_{timestamp}")
            os.makedirs(backup_dir, exist_ok=True)
            
            for data_type, filename in Config.EXCEL_FILES.items():
                source = os.path.join(Config.DATA_DIR, filename)
                if os.path.exists(source):
                    shutil.copy2(source, backup_dir)
            
            QMessageBox.information(self, "Ba≈üarƒ±lƒ±", f"Veriler yedeklendi:\n{backup_dir}")
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Yedekleme hatasƒ±: {str(e)}")
    
    def export_to_excel(self):
        """Excel'e aktar"""
        try:
            folder = QFileDialog.getExistingDirectory(self, "Excel dosyalarƒ±nƒ± kaydet")
            if folder:
                for data_type, filename in Config.EXCEL_FILES.items():
                    source = os.path.join(Config.DATA_DIR, filename)
                    if os.path.exists(source):
                        dest = os.path.join(folder, filename)
                        shutil.copy2(source, dest)
                
                QMessageBox.information(self, "Ba≈üarƒ±lƒ±", f"Excel dosyalarƒ± kaydedildi:\n{folder}")
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Export hatasƒ±: {str(e)}")
    

    
    def download_excel_templates(self):
        """Excel ≈üablonlarƒ±nƒ± indir"""
        try:
            # Template manager olu≈ütur
            template_manager = ExcelTemplateManager(self.data_manager)
            
            # Dialog'u g√∂ster
            dialog = ExcelTemplateDownloadDialog(self, template_manager)
            dialog.exec_()
            
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"≈ûablon indirme hatasƒ±: {str(e)}")
    
    def check_for_updates(self):
        """G√ºncelleme kontrol√º"""
        try:
            # Ana pencereye eri≈üim
            main_window = self.window()
            if hasattr(main_window, 'check_for_updates'):
                # G√ºncelleme kontrol√ºn√º ba≈ülat
                main_window.check_for_updates()
                
                # Durum etiketini g√ºncelle
                self.update_status_label.setText(f"Son kontrol: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
                self.update_status_label.setStyleSheet("font-size: 12px; color: #27ae60; padding: 5px;")
                
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"G√ºncelleme kontrol√º hatasƒ±: {str(e)}")

class ExcelTemplateDownloadDialog(QDialog):
    """Excel ≈üablon indirme dialog'u"""
    
    def __init__(self, parent=None, template_manager=None):
        super().__init__(parent)
        self.template_manager = template_manager
        self.selected_templates = []
        self.init_ui()
    
    def init_ui(self):
        self.setWindowTitle("Excel ≈ûablon ƒ∞ndirme")
        self.setFixedSize(600, 500)
        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
        
        layout = QVBoxLayout()
        
        # Ba≈ülƒ±k
        title_label = QLabel("üì• Excel ≈ûablonlarƒ± ƒ∞ndir")
        title_label.setStyleSheet("font-size: 16px; font-weight: bold; margin-bottom: 15px; color: #2196f3;")
        layout.addWidget(title_label)
        
        # A√ßƒ±klama
        desc_label = QLabel("Veri y√ºklemesi i√ßin kullanabileceƒüiniz Excel ≈üablonlarƒ±nƒ± indirin. Bu ≈üablonlarƒ± doldurup uygulamaya y√ºkleyebilirsiniz.")
        desc_label.setStyleSheet("font-size: 12px; color: #666; margin-bottom: 15px;")
        desc_label.setWordWrap(True)
        layout.addWidget(desc_label)
        
        # ≈ûablon listesi
        self.template_list = QListWidget()
        self.template_list.setStyleSheet("""
            QListWidget {
                border: 2px solid #ddd;
                border-radius: 8px;
                padding: 10px;
                background-color: white;
                font-size: 12px;
            }
            QListWidget::item {
                padding: 15px;
                margin: 3px;
                border-radius: 6px;
                background-color: #f8f9fa;
                border: 1px solid #e9ecef;
            }
            QListWidget::item:hover {
                background-color: #e3f2fd;
                border-color: #2196f3;
            }
            QListWidget::item:selected {
                background-color: #2196f3;
                color: white;
                border-color: #1976d2;
            }
        """)
        
        if self.template_manager:
            for data_type, info in self.template_manager.template_descriptions.items():
                item = QListWidgetItem()
                item.setText(f"üìã {info['title']}\n{info['description']}")
                item.setData(Qt.UserRole, data_type)
                item.setFlags(item.flags() | Qt.ItemIsUserCheckable)
                item.setCheckState(Qt.Unchecked)
                self.template_list.addItem(item)
        
        layout.addWidget(self.template_list)
        
        # Se√ßim butonlarƒ±
        selection_layout = QHBoxLayout()
        
        select_all_btn = QPushButton("T√ºm√ºn√º Se√ß")
        select_all_btn.setStyleSheet("""
            QPushButton {
                background-color: #ff9800;
                color: white;
                border: none;
                padding: 8px 15px;
                border-radius: 5px;
                font-size: 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #f57c00;
            }
        """)
        select_all_btn.clicked.connect(self.select_all_templates)
        
        clear_all_btn = QPushButton("Se√ßimi Temizle")
        clear_all_btn.setStyleSheet("""
            QPushButton {
                background-color: #9e9e9e;
                color: white;
                border: none;
                padding: 8px 15px;
                border-radius: 5px;
                font-size: 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #757575;
            }
        """)
        clear_all_btn.clicked.connect(self.clear_all_templates)
        
        selection_layout.addWidget(select_all_btn)
        selection_layout.addWidget(clear_all_btn)
        selection_layout.addStretch()
        
        layout.addLayout(selection_layout)
        
        # Butonlar
        button_layout = QHBoxLayout()
        
        cancel_btn = QPushButton("ƒ∞ptal")
        cancel_btn.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
                font-size: 13px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #d32f2f;
            }
        """)
        cancel_btn.clicked.connect(self.reject)
        
        download_btn = QPushButton("≈ûablonlarƒ± ƒ∞ndir")
        download_btn.setStyleSheet("""
            QPushButton {
                background-color: #4caf50;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
                font-size: 13px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #388e3c;
            }
        """)
        download_btn.clicked.connect(self.download_templates)
        
        button_layout.addWidget(cancel_btn)
        button_layout.addWidget(download_btn)
        
        layout.addLayout(button_layout)
        
        self.setLayout(layout)
    
    def select_all_templates(self):
        """T√ºm ≈üablonlarƒ± se√ß"""
        for i in range(self.template_list.count()):
            item = self.template_list.item(i)
            item.setCheckState(Qt.Checked)
    
    def clear_all_templates(self):
        """T√ºm se√ßimleri temizle"""
        for i in range(self.template_list.count()):
            item = self.template_list.item(i)
            item.setCheckState(Qt.Unchecked)
    
    def download_templates(self):
        """Se√ßili ≈üablonlarƒ± indir"""
        selected_templates = []
        for i in range(self.template_list.count()):
            item = self.template_list.item(i)
            if item.checkState() == Qt.Checked:
                selected_templates.append(item.data(Qt.UserRole))
        
        if not selected_templates:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen en az bir ≈üablon se√ßin.")
            return
        
        try:
            # Klas√∂r se√ß
            output_dir = QFileDialog.getExistingDirectory(self, "≈ûablonlarƒ± Kaydetmek ƒ∞√ßin Klas√∂r Se√ßin")
            if not output_dir:
                return
            
            # ≈ûablonlarƒ± olu≈ütur
            created_files = []
            for template_type in selected_templates:
                filename = f"{template_type}_sablonu.xlsx"
                filepath = os.path.join(output_dir, filename)
                self.template_manager.create_template(template_type, filepath)
                created_files.append(filepath)
            
            # Ba≈üarƒ± mesajƒ±
            QMessageBox.information(
                self, 
                "Ba≈üarƒ±lƒ±", 
                f"{len(created_files)} ≈üablon ba≈üarƒ±yla indirildi!\n\n"
                f"Konum: {output_dir}\n\n"
                "Bu ≈üablonlarƒ± doldurup uygulamaya y√ºkleyebilirsiniz."
            )
            
            self.accept()
            
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"≈ûablon indirme hatasƒ±: {str(e)}")






# =============================================================================
# SPLASH SCREEN Sƒ∞STEMƒ∞
# =============================================================================

class SplashScreen(QSplashScreen):
    """Ba≈ülangƒ±√ß ekranƒ±"""
    
    def __init__(self, pixmap=None):
        if pixmap is None:
            # Varsayƒ±lan splash screen olu≈ütur
            pixmap = self.create_default_splash()
        
        super().__init__(pixmap)
        self.setWindowFlags(Qt.WindowStaysOnTopHint | Qt.FramelessWindowHint)
        
        # Ba≈ülangƒ±√ß mesajƒ±
        self.showMessage("Ara√ß Filo Y√∂netim Sistemi Ba≈ülatƒ±lƒ±yor...", 
                        Qt.AlignmentFlag.AlignBottom | Qt.AlignmentFlag.AlignCenter, 
                        QColor(255, 255, 255))
    
    def create_default_splash(self):
        """Varsayƒ±lan splash screen olu≈ütur"""
        # 800x600 boyutunda splash screen
        pixmap = QPixmap(800, 600)
        pixmap.fill(QColor(37, 99, 235))  # Mavi arka plan
        
        painter = QPainter(pixmap)
        
        # Gradient arka plan
        gradient = QLinearGradient(0, 0, 0, 600)
        gradient.setColorAt(0, QColor(37, 99, 235))  # Mavi
        gradient.setColorAt(1, QColor(59, 130, 246))  # A√ßƒ±k mavi
        painter.fillRect(0, 0, 800, 600, gradient)
        
        # Ba≈ülƒ±k
        title_font = QFont("Arial", 32, QFont.Weight.Bold)
        painter.setFont(title_font)
        painter.setPen(QColor(255, 255, 255))
        painter.drawText(400, 200, "üöó Ara√ß Filo Y√∂netim Sistemi")
        
        # Alt ba≈ülƒ±k
        subtitle_font = QFont("Arial", 16)
        painter.setFont(subtitle_font)
        painter.setPen(QColor(255, 255, 255))
        painter.drawText(400, 250, "v22.07.24.01")
        
        # Ara√ß ikonlarƒ± (basit √ßizimler)
        self.draw_car_icons(painter)
        
        # Alt bilgi
        info_font = QFont("Arial", 12)
        painter.setFont(info_font)
        painter.setPen(QColor(255, 255, 255))
        painter.drawText(400, 550, "Ertuƒürul Yazƒ±lƒ±m ¬© 2024")
        
        painter.end()
        return pixmap
    
    def draw_car_icons(self, painter):
        """Basit ara√ß ikonlarƒ± √ßiz"""
        # Ara√ß g√∂vdesi (basit dikd√∂rtgenler)
        cars = [
            (150, 350, 80, 40),  # Sol ara√ß
            (350, 350, 80, 40),  # Orta ara√ß
            (550, 350, 80, 40),  # Saƒü ara√ß
        ]
        
        for x, y, w, h in cars:
            # Ara√ß g√∂vdesi
            painter.fillRect(x, y, w, h, QColor(255, 255, 255))
            # Tekerlekler
            painter.fillRect(x + 10, y + h, 15, 8, QColor(50, 50, 50))
            painter.fillRect(x + w - 25, y + h, 15, 8, QColor(50, 50, 50))
            # √ñn cam
            painter.fillRect(x + 5, y + 5, 20, 15, QColor(200, 220, 255))

class SplashThread(QThread):
    """Splash screen i√ßin ayrƒ± thread"""
    finished = pyqtSignal()
    
    def __init__(self, duration=5):
        super().__init__()
        self.duration = duration
    
    def run(self):
        time.sleep(self.duration)
        self.finished.emit()
    
    def stop(self):
        """Thread'i g√ºvenli ≈üekilde durdur"""
        self.quit()
        self.wait()

def show_splash_screen(app, main_window_class, splash_image_path=None):
    """Ba≈ülangƒ±√ß ekranƒ±nƒ± g√∂ster"""
    
    # PyInstaller ile paketlenmi≈ü dosya yolu
    if getattr(sys, 'frozen', False):
        # EXE dosyasƒ± olarak √ßalƒ±≈üƒ±yor
        base_path = sys._MEIPASS
    else:
        # Python script olarak √ßalƒ±≈üƒ±yor
        base_path = os.path.dirname(os.path.abspath(__file__))
    
    # Varsayƒ±lan splash screen dosyasƒ±
    if splash_image_path is None:
        splash_image_path = os.path.join(base_path, "baslangic.jpg")
    
    print(f"üîç Splash screen dosyasƒ± aranƒ±yor: {splash_image_path}")
    print(f"üìÅ Dosya mevcut mu: {os.path.exists(splash_image_path)}")
    
    # Splash screen olu≈ütur
    if splash_image_path and os.path.exists(splash_image_path):
        print("‚úÖ Splash screen dosyasƒ± bulundu, y√ºkleniyor...")
        pixmap = QPixmap(splash_image_path)
        if not pixmap.isNull():
            print(f"‚úÖ G√∂rsel y√ºklendi: {pixmap.width()}x{pixmap.height()}")
            
            # G√∂rseli %50 k√º√ß√ºlt
            original_width = pixmap.width()
            original_height = pixmap.height()
            new_width = int(original_width * 0.5)
            new_height = int(original_height * 0.5)
            
            scaled_pixmap = pixmap.scaled(new_width, new_height, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            print(f"üìè G√∂rsel k√º√ß√ºlt√ºld√º: {new_width}x{new_height}")
            
            splash = SplashScreen(scaled_pixmap)
        else:
            print("‚ùå G√∂rsel y√ºklenemedi, varsayƒ±lan kullanƒ±lƒ±yor")
            splash = SplashScreen()
    else:
        print("‚ùå Splash screen dosyasƒ± bulunamadƒ±, varsayƒ±lan kullanƒ±lƒ±yor")
        splash = SplashScreen()
    
    # Splash screen'i g√∂ster
    print("üöÄ Splash screen g√∂steriliyor...")
    splash.show()
    app.processEvents()
    
    # Ana pencereyi olu≈ütur (arka planda)
    print("üèóÔ∏è Ana pencere hazƒ±rlanƒ±yor...")
    main_window = main_window_class()
    
    # 1 saniye bekle
    print("‚è±Ô∏è 1 saniye bekleniyor...")
    splash_thread = SplashThread(1)
    splash_thread.finished.connect(lambda: finish_splash(splash, main_window, splash_thread))
    splash_thread.start()
    
    return main_window

def finish_splash(splash, main_window, splash_thread):
    """Splash screen'i kapat ve ana pencereyi g√∂ster"""
    # Thread'i g√ºvenli ≈üekilde durdur
    splash_thread.stop()
    
    # Splash screen'i kapat
    splash.finish(main_window)
    main_window.show()
    main_window.raise_()
    main_window.activateWindow()

# =============================================================================
# G√úNCELLEME Sƒ∞STEMƒ∞ TEST FONKSƒ∞YONU
# =============================================================================

def test_update_system():
    """G√ºncelleme sistemini test et"""
    print("üîÑ G√ºncelleme sistemi test ediliyor...")
    
    # Test versiyonlarƒ±
    test_versions = [
        ("22.07.24.01", "22.07.24.02", True),   # Yeni s√ºr√ºm mevcut
        ("22.07.24.02", "22.07.24.01", False),  # Eski s√ºr√ºm
        ("22.07.24.01", "22.07.24.01", False),  # Aynƒ± s√ºr√ºm
        ("22.07.24.01", "22.08.01.01", True),   # B√ºy√ºk g√ºncelleme
        ("22.08.01.01", "22.07.24.01", False),  # Geri d√∂n√º≈ü
        ("22.07.24.01", "22.07.24.01-beta", True),  # Beta s√ºr√ºm
        ("22.07.24.01-beta", "22.07.24.01", True),  # Stable s√ºr√ºm
    ]
    
    checker = UpdateChecker()
    
    for current, latest, expected in test_versions:
        result = checker.compare_versions(latest, current)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} {current} -> {latest}: {result} (beklenen: {expected})")
    
    print("‚úÖ G√ºncelleme sistemi test tamamlandƒ±!")

# =============================================================================
# ANA UYGULAMA
# =============================================================================

if __name__ == "__main__":
    # Test modu kontrol√º
    if len(sys.argv) > 1 and sys.argv[1] == "--test-update":
        test_update_system()
        sys.exit(0)
    
    app = QApplication(sys.argv)
    app.setApplicationName(Config.APP_NAME)
    app.setApplicationVersion(Config.VERSION)

    def exception_hook(exctype, value, tb):
        error_msg = f"Hata: {exctype.__name__}: {value}"
        logger.critical(f"Beklenmeyen hata: {error_msg}", exc=value)
        
        # Hata detaylarƒ±nƒ± log dosyasƒ±na yaz
        try:
            with open(os.path.join(Config.LOG_DIR, "error_traceback.log"), 'a', encoding='utf-8') as f:
                f.write(f"\n{'='*50}\n")
                f.write(f"Tarih: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"Hata: {exctype.__name__}: {value}\n")
                f.write("Traceback:\n")
                traceback.print_tb(tb, file=f)
                f.write(f"{'='*50}\n")
        except Exception as e:
            print(f"Traceback log hatasƒ±: {e}")
        
        # Kullanƒ±cƒ±ya hata mesajƒ± g√∂ster
        if QApplication.activeWindow():
            QMessageBox.critical(QApplication.activeWindow(), "Kritik Hata", 
                               f"Beklenmeyen bir hata olu≈ütu:\n{error_msg}\n\n"
                               f"Detaylar log dosyasƒ±na kaydedildi.")
    sys.excepthook = exception_hook

    # Splash screen ile ba≈ülat
    window = show_splash_screen(app, MainWindow)
    
    sys.exit(app.exec_())